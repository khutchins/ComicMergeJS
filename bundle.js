/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={144:(e,t,n)=>{"use strict";var r=n(743),i=n(621),o=n(76),a=n(119);e.exports=a||r.call(o,i)},621:e=>{"use strict";e.exports=Function.prototype.apply},76:e=>{"use strict";e.exports=Function.prototype.call},126:(e,t,n)=>{"use strict";var r=n(743),i=n(675),o=n(76),a=n(144);e.exports=function(e){if(e.length<1||"function"!=typeof e[0])throw new i("a function is required");return a(r,o,e)}},119:e=>{"use strict";e.exports="undefined"!=typeof Reflect&&Reflect&&Reflect.apply},556:(e,t,n)=>{"use strict";var r=n(453),i=n(126),o=i([r("%String.prototype.indexOf%")]);e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&o(e,".prototype.")>-1?i([n]):n}},176:(e,t,n)=>{"use strict";var r,i=n(126),o=n(795);try{r=[].__proto__===Array.prototype}catch(e){if(!e||"object"!=typeof e||!("code"in e)||"ERR_PROTO_ACCESS"!==e.code)throw e}var a=!!r&&o&&o(Object.prototype,"__proto__"),s=Object,l=s.getPrototypeOf;e.exports=a&&"function"==typeof a.get?i([a.get]):"function"==typeof l&&function(e){return l(null==e?e:s(e))}},655:e=>{"use strict";var t=Object.defineProperty||!1;if(t)try{t({},"a",{value:1})}catch(e){t=!1}e.exports=t},237:e=>{"use strict";e.exports=EvalError},383:e=>{"use strict";e.exports=Error},290:e=>{"use strict";e.exports=RangeError},538:e=>{"use strict";e.exports=ReferenceError},68:e=>{"use strict";e.exports=SyntaxError},675:e=>{"use strict";e.exports=TypeError},345:e=>{"use strict";e.exports=URIError},612:e=>{"use strict";e.exports=Object},353:e=>{"use strict";var t=Object.prototype.toString,n=Math.max,r=function(e,t){for(var n=[],r=0;r<e.length;r+=1)n[r]=e[r];for(var i=0;i<t.length;i+=1)n[i+e.length]=t[i];return n};e.exports=function(e){var i=this;if("function"!=typeof i||"[object Function]"!==t.apply(i))throw new TypeError("Function.prototype.bind called on incompatible "+i);for(var o,a=function(e){for(var t=[],n=1,r=0;n<e.length;n+=1,r+=1)t[r]=e[n];return t}(arguments),s=n(0,i.length-a.length),l=[],c=0;c<s;c++)l[c]="$"+c;if(o=Function("binder","return function ("+function(e){for(var t="",n=0;n<e.length;n+=1)t+=e[n],n+1<e.length&&(t+=",");return t}(l)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof o){var t=i.apply(this,r(a,arguments));return Object(t)===t?t:this}return i.apply(e,r(a,arguments))})),i.prototype){var d=function(){};d.prototype=i.prototype,o.prototype=new d,d.prototype=null}return o}},743:(e,t,n)=>{"use strict";var r=n(353);e.exports=Function.prototype.bind||r},453:(e,t,n)=>{"use strict";var r,i=n(612),o=n(383),a=n(237),s=n(290),l=n(538),c=n(68),d=n(675),u=n(345),f=n(514),p=n(968),h=n(188),m=n(2),g=n(880),y=Function,w=function(e){try{return y('"use strict"; return ('+e+").constructor;")()}catch(e){}},v=n(795),b=n(655),x=function(){throw new d},_=v?function(){try{return x}catch(e){try{return v(arguments,"callee").get}catch(e){return x}}}():x,S=n(39)(),k=n(176),A="function"==typeof Reflect&&Reflect.getPrototypeOf||i.getPrototypeOf||k,E=n(621),D=n(76),z={},C="undefined"!=typeof Uint8Array&&A?A(Uint8Array):r,O={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":S&&A?A([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":z,"%AsyncGenerator%":z,"%AsyncGeneratorFunction%":z,"%AsyncIteratorPrototype%":z,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?r:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?r:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":o,"%eval%":eval,"%EvalError%":a,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":y,"%GeneratorFunction%":z,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":S&&A?A(A([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&S&&A?A((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":i,"%Object.getOwnPropertyDescriptor%":v,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":s,"%ReferenceError%":l,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&S&&A?A((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":S&&A?A(""[Symbol.iterator]()):r,"%Symbol%":S?Symbol:r,"%SyntaxError%":c,"%ThrowTypeError%":_,"%TypedArray%":C,"%TypeError%":d,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":u,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet,"%Function.prototype.call%":D,"%Function.prototype.apply%":E,"%Object.defineProperty%":b,"%Math.abs%":f,"%Math.floor%":p,"%Math.max%":h,"%Math.min%":m,"%Math.pow%":g};if(A)try{null.error}catch(e){var j=A(A(e));O["%Error.prototype%"]=j}var R=function e(t){var n;if("%AsyncFunction%"===t)n=w("async function () {}");else if("%GeneratorFunction%"===t)n=w("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=w("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var i=e("%AsyncGenerator%");i&&A&&(n=A(i.prototype))}return O[t]=n,n},T={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},I=n(743),P=n(957),F=I.call(D,Array.prototype.concat),U=I.call(E,Array.prototype.splice),M=I.call(D,String.prototype.replace),W=I.call(D,String.prototype.slice),N=I.call(D,RegExp.prototype.exec),L=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,q=/\\(\\)?/g,B=function(e,t){var n,r=e;if(P(T,r)&&(r="%"+(n=T[r])[0]+"%"),P(O,r)){var i=O[r];if(i===z&&(i=R(r)),void 0===i&&!t)throw new d("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:i}}throw new c("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new d("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new d('"allowMissing" argument must be a boolean');if(null===N(/^%?[^%]*%?$/,e))throw new c("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=function(e){var t=W(e,0,1),n=W(e,-1);if("%"===t&&"%"!==n)throw new c("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new c("invalid intrinsic syntax, expected opening `%`");var r=[];return M(e,L,(function(e,t,n,i){r[r.length]=n?M(i,q,"$1"):t||e})),r}(e),r=n.length>0?n[0]:"",i=B("%"+r+"%",t),o=i.name,a=i.value,s=!1,l=i.alias;l&&(r=l[0],U(n,F([0,1],l)));for(var u=1,f=!0;u<n.length;u+=1){var p=n[u],h=W(p,0,1),m=W(p,-1);if(('"'===h||"'"===h||"`"===h||'"'===m||"'"===m||"`"===m)&&h!==m)throw new c("property names with quotes must have matching quotes");if("constructor"!==p&&f||(s=!0),P(O,o="%"+(r+="."+p)+"%"))a=O[o];else if(null!=a){if(!(p in a)){if(!t)throw new d("base intrinsic for "+e+" exists, but the property is not available.");return}if(v&&u+1>=n.length){var g=v(a,p);a=(f=!!g)&&"get"in g&&!("originalValue"in g.get)?g.get:a[p]}else f=P(a,p),a=a[p];f&&!s&&(O[o]=a)}}return a}},549:e=>{"use strict";e.exports=Object.getOwnPropertyDescriptor},795:(e,t,n)=>{"use strict";var r=n(549);if(r)try{r([],"length")}catch(e){r=null}e.exports=r},39:(e,t,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,i=n(333);e.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&i()}},333:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(var r in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var i=Object.getOwnPropertySymbols(e);if(1!==i.length||i[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},957:(e,t,n)=>{"use strict";var r=Function.prototype.call,i=Object.prototype.hasOwnProperty,o=n(743);e.exports=o.call(r,i)},514:e=>{"use strict";e.exports=Math.abs},968:e=>{"use strict";e.exports=Math.floor},188:e=>{"use strict";e.exports=Math.max},2:e=>{"use strict";e.exports=Math.min},880:e=>{"use strict";e.exports=Math.pow},859:(e,t,n)=>{var r="function"==typeof Map&&Map.prototype,i=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,o=r&&i&&"function"==typeof i.get?i.get:null,a=r&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,l=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,c=s&&l&&"function"==typeof l.get?l.get:null,d=s&&Set.prototype.forEach,u="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,f="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,p="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,h=Boolean.prototype.valueOf,m=Object.prototype.toString,g=Function.prototype.toString,y=String.prototype.match,w=String.prototype.slice,v=String.prototype.replace,b=String.prototype.toUpperCase,x=String.prototype.toLowerCase,_=RegExp.prototype.test,S=Array.prototype.concat,k=Array.prototype.join,A=Array.prototype.slice,E=Math.floor,D="function"==typeof BigInt?BigInt.prototype.valueOf:null,z=Object.getOwnPropertySymbols,C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,O="function"==typeof Symbol&&"object"==typeof Symbol.iterator,j="function"==typeof Symbol&&Symbol.toStringTag&&(Symbol.toStringTag,1)?Symbol.toStringTag:null,R=Object.prototype.propertyIsEnumerable,T=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function I(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||_.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-E(-e):E(e);if(r!==e){var i=String(r),o=w.call(t,i.length+1);return v.call(i,n,"$&_")+"."+v.call(v.call(o,/([0-9]{3})/g,"$&_"),/_$/,"")}}return v.call(t,n,"$&_")}var P=n(634),F=P.custom,U=H(F)?F:null,M={__proto__:null,double:'"',single:"'"},W={__proto__:null,double:/(["\\])/g,single:/(['\\])/g};function N(e,t,n){var r=n.quoteStyle||t,i=M[r];return i+e+i}function L(e){return v.call(String(e),/"/g,"&quot;")}function q(e){return!("[object Array]"!==Z(e)||j&&"object"==typeof e&&j in e)}function B(e){return!("[object RegExp]"!==Z(e)||j&&"object"==typeof e&&j in e)}function H(e){if(O)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!C)return!1;try{return C.call(e),!0}catch(e){}return!1}e.exports=function e(t,r,i,s){var l=r||{};if(K(l,"quoteStyle")&&!K(M,l.quoteStyle))throw new TypeError('option "quoteStyle" must be "single" or "double"');if(K(l,"maxStringLength")&&("number"==typeof l.maxStringLength?l.maxStringLength<0&&l.maxStringLength!==1/0:null!==l.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var m=!K(l,"customInspect")||l.customInspect;if("boolean"!=typeof m&&"symbol"!==m)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(K(l,"indent")&&null!==l.indent&&"\t"!==l.indent&&!(parseInt(l.indent,10)===l.indent&&l.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(K(l,"numericSeparator")&&"boolean"!=typeof l.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var b=l.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return Y(t,l);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var _=String(t);return b?I(t,_):_}if("bigint"==typeof t){var E=String(t)+"n";return b?I(t,E):E}var z=void 0===l.depth?5:l.depth;if(void 0===i&&(i=0),i>=z&&z>0&&"object"==typeof t)return q(t)?"[Array]":"[Object]";var F,W=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=k.call(Array(e.indent+1)," ")}return{base:n,prev:k.call(Array(t+1),n)}}(l,i);if(void 0===s)s=[];else if(X(s,t)>=0)return"[Circular]";function V(t,n,r){if(n&&(s=A.call(s)).push(n),r){var o={depth:l.depth};return K(l,"quoteStyle")&&(o.quoteStyle=l.quoteStyle),e(t,o,i+1,s)}return e(t,l,i+1,s)}if("function"==typeof t&&!B(t)){var G=function(e){if(e.name)return e.name;var t=y.call(g.call(e),/^function\s*([\w$]+)/);return t?t[1]:null}(t),ne=te(t,V);return"[Function"+(G?": "+G:" (anonymous)")+"]"+(ne.length>0?" { "+k.call(ne,", ")+" }":"")}if(H(t)){var re=O?v.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):C.call(t);return"object"!=typeof t||O?re:$(re)}if((F=t)&&"object"==typeof F&&("undefined"!=typeof HTMLElement&&F instanceof HTMLElement||"string"==typeof F.nodeName&&"function"==typeof F.getAttribute)){for(var ie="<"+x.call(String(t.nodeName)),oe=t.attributes||[],ae=0;ae<oe.length;ae++)ie+=" "+oe[ae].name+"="+N(L(oe[ae].value),"double",l);return ie+=">",t.childNodes&&t.childNodes.length&&(ie+="..."),ie+"</"+x.call(String(t.nodeName))+">"}if(q(t)){if(0===t.length)return"[]";var se=te(t,V);return W&&!function(e){for(var t=0;t<e.length;t++)if(X(e[t],"\n")>=0)return!1;return!0}(se)?"["+ee(se,W)+"]":"[ "+k.call(se,", ")+" ]"}if(function(e){return!("[object Error]"!==Z(e)||j&&"object"==typeof e&&j in e)}(t)){var le=te(t,V);return"cause"in Error.prototype||!("cause"in t)||R.call(t,"cause")?0===le.length?"["+String(t)+"]":"{ ["+String(t)+"] "+k.call(le,", ")+" }":"{ ["+String(t)+"] "+k.call(S.call("[cause]: "+V(t.cause),le),", ")+" }"}if("object"==typeof t&&m){if(U&&"function"==typeof t[U]&&P)return P(t,{depth:z-i});if("symbol"!==m&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!o||!e||"object"!=typeof e)return!1;try{o.call(e);try{c.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var ce=[];return a&&a.call(t,(function(e,n){ce.push(V(n,t,!0)+" => "+V(e,t))})),Q("Map",o.call(t),ce,W)}if(function(e){if(!c||!e||"object"!=typeof e)return!1;try{c.call(e);try{o.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var de=[];return d&&d.call(t,(function(e){de.push(V(e,t))})),Q("Set",c.call(t),de,W)}if(function(e){if(!u||!e||"object"!=typeof e)return!1;try{u.call(e,u);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return J("WeakMap");if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{u.call(e,u)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return J("WeakSet");if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{return p.call(e),!0}catch(e){}return!1}(t))return J("WeakRef");if(function(e){return!("[object Number]"!==Z(e)||j&&"object"==typeof e&&j in e)}(t))return $(V(Number(t)));if(function(e){if(!e||"object"!=typeof e||!D)return!1;try{return D.call(e),!0}catch(e){}return!1}(t))return $(V(D.call(t)));if(function(e){return!("[object Boolean]"!==Z(e)||j&&"object"==typeof e&&j in e)}(t))return $(h.call(t));if(function(e){return!("[object String]"!==Z(e)||j&&"object"==typeof e&&j in e)}(t))return $(V(String(t)));if("undefined"!=typeof window&&t===window)return"{ [object Window] }";if("undefined"!=typeof globalThis&&t===globalThis||void 0!==n.g&&t===n.g)return"{ [object globalThis] }";if(!function(e){return!("[object Date]"!==Z(e)||j&&"object"==typeof e&&j in e)}(t)&&!B(t)){var ue=te(t,V),fe=T?T(t)===Object.prototype:t instanceof Object||t.constructor===Object,pe=t instanceof Object?"":"null prototype",he=!fe&&j&&Object(t)===t&&j in t?w.call(Z(t),8,-1):pe?"Object":"",me=(fe||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(he||pe?"["+k.call(S.call([],he||[],pe||[]),": ")+"] ":"");return 0===ue.length?me+"{}":W?me+"{"+ee(ue,W)+"}":me+"{ "+k.call(ue,", ")+" }"}return String(t)};var V=Object.prototype.hasOwnProperty||function(e){return e in this};function K(e,t){return V.call(e,t)}function Z(e){return m.call(e)}function X(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function Y(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return Y(w.call(e,0,t.maxStringLength),t)+r}var i=W[t.quoteStyle||"single"];return i.lastIndex=0,N(v.call(v.call(e,i,"\\$1"),/[\x00-\x1f]/g,G),"single",t)}function G(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+b.call(t.toString(16))}function $(e){return"Object("+e+")"}function J(e){return e+" { ? }"}function Q(e,t,n,r){return e+" ("+t+") {"+(r?ee(n,r):k.call(n,", "))+"}"}function ee(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+k.call(e,","+n)+"\n"+t.prev}function te(e,t){var n=q(e),r=[];if(n){r.length=e.length;for(var i=0;i<e.length;i++)r[i]=K(e,i)?t(e[i],e):""}var o,a="function"==typeof z?z(e):[];if(O){o={};for(var s=0;s<a.length;s++)o["$"+a[s]]=a[s]}for(var l in e)K(e,l)&&(n&&String(Number(l))===l&&l<e.length||O&&o["$"+l]instanceof Symbol||(_.call(/[^\w$]/,l)?r.push(t(l,e)+": "+t(e[l],e)):r.push(l+": "+t(e[l],e))));if("function"==typeof z)for(var c=0;c<a.length;c++)R.call(e,a[c])&&r.push("["+t(a[c])+"]: "+t(e[a[c]],e));return r}},765:e=>{"use strict";var t=String.prototype.replace,n=/%20/g,r="RFC3986";e.exports={default:r,formatters:{RFC1738:function(e){return t.call(e,n,"+")},RFC3986:function(e){return String(e)}},RFC1738:"RFC1738",RFC3986:r}},373:(e,t,n)=>{"use strict";var r=n(636),i=n(642),o=n(765);e.exports={formats:o,parse:i,stringify:r}},642:(e,t,n)=>{"use strict";var r=n(720),i=Object.prototype.hasOwnProperty,o=Array.isArray,a={allowDots:!1,allowEmptyArrays:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decodeDotInKeys:!1,decoder:r.decode,delimiter:"&",depth:5,duplicates:"combine",ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictDepth:!1,strictNullHandling:!1},s=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},l=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},c=function(e,t,n,r){if(e){var o=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,a=/(\[[^[\]]*])/g,s=n.depth>0&&/(\[[^[\]]*])/.exec(o),c=s?o.slice(0,s.index):o,d=[];if(c){if(!n.plainObjects&&i.call(Object.prototype,c)&&!n.allowPrototypes)return;d.push(c)}for(var u=0;n.depth>0&&null!==(s=a.exec(o))&&u<n.depth;){if(u+=1,!n.plainObjects&&i.call(Object.prototype,s[1].slice(1,-1))&&!n.allowPrototypes)return;d.push(s[1])}if(s){if(!0===n.strictDepth)throw new RangeError("Input depth exceeded depth option of "+n.depth+" and strictDepth is true");d.push("["+o.slice(s.index)+"]")}return function(e,t,n,r){for(var i=r?t:l(t,n),o=e.length-1;o>=0;--o){var a,s=e[o];if("[]"===s&&n.parseArrays)a=n.allowEmptyArrays&&(""===i||n.strictNullHandling&&null===i)?[]:[].concat(i);else{a=n.plainObjects?Object.create(null):{};var c="["===s.charAt(0)&&"]"===s.charAt(s.length-1)?s.slice(1,-1):s,d=n.decodeDotInKeys?c.replace(/%2E/g,"."):c,u=parseInt(d,10);n.parseArrays||""!==d?!isNaN(u)&&s!==d&&String(u)===d&&u>=0&&n.parseArrays&&u<=n.arrayLimit?(a=[])[u]=i:"__proto__"!==d&&(a[d]=i):a={0:i}}i=a}return i}(d,t,n,r)}};e.exports=function(e,t){var n=function(e){if(!e)return a;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.decodeDotInKeys&&"boolean"!=typeof e.decodeDotInKeys)throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?a.charset:e.charset,n=void 0===e.duplicates?a.duplicates:e.duplicates;if("combine"!==n&&"first"!==n&&"last"!==n)throw new TypeError("The duplicates option must be either combine, first, or last");return{allowDots:void 0===e.allowDots?!0===e.decodeDotInKeys||a.allowDots:!!e.allowDots,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:a.allowEmptyArrays,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:a.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:a.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:a.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:a.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:a.comma,decodeDotInKeys:"boolean"==typeof e.decodeDotInKeys?e.decodeDotInKeys:a.decodeDotInKeys,decoder:"function"==typeof e.decoder?e.decoder:a.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:a.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:a.depth,duplicates:n,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:a.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:a.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:a.plainObjects,strictDepth:"boolean"==typeof e.strictDepth?!!e.strictDepth:a.strictDepth,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:a.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var d="string"==typeof e?function(e,t){var n={__proto__:null},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e;c=c.replace(/%5B/gi,"[").replace(/%5D/gi,"]");var d,u=t.parameterLimit===1/0?void 0:t.parameterLimit,f=c.split(t.delimiter,u),p=-1,h=t.charset;if(t.charsetSentinel)for(d=0;d<f.length;++d)0===f[d].indexOf("utf8=")&&("utf8=%E2%9C%93"===f[d]?h="utf-8":"utf8=%26%2310003%3B"===f[d]&&(h="iso-8859-1"),p=d,d=f.length);for(d=0;d<f.length;++d)if(d!==p){var m,g,y=f[d],w=y.indexOf("]="),v=-1===w?y.indexOf("="):w+1;-1===v?(m=t.decoder(y,a.decoder,h,"key"),g=t.strictNullHandling?null:""):(m=t.decoder(y.slice(0,v),a.decoder,h,"key"),g=r.maybeMap(l(y.slice(v+1),t),(function(e){return t.decoder(e,a.decoder,h,"value")}))),g&&t.interpretNumericEntities&&"iso-8859-1"===h&&(g=s(g)),y.indexOf("[]=")>-1&&(g=o(g)?[g]:g);var b=i.call(n,m);b&&"combine"===t.duplicates?n[m]=r.combine(n[m],g):b&&"last"!==t.duplicates||(n[m]=g)}return n}(e,n):e,u=n.plainObjects?Object.create(null):{},f=Object.keys(d),p=0;p<f.length;++p){var h=f[p],m=c(h,d[h],n,"string"==typeof e);u=r.merge(u,m,n)}return!0===n.allowSparse?u:r.compact(u)}},636:(e,t,n)=>{"use strict";var r=n(920),i=n(720),o=n(765),a=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},l=Array.isArray,c=Array.prototype.push,d=function(e,t){c.apply(e,l(t)?t:[t])},u=Date.prototype.toISOString,f=o.default,p={addQueryPrefix:!1,allowDots:!1,allowEmptyArrays:!1,arrayFormat:"indices",charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encodeDotInKeys:!1,encoder:i.encode,encodeValuesOnly:!1,format:f,formatter:o.formatters[f],indices:!1,serializeDate:function(e){return u.call(e)},skipNulls:!1,strictNullHandling:!1},h={},m=function e(t,n,o,a,s,c,u,f,m,g,y,w,v,b,x,_,S,k){for(var A,E=t,D=k,z=0,C=!1;void 0!==(D=D.get(h))&&!C;){var O=D.get(t);if(z+=1,void 0!==O){if(O===z)throw new RangeError("Cyclic object value");C=!0}void 0===D.get(h)&&(z=0)}if("function"==typeof g?E=g(n,E):E instanceof Date?E=v(E):"comma"===o&&l(E)&&(E=i.maybeMap(E,(function(e){return e instanceof Date?v(e):e}))),null===E){if(c)return m&&!_?m(n,p.encoder,S,"key",b):n;E=""}if("string"==typeof(A=E)||"number"==typeof A||"boolean"==typeof A||"symbol"==typeof A||"bigint"==typeof A||i.isBuffer(E))return m?[x(_?n:m(n,p.encoder,S,"key",b))+"="+x(m(E,p.encoder,S,"value",b))]:[x(n)+"="+x(String(E))];var j,R=[];if(void 0===E)return R;if("comma"===o&&l(E))_&&m&&(E=i.maybeMap(E,m)),j=[{value:E.length>0?E.join(",")||null:void 0}];else if(l(g))j=g;else{var T=Object.keys(E);j=y?T.sort(y):T}var I=f?n.replace(/\./g,"%2E"):n,P=a&&l(E)&&1===E.length?I+"[]":I;if(s&&l(E)&&0===E.length)return P+"[]";for(var F=0;F<j.length;++F){var U=j[F],M="object"==typeof U&&void 0!==U.value?U.value:E[U];if(!u||null!==M){var W=w&&f?U.replace(/\./g,"%2E"):U,N=l(E)?"function"==typeof o?o(P,W):P:P+(w?"."+W:"["+W+"]");k.set(t,z);var L=r();L.set(h,k),d(R,e(M,N,o,a,s,c,u,f,"comma"===o&&_&&l(E)?null:m,g,y,w,v,b,x,_,S,L))}}return R};e.exports=function(e,t){var n,i=e,c=function(e){if(!e)return p;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.encodeDotInKeys&&"boolean"!=typeof e.encodeDotInKeys)throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||p.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=o.default;if(void 0!==e.format){if(!a.call(o.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r,i=o.formatters[n],c=p.filter;if(("function"==typeof e.filter||l(e.filter))&&(c=e.filter),r=e.arrayFormat in s?e.arrayFormat:"indices"in e?e.indices?"indices":"repeat":p.arrayFormat,"commaRoundTrip"in e&&"boolean"!=typeof e.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var d=void 0===e.allowDots?!0===e.encodeDotInKeys||p.allowDots:!!e.allowDots;return{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:p.addQueryPrefix,allowDots:d,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:p.allowEmptyArrays,arrayFormat:r,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:p.charsetSentinel,commaRoundTrip:e.commaRoundTrip,delimiter:void 0===e.delimiter?p.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:p.encode,encodeDotInKeys:"boolean"==typeof e.encodeDotInKeys?e.encodeDotInKeys:p.encodeDotInKeys,encoder:"function"==typeof e.encoder?e.encoder:p.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:p.encodeValuesOnly,filter:c,format:n,formatter:i,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:p.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:p.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:p.strictNullHandling}}(t);"function"==typeof c.filter?i=(0,c.filter)("",i):l(c.filter)&&(n=c.filter);var u=[];if("object"!=typeof i||null===i)return"";var f=s[c.arrayFormat],h="comma"===f&&c.commaRoundTrip;n||(n=Object.keys(i)),c.sort&&n.sort(c.sort);for(var g=r(),y=0;y<n.length;++y){var w=n[y];c.skipNulls&&null===i[w]||d(u,m(i[w],w,f,h,c.allowEmptyArrays,c.strictNullHandling,c.skipNulls,c.encodeDotInKeys,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.format,c.formatter,c.encodeValuesOnly,c.charset,g))}var v=u.join(c.delimiter),b=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?b+="utf8=%26%2310003%3B&":b+="utf8=%E2%9C%93&"),v.length>0?b+v:""}},720:(e,t,n)=>{"use strict";var r=n(765),i=Object.prototype.hasOwnProperty,o=Array.isArray,a=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),s=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n},l=1024;e.exports={arrayToObject:s,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var i=t[r],a=i.obj[i.prop],s=Object.keys(a),l=0;l<s.length;++l){var c=s[l],d=a[c];"object"==typeof d&&null!==d&&-1===n.indexOf(d)&&(t.push({obj:a,prop:c}),n.push(d))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(o(n)){for(var r=[],i=0;i<n.length;++i)void 0!==n[i]&&r.push(n[i]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,i,o){if(0===e.length)return e;var s=e;if("symbol"==typeof e?s=Symbol.prototype.toString.call(e):"string"!=typeof e&&(s=String(e)),"iso-8859-1"===n)return escape(s).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var c="",d=0;d<s.length;d+=l){for(var u=s.length>=l?s.slice(d,d+l):s,f=[],p=0;p<u.length;++p){var h=u.charCodeAt(p);45===h||46===h||95===h||126===h||h>=48&&h<=57||h>=65&&h<=90||h>=97&&h<=122||o===r.RFC1738&&(40===h||41===h)?f[f.length]=u.charAt(p):h<128?f[f.length]=a[h]:h<2048?f[f.length]=a[192|h>>6]+a[128|63&h]:h<55296||h>=57344?f[f.length]=a[224|h>>12]+a[128|h>>6&63]+a[128|63&h]:(p+=1,h=65536+((1023&h)<<10|1023&u.charCodeAt(p)),f[f.length]=a[240|h>>18]+a[128|h>>12&63]+a[128|h>>6&63]+a[128|63&h])}c+=f.join("")}return c},isBuffer:function(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(o(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n){if(o(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!i.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var a=t;return o(t)&&!o(n)&&(a=s(t,r)),o(t)&&o(n)?(n.forEach((function(n,o){if(i.call(t,o)){var a=t[o];a&&"object"==typeof a&&n&&"object"==typeof n?t[o]=e(a,n,r):t.push(n)}else t[o]=n})),t):Object.keys(n).reduce((function(t,o){var a=n[o];return i.call(t,o)?t[o]=e(t[o],a,r):t[o]=a,t}),a)}}},803:(e,t,n)=>{"use strict";var r=n(859),i=n(675),o=function(e,t,n){for(var r,i=e;null!=(r=i.next);i=r)if(r.key===t)return i.next=r.next,n||(r.next=e.next,e.next=r),r};e.exports=function(){var e,t={assert:function(e){if(!t.has(e))throw new i("Side channel does not contain "+r(e))},delete:function(t){var n=e&&e.next,r=function(e,t){if(e)return o(e,t,!0)}(e,t);return r&&n&&n===r&&(e=void 0),!!r},get:function(t){return function(e,t){if(e){var n=o(e,t);return n&&n.value}}(e,t)},has:function(t){return function(e,t){return!!e&&!!o(e,t)}(e,t)},set:function(t,n){e||(e={next:void 0}),function(e,t,n){var r=o(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(e,t,n)}};return t}},507:(e,t,n)=>{"use strict";var r=n(453),i=n(556),o=n(859),a=n(675),s=r("%Map%",!0),l=i("Map.prototype.get",!0),c=i("Map.prototype.set",!0),d=i("Map.prototype.has",!0),u=i("Map.prototype.delete",!0),f=i("Map.prototype.size",!0);e.exports=!!s&&function(){var e,t={assert:function(e){if(!t.has(e))throw new a("Side channel does not contain "+o(e))},delete:function(t){if(e){var n=u(e,t);return 0===f(e)&&(e=void 0),n}return!1},get:function(t){if(e)return l(e,t)},has:function(t){return!!e&&d(e,t)},set:function(t,n){e||(e=new s),c(e,t,n)}};return t}},271:(e,t,n)=>{"use strict";var r=n(453),i=n(556),o=n(859),a=n(507),s=n(675),l=r("%WeakMap%",!0),c=i("WeakMap.prototype.get",!0),d=i("WeakMap.prototype.set",!0),u=i("WeakMap.prototype.has",!0),f=i("WeakMap.prototype.delete",!0);e.exports=l?function(){var e,t,n={assert:function(e){if(!n.has(e))throw new s("Side channel does not contain "+o(e))},delete:function(n){if(l&&n&&("object"==typeof n||"function"==typeof n)){if(e)return f(e,n)}else if(a&&t)return t.delete(n);return!1},get:function(n){return l&&n&&("object"==typeof n||"function"==typeof n)&&e?c(e,n):t&&t.get(n)},has:function(n){return l&&n&&("object"==typeof n||"function"==typeof n)&&e?u(e,n):!!t&&t.has(n)},set:function(n,r){l&&n&&("object"==typeof n||"function"==typeof n)?(e||(e=new l),d(e,n,r)):a&&(t||(t=a()),t.set(n,r))}};return n}:a},920:(e,t,n)=>{"use strict";var r=n(675),i=n(859),o=n(803),a=n(507),s=n(271)||a||o;e.exports=function(){var e,t={assert:function(e){if(!t.has(e))throw new r("Side channel does not contain "+i(e))},delete:function(t){return!!e&&e.delete(t)},get:function(t){return e&&e.get(t)},has:function(t){return!!e&&e.has(t)},set:function(t,n){e||(e=s()),e.set(t,n)}};return t}},246:(e,t,n)=>{"use strict";function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function c(e){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(e)}n.r(t),n.d(t,{MultiDrag:()=>bt,Sortable:()=>Le,Swap:()=>ct,default:()=>St});var d=c(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),u=c(/Edge/i),f=c(/firefox/i),p=c(/safari/i)&&!c(/chrome/i)&&!c(/android/i),h=c(/iP(ad|od|hone)/i),m=c(/chrome/i)&&c(/android/i),g={capture:!1,passive:!1};function y(e,t,n){e.addEventListener(t,n,!d&&g)}function w(e,t,n){e.removeEventListener(t,n,!d&&g)}function v(e,t){if(t){if(">"===t[0]&&(t=t.substring(1)),e)try{if(e.matches)return e.matches(t);if(e.msMatchesSelector)return e.msMatchesSelector(t);if(e.webkitMatchesSelector)return e.webkitMatchesSelector(t)}catch(e){return!1}return!1}}function b(e){return e.host&&e!==document&&e.host.nodeType?e.host:e.parentNode}function x(e,t,n,r){if(e){n=n||document;do{if(null!=t&&(">"===t[0]?e.parentNode===n&&v(e,t):v(e,t))||r&&e===n)return e;if(e===n)break}while(e=b(e))}return null}var _,S=/\s+/g;function k(e,t,n){if(e&&t)if(e.classList)e.classList[n?"add":"remove"](t);else{var r=(" "+e.className+" ").replace(S," ").replace(" "+t+" "," ");e.className=(r+(n?" "+t:"")).replace(S," ")}}function A(e,t,n){var r=e&&e.style;if(r){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(e,""):e.currentStyle&&(n=e.currentStyle),void 0===t?n:n[t];t in r||-1!==t.indexOf("webkit")||(t="-webkit-"+t),r[t]=n+("string"==typeof n?"":"px")}}function E(e,t){var n="";if("string"==typeof e)n=e;else do{var r=A(e,"transform");r&&"none"!==r&&(n=r+" "+n)}while(!t&&(e=e.parentNode));var i=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return i&&new i(n)}function D(e,t,n){if(e){var r=e.getElementsByTagName(t),i=0,o=r.length;if(n)for(;i<o;i++)n(r[i],i);return r}return[]}function z(){return document.scrollingElement||document.documentElement}function C(e,t,n,r,i){if(e.getBoundingClientRect||e===window){var o,a,s,l,c,u,f;if(e!==window&&e.parentNode&&e!==z()?(a=(o=e.getBoundingClientRect()).top,s=o.left,l=o.bottom,c=o.right,u=o.height,f=o.width):(a=0,s=0,l=window.innerHeight,c=window.innerWidth,u=window.innerHeight,f=window.innerWidth),(t||n)&&e!==window&&(i=i||e.parentNode,!d))do{if(i&&i.getBoundingClientRect&&("none"!==A(i,"transform")||n&&"static"!==A(i,"position"))){var p=i.getBoundingClientRect();a-=p.top+parseInt(A(i,"border-top-width")),s-=p.left+parseInt(A(i,"border-left-width")),l=a+o.height,c=s+o.width;break}}while(i=i.parentNode);if(r&&e!==window){var h=E(i||e),m=h&&h.a,g=h&&h.d;h&&(l=(a/=g)+(u/=g),c=(s/=m)+(f/=m))}return{top:a,left:s,bottom:l,right:c,width:f,height:u}}}function O(e,t,n){for(var r=P(e,!0),i=C(e)[t];r;){var o=C(r)[n];if(!("top"===n||"left"===n?i>=o:i<=o))return r;if(r===z())break;r=P(r,!1)}return!1}function j(e,t,n,r){for(var i=0,o=0,a=e.children;o<a.length;){if("none"!==a[o].style.display&&a[o]!==Le.ghost&&(r||a[o]!==Le.dragged)&&x(a[o],n.draggable,e,!1)){if(i===t)return a[o];i++}o++}return null}function R(e,t){for(var n=e.lastElementChild;n&&(n===Le.ghost||"none"===A(n,"display")||t&&!v(n,t));)n=n.previousElementSibling;return n||null}function T(e,t){var n=0;if(!e||!e.parentNode)return-1;for(;e=e.previousElementSibling;)"TEMPLATE"===e.nodeName.toUpperCase()||e===Le.clone||t&&!v(e,t)||n++;return n}function I(e){var t=0,n=0,r=z();if(e)do{var i=E(e),o=i.a,a=i.d;t+=e.scrollLeft*o,n+=e.scrollTop*a}while(e!==r&&(e=e.parentNode));return[t,n]}function P(e,t){if(!e||!e.getBoundingClientRect)return z();var n=e,r=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var i=A(n);if(n.clientWidth<n.scrollWidth&&("auto"==i.overflowX||"scroll"==i.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==i.overflowY||"scroll"==i.overflowY)){if(!n.getBoundingClientRect||n===document.body)return z();if(r||t)return n;r=!0}}}while(n=n.parentNode);return z()}function F(e,t){return Math.round(e.top)===Math.round(t.top)&&Math.round(e.left)===Math.round(t.left)&&Math.round(e.height)===Math.round(t.height)&&Math.round(e.width)===Math.round(t.width)}function U(e,t){return function(){if(!_){var n=arguments;1===n.length?e.call(this,n[0]):e.apply(this,n),_=setTimeout((function(){_=void 0}),t)}}}function M(e,t,n){e.scrollLeft+=t,e.scrollTop+=n}function W(e){var t=window.Polymer,n=window.jQuery||window.Zepto;return t&&t.dom?t.dom(e).cloneNode(!0):n?n(e).clone(!0)[0]:e.cloneNode(!0)}function N(e,t){A(e,"position","absolute"),A(e,"top",t.top),A(e,"left",t.left),A(e,"width",t.width),A(e,"height",t.height)}function L(e){A(e,"position",""),A(e,"top",""),A(e,"left",""),A(e,"width",""),A(e,"height","")}function q(e,t,n){var r={};return Array.from(e.children).forEach((function(i){var o,a,s,l;if(x(i,t.draggable,e,!1)&&!i.animated&&i!==n){var c=C(i);r.left=Math.min(null!==(o=r.left)&&void 0!==o?o:1/0,c.left),r.top=Math.min(null!==(a=r.top)&&void 0!==a?a:1/0,c.top),r.right=Math.max(null!==(s=r.right)&&void 0!==s?s:-1/0,c.right),r.bottom=Math.max(null!==(l=r.bottom)&&void 0!==l?l:-1/0,c.bottom)}})),r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}var B="Sortable"+(new Date).getTime();var H=[],V={initializeByDefault:!0},K={mount:function(e){for(var t in V)V.hasOwnProperty(t)&&!(t in e)&&(e[t]=V[t]);H.forEach((function(t){if(t.pluginName===e.pluginName)throw"Sortable: Cannot mount plugin ".concat(e.pluginName," more than once")})),H.push(e)},pluginEvent:function(e,t,n){var r=this;this.eventCanceled=!1,n.cancel=function(){r.eventCanceled=!0};var o=e+"Global";H.forEach((function(r){t[r.pluginName]&&(t[r.pluginName][o]&&t[r.pluginName][o](i({sortable:t},n)),t.options[r.pluginName]&&t[r.pluginName][e]&&t[r.pluginName][e](i({sortable:t},n)))}))},initializePlugins:function(e,t,n,r){for(var i in H.forEach((function(r){var i=r.pluginName;if(e.options[i]||r.initializeByDefault){var o=new r(e,t,e.options);o.sortable=e,o.options=e.options,e[i]=o,s(n,o.defaults)}})),e.options)if(e.options.hasOwnProperty(i)){var o=this.modifyOption(e,i,e.options[i]);void 0!==o&&(e.options[i]=o)}},getEventProperties:function(e,t){var n={};return H.forEach((function(r){"function"==typeof r.eventProperties&&s(n,r.eventProperties.call(t[r.pluginName],e))})),n},modifyOption:function(e,t,n){var r;return H.forEach((function(i){e[i.pluginName]&&i.optionListeners&&"function"==typeof i.optionListeners[t]&&(r=i.optionListeners[t].call(e[i.pluginName],n))})),r}};function Z(e){var t=e.sortable,n=e.rootEl,r=e.name,o=e.targetEl,a=e.cloneEl,s=e.toEl,l=e.fromEl,c=e.oldIndex,f=e.newIndex,p=e.oldDraggableIndex,h=e.newDraggableIndex,m=e.originalEvent,g=e.putSortable,y=e.extraEventProperties;if(t=t||n&&n[B]){var w,v=t.options,b="on"+r.charAt(0).toUpperCase()+r.substr(1);!window.CustomEvent||d||u?(w=document.createEvent("Event")).initEvent(r,!0,!0):w=new CustomEvent(r,{bubbles:!0,cancelable:!0}),w.to=s||n,w.from=l||n,w.item=o||n,w.clone=a,w.oldIndex=c,w.newIndex=f,w.oldDraggableIndex=p,w.newDraggableIndex=h,w.originalEvent=m,w.pullMode=g?g.lastPutMode:void 0;var x=i(i({},y),K.getEventProperties(r,t));for(var _ in x)w[_]=x[_];n&&n.dispatchEvent(w),v[b]&&v[b].call(t,w)}}var X=["evt"],Y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.evt,o=function(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(n,X);K.pluginEvent.bind(Le)(e,t,i({dragEl:$,parentEl:J,ghostEl:Q,rootEl:ee,nextEl:te,lastDownEl:ne,cloneEl:re,cloneHidden:ie,dragStarted:ye,putSortable:de,activeSortable:Le.active,originalEvent:r,oldIndex:oe,oldDraggableIndex:se,newIndex:ae,newDraggableIndex:le,hideGhostForTarget:Ue,unhideGhostForTarget:Me,cloneNowHidden:function(){ie=!0},cloneNowShown:function(){ie=!1},dispatchSortableEvent:function(e){G({sortable:t,name:e,originalEvent:r})}},o))};function G(e){Z(i({putSortable:de,cloneEl:re,targetEl:$,rootEl:ee,oldIndex:oe,oldDraggableIndex:se,newIndex:ae,newDraggableIndex:le},e))}var $,J,Q,ee,te,ne,re,ie,oe,ae,se,le,ce,de,ue,fe,pe,he,me,ge,ye,we,ve,be,xe,_e=!1,Se=!1,ke=[],Ae=!1,Ee=!1,De=[],ze=!1,Ce=[],Oe="undefined"!=typeof document,je=h,Re=u||d?"cssFloat":"float",Te=Oe&&!m&&!h&&"draggable"in document.createElement("div"),Ie=function(){if(Oe){if(d)return!1;var e=document.createElement("x");return e.style.cssText="pointer-events:auto","auto"===e.style.pointerEvents}}(),Pe=function(e,t){var n=A(e),r=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),i=j(e,0,t),o=j(e,1,t),a=i&&A(i),s=o&&A(o),l=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+C(i).width,c=s&&parseInt(s.marginLeft)+parseInt(s.marginRight)+C(o).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(i&&a.float&&"none"!==a.float){var d="left"===a.float?"left":"right";return!o||"both"!==s.clear&&s.clear!==d?"horizontal":"vertical"}return i&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||l>=r&&"none"===n[Re]||o&&"none"===n[Re]&&l+c>r)?"vertical":"horizontal"},Fe=function(e){function t(e,n){return function(r,i,o,a){var s=r.options.group.name&&i.options.group.name&&r.options.group.name===i.options.group.name;if(null==e&&(n||s))return!0;if(null==e||!1===e)return!1;if(n&&"clone"===e)return e;if("function"==typeof e)return t(e(r,i,o,a),n)(r,i,o,a);var l=(n?r:i).options.group.name;return!0===e||"string"==typeof e&&e===l||e.join&&e.indexOf(l)>-1}}var n={},r=e.group;r&&"object"==o(r)||(r={name:r}),n.name=r.name,n.checkPull=t(r.pull,!0),n.checkPut=t(r.put),n.revertClone=r.revertClone,e.group=n},Ue=function(){!Ie&&Q&&A(Q,"display","none")},Me=function(){!Ie&&Q&&A(Q,"display","")};Oe&&!m&&document.addEventListener("click",(function(e){if(Se)return e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.stopImmediatePropagation&&e.stopImmediatePropagation(),Se=!1,!1}),!0);var We=function(e){if($){e=e.touches?e.touches[0]:e;var t=(i=e.clientX,o=e.clientY,ke.some((function(e){var t=e[B].options.emptyInsertThreshold;if(t&&!R(e)){var n=C(e),r=i>=n.left-t&&i<=n.right+t,s=o>=n.top-t&&o<=n.bottom+t;return r&&s?a=e:void 0}})),a);if(t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);n.target=n.rootEl=t,n.preventDefault=void 0,n.stopPropagation=void 0,t[B]._onDragOver(n)}}var i,o,a},Ne=function(e){$&&$.parentNode[B]._isOutsideThisEl(e.target)};function Le(e,t){if(!e||!e.nodeType||1!==e.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(e));this.el=e,this.options=t=s({},t),e[B]=this;var n,r,o={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(e.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Pe(e,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Le.supportPointer&&"PointerEvent"in window&&(!p||h),emptyInsertThreshold:5};for(var a in K.initializePlugins(this,e,o),o)!(a in t)&&(t[a]=o[a]);for(var l in Fe(t),this)"_"===l.charAt(0)&&"function"==typeof this[l]&&(this[l]=this[l].bind(this));this.nativeDraggable=!t.forceFallback&&Te,this.nativeDraggable&&(this.options.touchStartThreshold=1),t.supportPointer?y(e,"pointerdown",this._onTapStart):(y(e,"mousedown",this._onTapStart),y(e,"touchstart",this._onTapStart)),this.nativeDraggable&&(y(e,"dragover",this),y(e,"dragenter",this)),ke.push(this.el),t.store&&t.store.get&&this.sort(t.store.get(this)||[]),s(this,(r=[],{captureAnimationState:function(){r=[],this.options.animation&&[].slice.call(this.el.children).forEach((function(e){if("none"!==A(e,"display")&&e!==Le.ghost){r.push({target:e,rect:C(e)});var t=i({},r[r.length-1].rect);if(e.thisAnimationDuration){var n=E(e,!0);n&&(t.top-=n.f,t.left-=n.e)}e.fromRect=t}}))},addAnimationState:function(e){r.push(e)},removeAnimationState:function(e){r.splice(function(e,t){for(var n in e)if(e.hasOwnProperty(n))for(var r in t)if(t.hasOwnProperty(r)&&t[r]===e[n][r])return Number(n);return-1}(r,{target:e}),1)},animateAll:function(e){var t=this;if(!this.options.animation)return clearTimeout(n),void("function"==typeof e&&e());var i=!1,o=0;r.forEach((function(e){var n=0,r=e.target,a=r.fromRect,s=C(r),l=r.prevFromRect,c=r.prevToRect,d=e.rect,u=E(r,!0);u&&(s.top-=u.f,s.left-=u.e),r.toRect=s,r.thisAnimationDuration&&F(l,s)&&!F(a,s)&&(d.top-s.top)/(d.left-s.left)==(a.top-s.top)/(a.left-s.left)&&(n=function(e,t,n,r){return Math.sqrt(Math.pow(t.top-e.top,2)+Math.pow(t.left-e.left,2))/Math.sqrt(Math.pow(t.top-n.top,2)+Math.pow(t.left-n.left,2))*r.animation}(d,l,c,t.options)),F(s,a)||(r.prevFromRect=a,r.prevToRect=s,n||(n=t.options.animation),t.animate(r,d,s,n)),n&&(i=!0,o=Math.max(o,n),clearTimeout(r.animationResetTimer),r.animationResetTimer=setTimeout((function(){r.animationTime=0,r.prevFromRect=null,r.fromRect=null,r.prevToRect=null,r.thisAnimationDuration=null}),n),r.thisAnimationDuration=n)})),clearTimeout(n),i?n=setTimeout((function(){"function"==typeof e&&e()}),o):"function"==typeof e&&e(),r=[]},animate:function(e,t,n,r){if(r){A(e,"transition",""),A(e,"transform","");var i=E(this.el),o=i&&i.a,a=i&&i.d,s=(t.left-n.left)/(o||1),l=(t.top-n.top)/(a||1);e.animatingX=!!s,e.animatingY=!!l,A(e,"transform","translate3d("+s+"px,"+l+"px,0)"),this.forRepaintDummy=function(e){return e.offsetWidth}(e),A(e,"transition","transform "+r+"ms"+(this.options.easing?" "+this.options.easing:"")),A(e,"transform","translate3d(0,0,0)"),"number"==typeof e.animated&&clearTimeout(e.animated),e.animated=setTimeout((function(){A(e,"transition",""),A(e,"transform",""),e.animated=!1,e.animatingX=!1,e.animatingY=!1}),r)}}}))}function qe(e,t,n,r,i,o,a,s){var l,c,f=e[B],p=f.options.onMove;return!window.CustomEvent||d||u?(l=document.createEvent("Event")).initEvent("move",!0,!0):l=new CustomEvent("move",{bubbles:!0,cancelable:!0}),l.to=t,l.from=e,l.dragged=n,l.draggedRect=r,l.related=i||t,l.relatedRect=o||C(t),l.willInsertAfter=s,l.originalEvent=a,e.dispatchEvent(l),p&&(c=p.call(f,l,a)),c}function Be(e){e.draggable=!1}function He(){ze=!1}function Ve(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,n=t.length,r=0;n--;)r+=t.charCodeAt(n);return r.toString(36)}function Ke(e){return setTimeout(e,0)}function Ze(e){return clearTimeout(e)}Le.prototype={constructor:Le,_isOutsideThisEl:function(e){this.el.contains(e)||e===this.el||(we=null)},_getDirection:function(e,t){return"function"==typeof this.options.direction?this.options.direction.call(this,e,t,$):this.options.direction},_onTapStart:function(e){if(e.cancelable){var t=this,n=this.el,r=this.options,i=r.preventOnFilter,o=e.type,a=e.touches&&e.touches[0]||e.pointerType&&"touch"===e.pointerType&&e,s=(a||e).target,l=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||s,c=r.filter;if(function(e){Ce.length=0;for(var t=e.getElementsByTagName("input"),n=t.length;n--;){var r=t[n];r.checked&&Ce.push(r)}}(n),!$&&!(/mousedown|pointerdown/.test(o)&&0!==e.button||r.disabled)&&!l.isContentEditable&&(this.nativeDraggable||!p||!s||"SELECT"!==s.tagName.toUpperCase())&&!((s=x(s,r.draggable,n,!1))&&s.animated||ne===s)){if(oe=T(s),se=T(s,r.draggable),"function"==typeof c){if(c.call(this,e,s,this))return G({sortable:t,rootEl:l,name:"filter",targetEl:s,toEl:n,fromEl:n}),Y("filter",t,{evt:e}),void(i&&e.preventDefault())}else if(c&&(c=c.split(",").some((function(r){if(r=x(l,r.trim(),n,!1))return G({sortable:t,rootEl:r,name:"filter",targetEl:s,fromEl:n,toEl:n}),Y("filter",t,{evt:e}),!0}))))return void(i&&e.preventDefault());r.handle&&!x(l,r.handle,n,!1)||this._prepareDragStart(e,a,s)}}},_prepareDragStart:function(e,t,n){var r,i=this,o=i.el,a=i.options,s=o.ownerDocument;if(n&&!$&&n.parentNode===o){var l=C(n);if(ee=o,J=($=n).parentNode,te=$.nextSibling,ne=n,ce=a.group,Le.dragged=$,ue={target:$,clientX:(t||e).clientX,clientY:(t||e).clientY},me=ue.clientX-l.left,ge=ue.clientY-l.top,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,$.style["will-change"]="all",r=function(){Y("delayEnded",i,{evt:e}),Le.eventCanceled?i._onDrop():(i._disableDelayedDragEvents(),!f&&i.nativeDraggable&&($.draggable=!0),i._triggerDragStart(e,t),G({sortable:i,name:"choose",originalEvent:e}),k($,a.chosenClass,!0))},a.ignore.split(",").forEach((function(e){D($,e.trim(),Be)})),y(s,"dragover",We),y(s,"mousemove",We),y(s,"touchmove",We),a.supportPointer?(y(s,"pointerup",i._onDrop),!this.nativeDraggable&&y(s,"pointercancel",i._onDrop)):(y(s,"mouseup",i._onDrop),y(s,"touchend",i._onDrop),y(s,"touchcancel",i._onDrop)),f&&this.nativeDraggable&&(this.options.touchStartThreshold=4,$.draggable=!0),Y("delayStart",this,{evt:e}),!a.delay||a.delayOnTouchOnly&&!t||this.nativeDraggable&&(u||d))r();else{if(Le.eventCanceled)return void this._onDrop();a.supportPointer?(y(s,"pointerup",i._disableDelayedDrag),y(s,"pointercancel",i._disableDelayedDrag)):(y(s,"mouseup",i._disableDelayedDrag),y(s,"touchend",i._disableDelayedDrag),y(s,"touchcancel",i._disableDelayedDrag)),y(s,"mousemove",i._delayedDragTouchMoveHandler),y(s,"touchmove",i._delayedDragTouchMoveHandler),a.supportPointer&&y(s,"pointermove",i._delayedDragTouchMoveHandler),i._dragStartTimer=setTimeout(r,a.delay)}}},_delayedDragTouchMoveHandler:function(e){var t=e.touches?e.touches[0]:e;Math.max(Math.abs(t.clientX-this._lastX),Math.abs(t.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){$&&Be($),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var e=this.el.ownerDocument;w(e,"mouseup",this._disableDelayedDrag),w(e,"touchend",this._disableDelayedDrag),w(e,"touchcancel",this._disableDelayedDrag),w(e,"pointerup",this._disableDelayedDrag),w(e,"pointercancel",this._disableDelayedDrag),w(e,"mousemove",this._delayedDragTouchMoveHandler),w(e,"touchmove",this._delayedDragTouchMoveHandler),w(e,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,t){t=t||"touch"==e.pointerType&&e,!this.nativeDraggable||t?this.options.supportPointer?y(document,"pointermove",this._onTouchMove):y(document,t?"touchmove":"mousemove",this._onTouchMove):(y($,"dragend",this),y(ee,"dragstart",this._onDragStart));try{document.selection?Ke((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(e,t){if(_e=!1,ee&&$){Y("dragStarted",this,{evt:t}),this.nativeDraggable&&y(document,"dragover",Ne);var n=this.options;!e&&k($,n.dragClass,!1),k($,n.ghostClass,!0),Le.active=this,e&&this._appendGhost(),G({sortable:this,name:"start",originalEvent:t})}else this._nulling()},_emulateDragOver:function(){if(fe){this._lastX=fe.clientX,this._lastY=fe.clientY,Ue();for(var e=document.elementFromPoint(fe.clientX,fe.clientY),t=e;e&&e.shadowRoot&&(e=e.shadowRoot.elementFromPoint(fe.clientX,fe.clientY))!==t;)t=e;if($.parentNode[B]._isOutsideThisEl(e),t)do{if(t[B]&&t[B]._onDragOver({clientX:fe.clientX,clientY:fe.clientY,target:e,rootEl:t})&&!this.options.dragoverBubble)break;e=t}while(t=b(t));Me()}},_onTouchMove:function(e){if(ue){var t=this.options,n=t.fallbackTolerance,r=t.fallbackOffset,i=e.touches?e.touches[0]:e,o=Q&&E(Q,!0),a=Q&&o&&o.a,s=Q&&o&&o.d,l=je&&xe&&I(xe),c=(i.clientX-ue.clientX+r.x)/(a||1)+(l?l[0]-De[0]:0)/(a||1),d=(i.clientY-ue.clientY+r.y)/(s||1)+(l?l[1]-De[1]:0)/(s||1);if(!Le.active&&!_e){if(n&&Math.max(Math.abs(i.clientX-this._lastX),Math.abs(i.clientY-this._lastY))<n)return;this._onDragStart(e,!0)}if(Q){o?(o.e+=c-(pe||0),o.f+=d-(he||0)):o={a:1,b:0,c:0,d:1,e:c,f:d};var u="matrix(".concat(o.a,",").concat(o.b,",").concat(o.c,",").concat(o.d,",").concat(o.e,",").concat(o.f,")");A(Q,"webkitTransform",u),A(Q,"mozTransform",u),A(Q,"msTransform",u),A(Q,"transform",u),pe=c,he=d,fe=i}e.cancelable&&e.preventDefault()}},_appendGhost:function(){if(!Q){var e=this.options.fallbackOnBody?document.body:ee,t=C($,!0,je,!0,e),n=this.options;if(je){for(xe=e;"static"===A(xe,"position")&&"none"===A(xe,"transform")&&xe!==document;)xe=xe.parentNode;xe!==document.body&&xe!==document.documentElement?(xe===document&&(xe=z()),t.top+=xe.scrollTop,t.left+=xe.scrollLeft):xe=z(),De=I(xe)}k(Q=$.cloneNode(!0),n.ghostClass,!1),k(Q,n.fallbackClass,!0),k(Q,n.dragClass,!0),A(Q,"transition",""),A(Q,"transform",""),A(Q,"box-sizing","border-box"),A(Q,"margin",0),A(Q,"top",t.top),A(Q,"left",t.left),A(Q,"width",t.width),A(Q,"height",t.height),A(Q,"opacity","0.8"),A(Q,"position",je?"absolute":"fixed"),A(Q,"zIndex","100000"),A(Q,"pointerEvents","none"),Le.ghost=Q,e.appendChild(Q),A(Q,"transform-origin",me/parseInt(Q.style.width)*100+"% "+ge/parseInt(Q.style.height)*100+"%")}},_onDragStart:function(e,t){var n=this,r=e.dataTransfer,i=n.options;Y("dragStart",this,{evt:e}),Le.eventCanceled?this._onDrop():(Y("setupClone",this),Le.eventCanceled||((re=W($)).removeAttribute("id"),re.draggable=!1,re.style["will-change"]="",this._hideClone(),k(re,this.options.chosenClass,!1),Le.clone=re),n.cloneId=Ke((function(){Y("clone",n),Le.eventCanceled||(n.options.removeCloneOnHide||ee.insertBefore(re,$),n._hideClone(),G({sortable:n,name:"clone"}))})),!t&&k($,i.dragClass,!0),t?(Se=!0,n._loopId=setInterval(n._emulateDragOver,50)):(w(document,"mouseup",n._onDrop),w(document,"touchend",n._onDrop),w(document,"touchcancel",n._onDrop),r&&(r.effectAllowed="move",i.setData&&i.setData.call(n,r,$)),y(document,"drop",n),A($,"transform","translateZ(0)")),_e=!0,n._dragStartId=Ke(n._dragStarted.bind(n,t,e)),y(document,"selectstart",n),ye=!0,window.getSelection().removeAllRanges(),p&&A(document.body,"user-select","none"))},_onDragOver:function(e){var t,n,r,o,a=this.el,s=e.target,l=this.options,c=l.group,d=Le.active,u=ce===c,f=l.sort,p=de||d,h=this,m=!1;if(!ze){if(void 0!==e.preventDefault&&e.cancelable&&e.preventDefault(),s=x(s,l.draggable,a,!0),W("dragOver"),Le.eventCanceled)return m;if($.contains(e.target)||s.animated&&s.animatingX&&s.animatingY||h._ignoreWhileAnimating===s)return L(!1);if(Se=!1,d&&!l.disabled&&(u?f||(r=J!==ee):de===this||(this.lastPutMode=ce.checkPull(this,d,$,e))&&c.checkPut(this,d,$,e))){if(o="vertical"===this._getDirection(e,s),t=C($),W("dragOverValid"),Le.eventCanceled)return m;if(r)return J=ee,N(),this._hideClone(),W("revert"),Le.eventCanceled||(te?ee.insertBefore($,te):ee.appendChild($)),L(!0);var g=R(a,l.draggable);if(!g||function(e,t,n){var r=C(R(n.el,n.options.draggable)),i=q(n.el,n.options,Q);return t?e.clientX>i.right+10||e.clientY>r.bottom&&e.clientX>r.left:e.clientY>i.bottom+10||e.clientX>r.right&&e.clientY>r.top}(e,o,this)&&!g.animated){if(g===$)return L(!1);if(g&&a===e.target&&(s=g),s&&(n=C(s)),!1!==qe(ee,a,$,t,s,n,e,!!s))return N(),g&&g.nextSibling?a.insertBefore($,g.nextSibling):a.appendChild($),J=a,H(),L(!0)}else if(g&&function(e,t,n){var r=C(j(n.el,0,n.options,!0)),i=q(n.el,n.options,Q);return t?e.clientX<i.left-10||e.clientY<r.top&&e.clientX<r.right:e.clientY<i.top-10||e.clientY<r.bottom&&e.clientX<r.left}(e,o,this)){var y=j(a,0,l,!0);if(y===$)return L(!1);if(n=C(s=y),!1!==qe(ee,a,$,t,s,n,e,!1))return N(),a.insertBefore($,y),J=a,H(),L(!0)}else if(s.parentNode===a){n=C(s);var w,v,b,_=$.parentNode!==a,S=!function(e,t,n){var r=n?e.left:e.top,i=n?e.right:e.bottom,o=n?e.width:e.height,a=n?t.left:t.top,s=n?t.right:t.bottom,l=n?t.width:t.height;return r===a||i===s||r+o/2===a+l/2}($.animated&&$.toRect||t,s.animated&&s.toRect||n,o),E=o?"top":"left",D=O(s,"top","top")||O($,"top","top"),z=D?D.scrollTop:void 0;if(we!==s&&(v=n[E],Ae=!1,Ee=!S&&l.invertSwap||_),w=function(e,t,n,r,i,o,a,s){var l=r?e.clientY:e.clientX,c=r?n.height:n.width,d=r?n.top:n.left,u=r?n.bottom:n.right,f=!1;if(!a)if(s&&be<c*i){if(!Ae&&(1===ve?l>d+c*o/2:l<u-c*o/2)&&(Ae=!0),Ae)f=!0;else if(1===ve?l<d+be:l>u-be)return-ve}else if(l>d+c*(1-i)/2&&l<u-c*(1-i)/2)return function(e){return T($)<T(e)?1:-1}(t);return(f=f||a)&&(l<d+c*o/2||l>u-c*o/2)?l>d+c/2?1:-1:0}(e,s,n,o,S?1:l.swapThreshold,null==l.invertedSwapThreshold?l.swapThreshold:l.invertedSwapThreshold,Ee,we===s),0!==w){var I=T($);do{I-=w,b=J.children[I]}while(b&&("none"===A(b,"display")||b===Q))}if(0===w||b===s)return L(!1);we=s,ve=w;var P=s.nextElementSibling,F=!1,U=qe(ee,a,$,t,s,n,e,F=1===w);if(!1!==U)return 1!==U&&-1!==U||(F=1===U),ze=!0,setTimeout(He,30),N(),F&&!P?a.appendChild($):s.parentNode.insertBefore($,F?P:s),D&&M(D,0,z-D.scrollTop),J=$.parentNode,void 0===v||Ee||(be=Math.abs(v-C(s)[E])),H(),L(!0)}if(a.contains($))return L(!1)}return!1}function W(l,c){Y(l,h,i({evt:e,isOwner:u,axis:o?"vertical":"horizontal",revert:r,dragRect:t,targetRect:n,canSort:f,fromSortable:p,target:s,completed:L,onMove:function(n,r){return qe(ee,a,$,t,n,C(n),e,r)},changed:H},c))}function N(){W("dragOverAnimationCapture"),h.captureAnimationState(),h!==p&&p.captureAnimationState()}function L(t){return W("dragOverCompleted",{insertion:t}),t&&(u?d._hideClone():d._showClone(h),h!==p&&(k($,de?de.options.ghostClass:d.options.ghostClass,!1),k($,l.ghostClass,!0)),de!==h&&h!==Le.active?de=h:h===Le.active&&de&&(de=null),p===h&&(h._ignoreWhileAnimating=s),h.animateAll((function(){W("dragOverAnimationComplete"),h._ignoreWhileAnimating=null})),h!==p&&(p.animateAll(),p._ignoreWhileAnimating=null)),(s===$&&!$.animated||s===a&&!s.animated)&&(we=null),l.dragoverBubble||e.rootEl||s===document||($.parentNode[B]._isOutsideThisEl(e.target),!t&&We(e)),!l.dragoverBubble&&e.stopPropagation&&e.stopPropagation(),m=!0}function H(){ae=T($),le=T($,l.draggable),G({sortable:h,name:"change",toEl:a,newIndex:ae,newDraggableIndex:le,originalEvent:e})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){w(document,"mousemove",this._onTouchMove),w(document,"touchmove",this._onTouchMove),w(document,"pointermove",this._onTouchMove),w(document,"dragover",We),w(document,"mousemove",We),w(document,"touchmove",We)},_offUpEvents:function(){var e=this.el.ownerDocument;w(e,"mouseup",this._onDrop),w(e,"touchend",this._onDrop),w(e,"pointerup",this._onDrop),w(e,"pointercancel",this._onDrop),w(e,"touchcancel",this._onDrop),w(document,"selectstart",this)},_onDrop:function(e){var t=this.el,n=this.options;ae=T($),le=T($,n.draggable),Y("drop",this,{evt:e}),J=$&&$.parentNode,ae=T($),le=T($,n.draggable),Le.eventCanceled||(_e=!1,Ee=!1,Ae=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Ze(this.cloneId),Ze(this._dragStartId),this.nativeDraggable&&(w(document,"drop",this),w(t,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),p&&A(document.body,"user-select",""),A($,"transform",""),e&&(ye&&(e.cancelable&&e.preventDefault(),!n.dropBubble&&e.stopPropagation()),Q&&Q.parentNode&&Q.parentNode.removeChild(Q),(ee===J||de&&"clone"!==de.lastPutMode)&&re&&re.parentNode&&re.parentNode.removeChild(re),$&&(this.nativeDraggable&&w($,"dragend",this),Be($),$.style["will-change"]="",ye&&!_e&&k($,de?de.options.ghostClass:this.options.ghostClass,!1),k($,this.options.chosenClass,!1),G({sortable:this,name:"unchoose",toEl:J,newIndex:null,newDraggableIndex:null,originalEvent:e}),ee!==J?(ae>=0&&(G({rootEl:J,name:"add",toEl:J,fromEl:ee,originalEvent:e}),G({sortable:this,name:"remove",toEl:J,originalEvent:e}),G({rootEl:J,name:"sort",toEl:J,fromEl:ee,originalEvent:e}),G({sortable:this,name:"sort",toEl:J,originalEvent:e})),de&&de.save()):ae!==oe&&ae>=0&&(G({sortable:this,name:"update",toEl:J,originalEvent:e}),G({sortable:this,name:"sort",toEl:J,originalEvent:e})),Le.active&&(null!=ae&&-1!==ae||(ae=oe,le=se),G({sortable:this,name:"end",toEl:J,originalEvent:e}),this.save())))),this._nulling()},_nulling:function(){Y("nulling",this),ee=$=J=Q=te=re=ne=ie=ue=fe=ye=ae=le=oe=se=we=ve=de=ce=Le.dragged=Le.ghost=Le.clone=Le.active=null,Ce.forEach((function(e){e.checked=!0})),Ce.length=pe=he=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":$&&(this._onDragOver(e),function(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move"),e.cancelable&&e.preventDefault()}(e));break;case"selectstart":e.preventDefault()}},toArray:function(){for(var e,t=[],n=this.el.children,r=0,i=n.length,o=this.options;r<i;r++)x(e=n[r],o.draggable,this.el,!1)&&t.push(e.getAttribute(o.dataIdAttr)||Ve(e));return t},sort:function(e,t){var n={},r=this.el;this.toArray().forEach((function(e,t){var i=r.children[t];x(i,this.options.draggable,r,!1)&&(n[e]=i)}),this),t&&this.captureAnimationState(),e.forEach((function(e){n[e]&&(r.removeChild(n[e]),r.appendChild(n[e]))})),t&&this.animateAll()},save:function(){var e=this.options.store;e&&e.set&&e.set(this)},closest:function(e,t){return x(e,t||this.options.draggable,this.el,!1)},option:function(e,t){var n=this.options;if(void 0===t)return n[e];var r=K.modifyOption(this,e,t);n[e]=void 0!==r?r:t,"group"===e&&Fe(n)},destroy:function(){Y("destroy",this);var e=this.el;e[B]=null,w(e,"mousedown",this._onTapStart),w(e,"touchstart",this._onTapStart),w(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(w(e,"dragover",this),w(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),(function(e){e.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),ke.splice(ke.indexOf(this.el),1),this.el=e=null},_hideClone:function(){if(!ie){if(Y("hideClone",this),Le.eventCanceled)return;A(re,"display","none"),this.options.removeCloneOnHide&&re.parentNode&&re.parentNode.removeChild(re),ie=!0}},_showClone:function(e){if("clone"===e.lastPutMode){if(ie){if(Y("showClone",this),Le.eventCanceled)return;$.parentNode!=ee||this.options.group.revertClone?te?ee.insertBefore(re,te):ee.appendChild(re):ee.insertBefore(re,$),this.options.group.revertClone&&this.animate($,re),A(re,"display",""),ie=!1}}else this._hideClone()}},Oe&&y(document,"touchmove",(function(e){(Le.active||_e)&&e.cancelable&&e.preventDefault()})),Le.utils={on:y,off:w,css:A,find:D,is:function(e,t){return!!x(e,t,e,!1)},extend:function(e,t){if(e&&t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},throttle:U,closest:x,toggleClass:k,clone:W,index:T,nextTick:Ke,cancelNextTick:Ze,detectDirection:Pe,getChild:j,expando:B},Le.get=function(e){return e[B]},Le.mount=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t[0].constructor===Array&&(t=t[0]),t.forEach((function(e){if(!e.prototype||!e.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(e));e.utils&&(Le.utils=i(i({},Le.utils),e.utils)),K.mount(e)}))},Le.create=function(e,t){return new Le(e,t)},Le.version="1.15.6";var Xe,Ye,Ge,$e,Je,Qe,et=[],tt=!1;function nt(){et.forEach((function(e){clearInterval(e.pid)})),et=[]}function rt(){clearInterval(Qe)}var it,ot=U((function(e,t,n,r){if(t.scroll){var i,o=(e.touches?e.touches[0]:e).clientX,a=(e.touches?e.touches[0]:e).clientY,s=t.scrollSensitivity,l=t.scrollSpeed,c=z(),d=!1;Ye!==n&&(Ye=n,nt(),Xe=t.scroll,i=t.scrollFn,!0===Xe&&(Xe=P(n,!0)));var u=0,f=Xe;do{var p=f,h=C(p),m=h.top,g=h.bottom,y=h.left,w=h.right,v=h.width,b=h.height,x=void 0,_=void 0,S=p.scrollWidth,k=p.scrollHeight,E=A(p),D=p.scrollLeft,O=p.scrollTop;p===c?(x=v<S&&("auto"===E.overflowX||"scroll"===E.overflowX||"visible"===E.overflowX),_=b<k&&("auto"===E.overflowY||"scroll"===E.overflowY||"visible"===E.overflowY)):(x=v<S&&("auto"===E.overflowX||"scroll"===E.overflowX),_=b<k&&("auto"===E.overflowY||"scroll"===E.overflowY));var j=x&&(Math.abs(w-o)<=s&&D+v<S)-(Math.abs(y-o)<=s&&!!D),R=_&&(Math.abs(g-a)<=s&&O+b<k)-(Math.abs(m-a)<=s&&!!O);if(!et[u])for(var T=0;T<=u;T++)et[T]||(et[T]={});et[u].vx==j&&et[u].vy==R&&et[u].el===p||(et[u].el=p,et[u].vx=j,et[u].vy=R,clearInterval(et[u].pid),0==j&&0==R||(d=!0,et[u].pid=setInterval(function(){r&&0===this.layer&&Le.active._onTouchMove(Je);var t=et[this.layer].vy?et[this.layer].vy*l:0,n=et[this.layer].vx?et[this.layer].vx*l:0;"function"==typeof i&&"continue"!==i.call(Le.dragged.parentNode[B],n,t,e,Je,et[this.layer].el)||M(et[this.layer].el,n,t)}.bind({layer:u}),24))),u++}while(t.bubbleScroll&&f!==c&&(f=P(f,!1)));tt=d}}),30),at=function(e){var t=e.originalEvent,n=e.putSortable,r=e.dragEl,i=e.activeSortable,o=e.dispatchSortableEvent,a=e.hideGhostForTarget,s=e.unhideGhostForTarget;if(t){var l=n||i;a();var c=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,d=document.elementFromPoint(c.clientX,c.clientY);s(),l&&!l.el.contains(d)&&(o("spill"),this.onSpill({dragEl:r,putSortable:n}))}};function st(){}function lt(){}function ct(){function e(){this.defaults={swapClass:"sortable-swap-highlight"}}return e.prototype={dragStart:function(e){var t=e.dragEl;it=t},dragOverValid:function(e){var t=e.completed,n=e.target,r=e.onMove,i=e.activeSortable,o=e.changed,a=e.cancel;if(i.options.swap){var s=this.sortable.el,l=this.options;if(n&&n!==s){var c=it;!1!==r(n)?(k(n,l.swapClass,!0),it=n):it=null,c&&c!==it&&k(c,l.swapClass,!1)}o(),t(!0),a()}},drop:function(e){var t,n,r,i,o,a,s=e.activeSortable,l=e.putSortable,c=e.dragEl,d=l||this.sortable,u=this.options;it&&k(it,u.swapClass,!1),it&&(u.swap||l&&l.options.swap)&&c!==it&&(d.captureAnimationState(),d!==s&&s.captureAnimationState(),n=it,o=(t=c).parentNode,a=n.parentNode,o&&a&&!o.isEqualNode(n)&&!a.isEqualNode(t)&&(r=T(t),i=T(n),o.isEqualNode(a)&&r<i&&i++,o.insertBefore(n,o.children[r]),a.insertBefore(t,a.children[i])),d.animateAll(),d!==s&&s.animateAll())},nulling:function(){it=null}},s(e,{pluginName:"swap",eventProperties:function(){return{swapItem:it}}})}st.prototype={startIndex:null,dragStart:function(e){var t=e.oldDraggableIndex;this.startIndex=t},onSpill:function(e){var t=e.dragEl,n=e.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var r=j(this.sortable.el,this.startIndex,this.options);r?this.sortable.el.insertBefore(t,r):this.sortable.el.appendChild(t),this.sortable.animateAll(),n&&n.animateAll()},drop:at},s(st,{pluginName:"revertOnSpill"}),lt.prototype={onSpill:function(e){var t=e.dragEl,n=e.putSortable||this.sortable;n.captureAnimationState(),t.parentNode&&t.parentNode.removeChild(t),n.animateAll()},drop:at},s(lt,{pluginName:"removeOnSpill"});var dt,ut,ft,pt,ht,mt=[],gt=[],yt=!1,wt=!1,vt=!1;function bt(){function e(e){for(var t in this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this));e.options.avoidImplicitDeselect||(e.options.supportPointer?y(document,"pointerup",this._deselectMultiDrag):(y(document,"mouseup",this._deselectMultiDrag),y(document,"touchend",this._deselectMultiDrag))),y(document,"keydown",this._checkKeyDown),y(document,"keyup",this._checkKeyUp),this.defaults={selectedClass:"sortable-selected",multiDragKey:null,avoidImplicitDeselect:!1,setData:function(t,n){var r="";mt.length&&ut===e?mt.forEach((function(e,t){r+=(t?", ":"")+e.textContent})):r=n.textContent,t.setData("Text",r)}}}return e.prototype={multiDragKeyDown:!1,isMultiDrag:!1,delayStartGlobal:function(e){var t=e.dragEl;ft=t},delayEnded:function(){this.isMultiDrag=~mt.indexOf(ft)},setupClone:function(e){var t=e.sortable,n=e.cancel;if(this.isMultiDrag){for(var r=0;r<mt.length;r++)gt.push(W(mt[r])),gt[r].sortableIndex=mt[r].sortableIndex,gt[r].draggable=!1,gt[r].style["will-change"]="",k(gt[r],this.options.selectedClass,!1),mt[r]===ft&&k(gt[r],this.options.chosenClass,!1);t._hideClone(),n()}},clone:function(e){var t=e.sortable,n=e.rootEl,r=e.dispatchSortableEvent,i=e.cancel;this.isMultiDrag&&(this.options.removeCloneOnHide||mt.length&&ut===t&&(xt(!0,n),r("clone"),i()))},showClone:function(e){var t=e.cloneNowShown,n=e.rootEl,r=e.cancel;this.isMultiDrag&&(xt(!1,n),gt.forEach((function(e){A(e,"display","")})),t(),ht=!1,r())},hideClone:function(e){var t=this,n=(e.sortable,e.cloneNowHidden),r=e.cancel;this.isMultiDrag&&(gt.forEach((function(e){A(e,"display","none"),t.options.removeCloneOnHide&&e.parentNode&&e.parentNode.removeChild(e)})),n(),ht=!0,r())},dragStartGlobal:function(e){e.sortable,!this.isMultiDrag&&ut&&ut.multiDrag._deselectMultiDrag(),mt.forEach((function(e){e.sortableIndex=T(e)})),mt=mt.sort((function(e,t){return e.sortableIndex-t.sortableIndex})),vt=!0},dragStarted:function(e){var t=this,n=e.sortable;if(this.isMultiDrag){if(this.options.sort&&(n.captureAnimationState(),this.options.animation)){mt.forEach((function(e){e!==ft&&A(e,"position","absolute")}));var r=C(ft,!1,!0,!0);mt.forEach((function(e){e!==ft&&N(e,r)})),wt=!0,yt=!0}n.animateAll((function(){wt=!1,yt=!1,t.options.animation&&mt.forEach((function(e){L(e)})),t.options.sort&&_t()}))}},dragOver:function(e){var t=e.target,n=e.completed,r=e.cancel;wt&&~mt.indexOf(t)&&(n(!1),r())},revert:function(e){var t=e.fromSortable,n=e.rootEl,r=e.sortable,i=e.dragRect;mt.length>1&&(mt.forEach((function(e){r.addAnimationState({target:e,rect:wt?C(e):i}),L(e),e.fromRect=i,t.removeAnimationState(e)})),wt=!1,function(e,t){mt.forEach((function(n,r){var i=t.children[n.sortableIndex+(e?Number(r):0)];i?t.insertBefore(n,i):t.appendChild(n)}))}(!this.options.removeCloneOnHide,n))},dragOverCompleted:function(e){var t=e.sortable,n=e.isOwner,r=e.insertion,i=e.activeSortable,o=e.parentEl,a=e.putSortable,s=this.options;if(r){if(n&&i._hideClone(),yt=!1,s.animation&&mt.length>1&&(wt||!n&&!i.options.sort&&!a)){var l=C(ft,!1,!0,!0);mt.forEach((function(e){e!==ft&&(N(e,l),o.appendChild(e))})),wt=!0}if(!n)if(wt||_t(),mt.length>1){var c=ht;i._showClone(t),i.options.animation&&!ht&&c&&gt.forEach((function(e){i.addAnimationState({target:e,rect:pt}),e.fromRect=pt,e.thisAnimationDuration=null}))}else i._showClone(t)}},dragOverAnimationCapture:function(e){var t=e.dragRect,n=e.isOwner,r=e.activeSortable;if(mt.forEach((function(e){e.thisAnimationDuration=null})),r.options.animation&&!n&&r.multiDrag.isMultiDrag){pt=s({},t);var i=E(ft,!0);pt.top-=i.f,pt.left-=i.e}},dragOverAnimationComplete:function(){wt&&(wt=!1,_t())},drop:function(e){var t=e.originalEvent,n=e.rootEl,r=e.parentEl,i=e.sortable,o=e.dispatchSortableEvent,a=e.oldIndex,s=e.putSortable,l=s||this.sortable;if(t){var c=this.options,d=r.children;if(!vt)if(c.multiDragKey&&!this.multiDragKeyDown&&this._deselectMultiDrag(),k(ft,c.selectedClass,!~mt.indexOf(ft)),~mt.indexOf(ft))mt.splice(mt.indexOf(ft),1),dt=null,Z({sortable:i,rootEl:n,name:"deselect",targetEl:ft,originalEvent:t});else{if(mt.push(ft),Z({sortable:i,rootEl:n,name:"select",targetEl:ft,originalEvent:t}),t.shiftKey&&dt&&i.el.contains(dt)){var u=T(dt),f=T(ft);~u&&~f&&u!==f&&function(){var e,o;f>u?(o=u,e=f):(o=f,e=u+1);for(var a=c.filter;o<e;o++)~mt.indexOf(d[o])||x(d[o],c.draggable,r,!1)&&(a&&("function"==typeof a?a.call(i,t,d[o],i):a.split(",").some((function(e){return x(d[o],e.trim(),r,!1)})))||(k(d[o],c.selectedClass,!0),mt.push(d[o]),Z({sortable:i,rootEl:n,name:"select",targetEl:d[o],originalEvent:t})))}()}else dt=ft;ut=l}if(vt&&this.isMultiDrag){if(wt=!1,(r[B].options.sort||r!==n)&&mt.length>1){var p=C(ft),h=T(ft,":not(."+this.options.selectedClass+")");if(!yt&&c.animation&&(ft.thisAnimationDuration=null),l.captureAnimationState(),!yt&&(c.animation&&(ft.fromRect=p,mt.forEach((function(e){if(e.thisAnimationDuration=null,e!==ft){var t=wt?C(e):p;e.fromRect=t,l.addAnimationState({target:e,rect:t})}}))),_t(),mt.forEach((function(e){d[h]?r.insertBefore(e,d[h]):r.appendChild(e),h++})),a===T(ft))){var m=!1;mt.forEach((function(e){e.sortableIndex===T(e)||(m=!0)})),m&&(o("update"),o("sort"))}mt.forEach((function(e){L(e)})),l.animateAll()}ut=l}(n===r||s&&"clone"!==s.lastPutMode)&&gt.forEach((function(e){e.parentNode&&e.parentNode.removeChild(e)}))}},nullingGlobal:function(){this.isMultiDrag=vt=!1,gt.length=0},destroyGlobal:function(){this._deselectMultiDrag(),w(document,"pointerup",this._deselectMultiDrag),w(document,"mouseup",this._deselectMultiDrag),w(document,"touchend",this._deselectMultiDrag),w(document,"keydown",this._checkKeyDown),w(document,"keyup",this._checkKeyUp)},_deselectMultiDrag:function(e){if(!(void 0!==vt&&vt||ut!==this.sortable||e&&x(e.target,this.options.draggable,this.sortable.el,!1)||e&&0!==e.button))for(;mt.length;){var t=mt[0];k(t,this.options.selectedClass,!1),mt.shift(),Z({sortable:this.sortable,rootEl:this.sortable.el,name:"deselect",targetEl:t,originalEvent:e})}},_checkKeyDown:function(e){e.key===this.options.multiDragKey&&(this.multiDragKeyDown=!0)},_checkKeyUp:function(e){e.key===this.options.multiDragKey&&(this.multiDragKeyDown=!1)}},s(e,{pluginName:"multiDrag",utils:{select:function(e){var t=e.parentNode[B];t&&t.options.multiDrag&&!~mt.indexOf(e)&&(ut&&ut!==t&&(ut.multiDrag._deselectMultiDrag(),ut=t),k(e,t.options.selectedClass,!0),mt.push(e))},deselect:function(e){var t=e.parentNode[B],n=mt.indexOf(e);t&&t.options.multiDrag&&~n&&(k(e,t.options.selectedClass,!1),mt.splice(n,1))}},eventProperties:function(){var e,t=this,n=[],r=[];return mt.forEach((function(e){var i;n.push({multiDragElement:e,index:e.sortableIndex}),i=wt&&e!==ft?-1:wt?T(e,":not(."+t.options.selectedClass+")"):T(e),r.push({multiDragElement:e,index:i})})),{items:(e=mt,function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),clones:[].concat(gt),oldIndicies:n,newIndicies:r}},optionListeners:{multiDragKey:function(e){return"ctrl"===(e=e.toLowerCase())?e="Control":e.length>1&&(e=e.charAt(0).toUpperCase()+e.substr(1)),e}}})}function xt(e,t){gt.forEach((function(n,r){var i=t.children[n.sortableIndex+(e?Number(r):0)];i?t.insertBefore(n,i):t.appendChild(n)}))}function _t(){mt.forEach((function(e){e!==ft&&e.parentNode&&e.parentNode.removeChild(e)}))}Le.mount(new function(){function e(){for(var e in this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===e.charAt(0)&&"function"==typeof this[e]&&(this[e]=this[e].bind(this))}return e.prototype={dragStarted:function(e){var t=e.originalEvent;this.sortable.nativeDraggable?y(document,"dragover",this._handleAutoScroll):this.options.supportPointer?y(document,"pointermove",this._handleFallbackAutoScroll):t.touches?y(document,"touchmove",this._handleFallbackAutoScroll):y(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(e){var t=e.originalEvent;this.options.dragOverBubble||t.rootEl||this._handleAutoScroll(t)},drop:function(){this.sortable.nativeDraggable?w(document,"dragover",this._handleAutoScroll):(w(document,"pointermove",this._handleFallbackAutoScroll),w(document,"touchmove",this._handleFallbackAutoScroll),w(document,"mousemove",this._handleFallbackAutoScroll)),rt(),nt(),clearTimeout(_),_=void 0},nulling:function(){Je=Ye=Xe=tt=Qe=Ge=$e=null,et.length=0},_handleFallbackAutoScroll:function(e){this._handleAutoScroll(e,!0)},_handleAutoScroll:function(e,t){var n=this,r=(e.touches?e.touches[0]:e).clientX,i=(e.touches?e.touches[0]:e).clientY,o=document.elementFromPoint(r,i);if(Je=e,t||this.options.forceAutoScrollFallback||u||d||p){ot(e,this.options,o,t);var a=P(o,!0);!tt||Qe&&r===Ge&&i===$e||(Qe&&rt(),Qe=setInterval((function(){var o=P(document.elementFromPoint(r,i),!0);o!==a&&(a=o,nt()),ot(e,n.options,o,t)}),10),Ge=r,$e=i)}else{if(!this.options.bubbleScroll||P(o,!0)===z())return void nt();ot(e,this.options,P(o,!1),!1)}}},s(e,{pluginName:"scroll",initializeByDefault:!0})}),Le.mount(lt,st);const St=Le},221:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this._map1=new Map,this._map2=new Map}getFromKey(e){return this._map1.get(e)}getFromValue(e){return this._map2.get(e)}setFromKey(e,t){this._map1.set(e,t),this._map2.set(t,e)}setFromValue(e,t){this._map2.set(e,t),this._map1.set(t,e)}removeByKey(e){if(this._map1.has(e)){const t=this._map1.get(e);this._map1.delete(e),this._map2.delete(t)}}removeByValue(e){if(this._map2.has(e)){const t=this._map2.get(e);this._map2.delete(e),this._map1.delete(t)}}hasKey(e){return this._map1.has(e)}hasValue(e){return this._map2.has(e)}}},977:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ZipFile=void 0;const r=n(512);t.default=class{constructor(){this.files=[],this.listeners=new Set,this.lastIdx=-1}addFile(e){this.lastIdx++;const t=new i(e,String(this.lastIdx));this.files.push(t);for(const e of this.listeners)e(t)}addFiles(e){for(const t of e)this.addFile(t)}getEntries(e,t){return new r.ZipReader(new r.BlobReader(e)).getEntries(t)}async getURL(e,t){return URL.createObjectURL(await e.getData(new r.BlobWriter,t))}async generateZip(e,t){function n(){t&&t(l,s)}const i=new r.ZipWriter(new r.BlobWriter("application/zip")),o=e.length,a=o.toString().length;await Promise.all(e.map((e=>e.waitForEntries())));const s=e.map((e=>e.entries.length)).reduce(((e,t)=>e+t),0);let l=0;n();for(let t=0;t<o;t++){const o=e[t];for(let e=0;e<o.entries.length;e++){const s=o.entries[e],c=await s.getData(new r.BlobWriter);i.add(`${t.toString().padStart(a,"0")} - ${o.file.name} - ${s.filename}`,new r.BlobReader(c)),l+=1,n()}}return URL.createObjectURL(await i.close())}addListener(e){this.listeners.add(e)}};class i{constructor(e,t){this.file=e,this.idx=t,this.entriesPromise=new r.ZipReader(new r.BlobReader(e)).getEntries({}),this.entriesPromise.then((e=>{this.entries=e}))}async waitForEntries(){return this.entries?this.entries:this.entriesPromise}}t.ZipFile=i},156:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(977)),o=r(n(246)),a=r(n(221)),s=new i.default,l=new a.default,c=document.getElementById("file-list"),d=document.getElementById("sort-order"),u=new o.default(c,{dataIdAttr:"data-id",onChange:e=>{d.value="custom"}});{function p(e){e.preventDefault(),e.stopPropagation()}function h(e){e.preventDefault(),m(!1);const t=e.dataTransfer.files;t.length&&s.addFiles(t)}function m(e){e?g.classList.add("drag-over"):g.classList.remove("drag-over")}const g=document.getElementById("file-drop-area");g.addEventListener("dragover",p),g.addEventListener("dragenter",p),g.addEventListener("dragleave",p),g.addEventListener("dragover",(()=>{m(!0)})),g.addEventListener("dragleave",(()=>{m(!1)})),g.addEventListener("drop",h);const y=document.getElementById("file-input");async function w(e){if(l.hasKey(e))return;const t=v(e);l.setFromKey(e,t),c.appendChild(t)}function v(e){const t=document.createElement("li");t.classList.add("sortable-item"),t.setAttribute("data-id",e.idx);const n=document.createElement("div");n.classList.add("filename-container");const r=document.createElement("span");r.classList.add("handle"),r.textContent="☰",n.appendChild(r);const i=document.createElement("span");i.classList.add("filename"),i.textContent=i.title=`${e.file.name}`,n.appendChild(i);const o=document.createElement("span");o.classList.add("filecount"),e.waitForEntries().then((t=>{o.textContent=`${e.entries.length}`})),n.appendChild(o);const a=document.createElement("span");return a.classList.add("file-delete"),a.textContent="⌫",a.onclick=e=>{e.preventDefault(),c.removeChild(t),l.removeByValue(t)},n.appendChild(a),t.appendChild(n),t}g.onclick=()=>y.dispatchEvent(new MouseEvent("click")),y.onchange=()=>{s.addFiles(y.files)},s.addListener((e=>w(e)))}function f(){return u.toArray().map((e=>s.files.filter((t=>t.idx===e))[0]))}{const b=document.getElementById("download-button"),x=document.getElementById("download-progress");async function _(e){try{b.disabled=!0,x.classList.replace("hide","show");const e=await s.generateZip(f(),((e,t)=>{x.max=t,x.value=e}));if(e){const t=document.createElement("a"),n=new MouseEvent("click");t.href=e,t.download="Download.cbz",t.dispatchEvent(n)}}catch(e){alert(e)}finally{e.preventDefault(),b.disabled=!1,x.classList.replace("show","hide")}}b.addEventListener("click",_,!1)}{function S(e){u.sort(f().sort(e).map((e=>e.idx)))}function k(e,t){const n=e.file.name.split(/(\d+)/),r=t.file.name.split(/(\d+)/);for(let e=0;e<n.length&&e<r.length;e++)if(n[e]!==r[e])return n[e].match(/\d/)&&r[e].match(/\d/)?Number(n[e])-Number(r[e]):n[e].localeCompare(r[e]);return n.length-r.length}function A(){"smart"===d.value?S(k):"alpha"===d.value&&S(((e,t)=>e.file.name.localeCompare(t.file.name)))}d.addEventListener("change",(e=>{A()})),s.addListener((e=>{A()}))}},270:function(e,t,n){var r;e=n.nmd(e),function(){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof n.g&&n.g;i.global!==i&&i.window!==i&&i.self;var o,a=2147483647,s=36,l=/^xn--/,c=/[^\x20-\x7E]/,d=/[\x2E\u3002\uFF0E\uFF61]/g,u={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},f=Math.floor,p=String.fromCharCode;function h(e){throw new RangeError(u[e])}function m(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function g(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+m((e=e.replace(d,".")).split("."),t).join(".")}function y(e){for(var t,n,r=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function w(e){return m(e,(function(e){var t="";return e>65535&&(t+=p((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+p(e)})).join("")}function v(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function b(e,t,n){var r=0;for(e=n?f(e/700):e>>1,e+=f(e/t);e>455;r+=s)e=f(e/35);return f(r+36*e/(e+38))}function x(e){var t,n,r,i,o,l,c,d,u,p,m,g=[],y=e.length,v=0,x=128,_=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&h("not-basic"),g.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<y;){for(o=v,l=1,c=s;i>=y&&h("invalid-input"),((d=(m=e.charCodeAt(i++))-48<10?m-22:m-65<26?m-65:m-97<26?m-97:s)>=s||d>f((a-v)/l))&&h("overflow"),v+=d*l,!(d<(u=c<=_?1:c>=_+26?26:c-_));c+=s)l>f(a/(p=s-u))&&h("overflow"),l*=p;_=b(v-o,t=g.length+1,0==o),f(v/t)>a-x&&h("overflow"),x+=f(v/t),v%=t,g.splice(v++,0,x)}return w(g)}function _(e){var t,n,r,i,o,l,c,d,u,m,g,w,x,_,S,k=[];for(w=(e=y(e)).length,t=128,n=0,o=72,l=0;l<w;++l)(g=e[l])<128&&k.push(p(g));for(r=i=k.length,i&&k.push("-");r<w;){for(c=a,l=0;l<w;++l)(g=e[l])>=t&&g<c&&(c=g);for(c-t>f((a-n)/(x=r+1))&&h("overflow"),n+=(c-t)*x,t=c,l=0;l<w;++l)if((g=e[l])<t&&++n>a&&h("overflow"),g==t){for(d=n,u=s;!(d<(m=u<=o?1:u>=o+26?26:u-o));u+=s)S=d-m,_=s-m,k.push(p(v(m+S%_,0))),d=f(S/_);k.push(p(v(d,0))),o=b(n,x,r==i),n=0,++r}++n,++t}return k.join("")}o={version:"1.4.1",ucs2:{decode:y,encode:w},decode:x,encode:_,toASCII:function(e){return g(e,(function(e){return c.test(e)?"xn--"+_(e):e}))},toUnicode:function(e){return g(e,(function(e){return l.test(e)?x(e.slice(4).toLowerCase()):e}))}},void 0===(r=function(){return o}.call(t,n,t,e))||(e.exports=r)}()},835:(e,t,n)=>{"use strict";var r=n(270);function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,s=/^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(l),d=["%","/","?",";","#"].concat(c),u=["/","?","#"],f=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,h={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},g={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},y=n(373);function w(e,t,n){if(e&&"object"==typeof e&&e instanceof i)return e;var r=new i;return r.parse(e,t,n),r}i.prototype.parse=function(e,t,n){if("string"!=typeof e)throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),a=-1!==i&&i<e.indexOf("#")?"?":"#",l=e.split(a);l[0]=l[0].replace(/\\/g,"/");var w=e=l.join(a);if(w=w.trim(),!n&&1===e.split("#").length){var v=s.exec(w);if(v)return this.path=w,this.href=w,this.pathname=v[1],v[2]?(this.search=v[2],this.query=t?y.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var b=o.exec(w);if(b){var x=(b=b[0]).toLowerCase();this.protocol=x,w=w.substr(b.length)}if(n||b||w.match(/^\/\/[^@/]+@[^@/]+/)){var _="//"===w.substr(0,2);!_||b&&m[b]||(w=w.substr(2),this.slashes=!0)}if(!m[b]&&(_||b&&!g[b])){for(var S,k,A=-1,E=0;E<u.length;E++)-1!==(D=w.indexOf(u[E]))&&(-1===A||D<A)&&(A=D);for(-1!==(k=-1===A?w.lastIndexOf("@"):w.lastIndexOf("@",A))&&(S=w.slice(0,k),w=w.slice(k+1),this.auth=decodeURIComponent(S)),A=-1,E=0;E<d.length;E++){var D;-1!==(D=w.indexOf(d[E]))&&(-1===A||D<A)&&(A=D)}-1===A&&(A=w.length),this.host=w.slice(0,A),w=w.slice(A),this.parseHost(),this.hostname=this.hostname||"";var z="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!z)for(var C=this.hostname.split(/\./),O=(E=0,C.length);E<O;E++){var j=C[E];if(j&&!j.match(f)){for(var R="",T=0,I=j.length;T<I;T++)j.charCodeAt(T)>127?R+="x":R+=j[T];if(!R.match(f)){var P=C.slice(0,E),F=C.slice(E+1),U=j.match(p);U&&(P.push(U[1]),F.unshift(U[2])),F.length&&(w="/"+F.join(".")+w),this.hostname=P.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),z||(this.hostname=r.toASCII(this.hostname));var M=this.port?":"+this.port:"",W=this.hostname||"";this.host=W+M,this.href+=this.host,z&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==w[0]&&(w="/"+w))}if(!h[x])for(E=0,O=c.length;E<O;E++){var N=c[E];if(-1!==w.indexOf(N)){var L=encodeURIComponent(N);L===N&&(L=escape(N)),w=w.split(N).join(L)}}var q=w.indexOf("#");-1!==q&&(this.hash=w.substr(q),w=w.slice(0,q));var B=w.indexOf("?");if(-1!==B?(this.search=w.substr(B),this.query=w.substr(B+1),t&&(this.query=y.parse(this.query)),w=w.slice(0,B)):t&&(this.search="",this.query={}),w&&(this.pathname=w),g[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){M=this.pathname||"";var H=this.search||"";this.path=M+H}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&"object"==typeof this.query&&Object.keys(this.query).length&&(o=y.stringify(this.query,{arrayFormat:"repeat",addQueryPrefix:!1}));var a=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||g[t])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),t+i+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+r},i.prototype.resolve=function(e){return this.resolveObject(w(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if("string"==typeof e){var t=new i;t.parse(e,!1,!0),e=t}for(var n=new i,r=Object.keys(this),o=0;o<r.length;o++){var a=r[o];n[a]=this[a]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var s=Object.keys(e),l=0;l<s.length;l++){var c=s[l];"protocol"!==c&&(n[c]=e[c])}return g[n.protocol]&&n.hostname&&!n.pathname&&(n.pathname="/",n.path=n.pathname),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!g[e.protocol]){for(var d=Object.keys(e),u=0;u<d.length;u++){var f=d[u];n[f]=e[f]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||m[e.protocol])n.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),n.pathname=p.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var h=n.pathname||"",y=n.search||"";n.path=h+y}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var w=n.pathname&&"/"===n.pathname.charAt(0),v=e.host||e.pathname&&"/"===e.pathname.charAt(0),b=v||w||n.host&&e.pathname,x=b,_=n.pathname&&n.pathname.split("/")||[],S=(p=e.pathname&&e.pathname.split("/")||[],n.protocol&&!g[n.protocol]);if(S&&(n.hostname="",n.port=null,n.host&&(""===_[0]?_[0]=n.host:_.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),b=b&&(""===p[0]||""===_[0])),v)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,_=p;else if(p.length)_||(_=[]),_.pop(),_=_.concat(p),n.search=e.search,n.query=e.query;else if(null!=e.search)return S&&(n.host=_.shift(),n.hostname=n.host,(z=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=z.shift(),n.hostname=z.shift(),n.host=n.hostname)),n.search=e.search,n.query=e.query,null===n.pathname&&null===n.search||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!_.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var k=_.slice(-1)[0],A=(n.host||e.host||_.length>1)&&("."===k||".."===k)||""===k,E=0,D=_.length;D>=0;D--)"."===(k=_[D])?_.splice(D,1):".."===k?(_.splice(D,1),E++):E&&(_.splice(D,1),E--);if(!b&&!x)for(;E--;E)_.unshift("..");!b||""===_[0]||_[0]&&"/"===_[0].charAt(0)||_.unshift(""),A&&"/"!==_.join("/").substr(-1)&&_.push("");var z,C=""===_[0]||_[0]&&"/"===_[0].charAt(0);return S&&(n.hostname=C?"":_.length?_.shift():"",n.host=n.hostname,(z=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=z.shift(),n.hostname=z.shift(),n.host=n.hostname)),(b=b||n.host&&_.length)&&!C&&_.unshift(""),_.length>0?n.pathname=_.join("/"):(n.pathname=null,n.path=null),null===n.pathname&&null===n.search||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},i.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)},t.parse=w,t.resolve=function(e,t){return w(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?w(e,!1,!0).resolveObject(t):t},t.format=function(e){return"string"==typeof e&&(e=w(e)),e instanceof i?e.format():i.prototype.format.call(e)},t.Url=i},634:()=>{},512:(e,t,n)=>{"use strict";var r="undefined"!=typeof document?document.currentScript:null;const i=-2;function o(e){return a(e.map((([e,t])=>new Array(e).fill(t,0,e))))}function a(e){return e.reduce(((e,t)=>e.concat(Array.isArray(t)?a(t):t)),[])}const s=[0,1,2,3].concat(...o([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function l(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.build_tree=function(n){const r=e.dyn_tree,i=e.stat_desc.static_tree,o=e.stat_desc.elems;let a,s,l,c=-1;for(n.heap_len=0,n.heap_max=573,a=0;a<o;a++)0!==r[2*a]?(n.heap[++n.heap_len]=c=a,n.depth[a]=0):r[2*a+1]=0;for(;n.heap_len<2;)l=n.heap[++n.heap_len]=c<2?++c:0,r[2*l]=1,n.depth[l]=0,n.opt_len--,i&&(n.static_len-=i[2*l+1]);for(e.max_code=c,a=Math.floor(n.heap_len/2);a>=1;a--)n.pqdownheap(r,a);l=o;do{a=n.heap[1],n.heap[1]=n.heap[n.heap_len--],n.pqdownheap(r,1),s=n.heap[1],n.heap[--n.heap_max]=a,n.heap[--n.heap_max]=s,r[2*l]=r[2*a]+r[2*s],n.depth[l]=Math.max(n.depth[a],n.depth[s])+1,r[2*a+1]=r[2*s+1]=l,n.heap[1]=l++,n.pqdownheap(r,1)}while(n.heap_len>=2);n.heap[--n.heap_max]=n.heap[1],function(t){const n=e.dyn_tree,r=e.stat_desc.static_tree,i=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,a=e.stat_desc.max_length;let s,l,c,d,u,f,p=0;for(d=0;d<=15;d++)t.bl_count[d]=0;for(n[2*t.heap[t.heap_max]+1]=0,s=t.heap_max+1;s<573;s++)l=t.heap[s],d=n[2*n[2*l+1]+1]+1,d>a&&(d=a,p++),n[2*l+1]=d,l>e.max_code||(t.bl_count[d]++,u=0,l>=o&&(u=i[l-o]),f=n[2*l],t.opt_len+=f*(d+u),r&&(t.static_len+=f*(r[2*l+1]+u)));if(0!==p){do{for(d=a-1;0===t.bl_count[d];)d--;t.bl_count[d]--,t.bl_count[d+1]+=2,t.bl_count[a]--,p-=2}while(p>0);for(d=a;0!==d;d--)for(l=t.bl_count[d];0!==l;)c=t.heap[--s],c>e.max_code||(n[2*c+1]!=d&&(t.opt_len+=(d-n[2*c+1])*n[2*c],n[2*c+1]=d),l--)}}(n),function(e,n,r){const i=[];let o,a,s,l=0;for(o=1;o<=15;o++)i[o]=l=l+r[o-1]<<1;for(a=0;a<=n;a++)s=e[2*a+1],0!==s&&(e[2*a]=t(i[s]++,s))}(r,e.max_code,n.bl_count)}}function c(e,t,n,r,i){const o=this;o.static_tree=e,o.extra_bits=t,o.extra_base=n,o.elems=r,o.max_length=i}l._length_code=[0,1,2,3,4,5,6,7].concat(...o([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),l.base_length=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],l.base_dist=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],l.d_code=function(e){return e<256?s[e]:s[256+(e>>>7)]},l.extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l.extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],l.extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],l.bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const d=o([[144,8],[112,9],[24,7],[8,8]]);c.static_ltree=a([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,d[t]])));const u=o([[30,5]]);function f(e,t,n,r,i){const o=this;o.good_length=e,o.max_lazy=t,o.nice_length=n,o.max_chain=r,o.func=i}c.static_dtree=a([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,u[t]]))),c.static_l_desc=new c(c.static_ltree,l.extra_lbits,257,286,15),c.static_d_desc=new c(c.static_dtree,l.extra_dbits,0,30,15),c.static_bl_desc=new c(null,l.extra_blbits,0,19,7);const p=[new f(0,0,0,0,0),new f(4,4,8,4,1),new f(4,5,16,8,1),new f(4,6,32,32,1),new f(4,4,16,16,2),new f(8,16,32,32,2),new f(8,16,128,128,2),new f(8,32,128,256,2),new f(32,128,258,1024,2),new f(32,258,258,4096,2)],h=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],m=113,g=666,y=262;function w(e,t,n,r){const i=e[2*t],o=e[2*n];return i<o||i==o&&r[t]<=r[n]}function v(){const e=this;let t,n,r,o,a,s,d,u,f,v,b,x,_,S,k,A,E,D,z,C,O,j,R,T,I,P,F,U,M,W,N,L,q;const B=new l,H=new l,V=new l;let K,Z,X,Y,G,$;function J(){let t;for(t=0;t<286;t++)N[2*t]=0;for(t=0;t<30;t++)L[2*t]=0;for(t=0;t<19;t++)q[2*t]=0;N[512]=1,e.opt_len=e.static_len=0,Z=X=0}function Q(e,t){let n,r=-1,i=e[1],o=0,a=7,s=4;0===i&&(a=138,s=3),e[2*(t+1)+1]=65535;for(let l=0;l<=t;l++)n=i,i=e[2*(l+1)+1],++o<a&&n==i||(o<s?q[2*n]+=o:0!==n?(n!=r&&q[2*n]++,q[32]++):o<=10?q[34]++:q[36]++,o=0,r=n,0===i?(a=138,s=3):n==i?(a=6,s=3):(a=7,s=4))}function ee(t){e.pending_buf[e.pending++]=t}function te(e){ee(255&e),ee(e>>>8&255)}function ne(e,t){let n;const r=t;$>16-r?(n=e,G|=n<<$&65535,te(G),G=n>>>16-$,$+=r-16):(G|=e<<$&65535,$+=r)}function re(e,t){const n=2*e;ne(65535&t[n],65535&t[n+1])}function ie(e,t){let n,r,i=-1,o=e[1],a=0,s=7,l=4;for(0===o&&(s=138,l=3),n=0;n<=t;n++)if(r=o,o=e[2*(n+1)+1],!(++a<s&&r==o)){if(a<l)do{re(r,q)}while(0!=--a);else 0!==r?(r!=i&&(re(r,q),a--),re(16,q),ne(a-3,2)):a<=10?(re(17,q),ne(a-3,3)):(re(18,q),ne(a-11,7));a=0,i=r,0===o?(s=138,l=3):r==o?(s=6,l=3):(s=7,l=4)}}function oe(){16==$?(te(G),G=0,$=0):$>=8&&(ee(255&G),G>>>=8,$-=8)}function ae(t,n){let r,i,o;if(e.dist_buf[Z]=t,e.lc_buf[Z]=255&n,Z++,0===t?N[2*n]++:(X++,t--,N[2*(l._length_code[n]+256+1)]++,L[2*l.d_code(t)]++),!(8191&Z)&&F>2){for(r=8*Z,i=O-E,o=0;o<30;o++)r+=L[2*o]*(5+l.extra_dbits[o]);if(r>>>=3,X<Math.floor(Z/2)&&r<Math.floor(i/2))return!0}return Z==K-1}function se(t,n){let r,i,o,a,s=0;if(0!==Z)do{r=e.dist_buf[s],i=e.lc_buf[s],s++,0===r?re(i,t):(o=l._length_code[i],re(o+256+1,t),a=l.extra_lbits[o],0!==a&&(i-=l.base_length[o],ne(i,a)),r--,o=l.d_code(r),re(o,n),a=l.extra_dbits[o],0!==a&&(r-=l.base_dist[o],ne(r,a)))}while(s<Z);re(256,t),Y=t[513]}function le(){$>8?te(G):$>0&&ee(255&G),G=0,$=0}function ce(t,n,r){ne(0+(r?1:0),3),function(t,n){le(),Y=8,te(n),te(~n),e.pending_buf.set(u.subarray(t,t+n),e.pending),e.pending+=n}(t,n)}function de(n){(function(t,n,r){let i,o,a=0;F>0?(B.build_tree(e),H.build_tree(e),a=function(){let t;for(Q(N,B.max_code),Q(L,H.max_code),V.build_tree(e),t=18;t>=3&&0===q[2*l.bl_order[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(),i=e.opt_len+3+7>>>3,o=e.static_len+3+7>>>3,o<=i&&(i=o)):i=o=n+5,n+4<=i&&-1!=t?ce(t,n,r):o==i?(ne(2+(r?1:0),3),se(c.static_ltree,c.static_dtree)):(ne(4+(r?1:0),3),function(e,t,n){let r;for(ne(e-257,5),ne(t-1,5),ne(n-4,4),r=0;r<n;r++)ne(q[2*l.bl_order[r]+1],3);ie(N,e-1),ie(L,t-1)}(B.max_code+1,H.max_code+1,a+1),se(N,L)),J(),r&&le()})(E>=0?E:-1,O-E,n),E=O,t.flush_pending()}function ue(){let e,n,r,i;do{if(i=f-R-O,0===i&&0===O&&0===R)i=a;else if(-1==i)i--;else if(O>=a+a-y){u.set(u.subarray(a,a+a),0),j-=a,O-=a,E-=a,e=_,r=e;do{n=65535&b[--r],b[r]=n>=a?n-a:0}while(0!=--e);e=a,r=e;do{n=65535&v[--r],v[r]=n>=a?n-a:0}while(0!=--e);i+=a}if(0===t.avail_in)return;e=t.read_buf(u,O+R,i),R+=e,R>=3&&(x=255&u[O],x=(x<<A^255&u[O+1])&k)}while(R<y&&0!==t.avail_in)}function fe(e){let t,n,r=I,i=O,o=T;const s=O>a-y?O-(a-y):0;let l=W;const c=d,f=O+258;let p=u[i+o-1],h=u[i+o];T>=M&&(r>>=2),l>R&&(l=R);do{if(t=e,u[t+o]==h&&u[t+o-1]==p&&u[t]==u[i]&&u[++t]==u[i+1]){i+=2,t++;do{}while(u[++i]==u[++t]&&u[++i]==u[++t]&&u[++i]==u[++t]&&u[++i]==u[++t]&&u[++i]==u[++t]&&u[++i]==u[++t]&&u[++i]==u[++t]&&u[++i]==u[++t]&&i<f);if(n=258-(f-i),i=f-258,n>o){if(j=e,o=n,n>=l)break;p=u[i+o-1],h=u[i+o]}}}while((e=65535&v[e&c])>s&&0!=--r);return o<=R?o:R}e.depth=[],e.bl_count=[],e.heap=[],N=[],L=[],q=[],e.pqdownheap=function(t,n){const r=e.heap,i=r[n];let o=n<<1;for(;o<=e.heap_len&&(o<e.heap_len&&w(t,r[o+1],r[o],e.depth)&&o++,!w(t,i,r[o],e.depth));)r[n]=r[o],n=o,o<<=1;r[n]=i},e.deflateInit=function(t,l,h,g,y,w){return g||(g=8),y||(y=8),w||(w=0),t.msg=null,-1==l&&(l=6),y<1||y>9||8!=g||h<9||h>15||l<0||l>9||w<0||w>2?i:(t.dstate=e,s=h,a=1<<s,d=a-1,S=y+7,_=1<<S,k=_-1,A=Math.floor((S+3-1)/3),u=new Uint8Array(2*a),v=[],b=[],K=1<<y+6,e.pending_buf=new Uint8Array(4*K),r=4*K,e.dist_buf=new Uint16Array(K),e.lc_buf=new Uint8Array(K),F=l,U=w,function(t){return t.total_in=t.total_out=0,t.msg=null,e.pending=0,e.pending_out=0,n=m,o=0,B.dyn_tree=N,B.stat_desc=c.static_l_desc,H.dyn_tree=L,H.stat_desc=c.static_d_desc,V.dyn_tree=q,V.stat_desc=c.static_bl_desc,G=0,$=0,Y=8,J(),function(){f=2*a,b[_-1]=0;for(let e=0;e<_-1;e++)b[e]=0;P=p[F].max_lazy,M=p[F].good_length,W=p[F].nice_length,I=p[F].max_chain,O=0,E=0,R=0,D=T=2,C=0,x=0}(),0}(t))},e.deflateEnd=function(){return 42!=n&&n!=m&&n!=g?i:(e.lc_buf=null,e.dist_buf=null,e.pending_buf=null,b=null,v=null,u=null,e.dstate=null,n==m?-3:0)},e.deflateParams=function(e,t,n){let r=0;return-1==t&&(t=6),t<0||t>9||n<0||n>2?i:(p[F].func!=p[t].func&&0!==e.total_in&&(r=e.deflate(1)),F!=t&&(F=t,P=p[F].max_lazy,M=p[F].good_length,W=p[F].nice_length,I=p[F].max_chain),U=n,r)},e.deflateSetDictionary=function(e,t,r){let o,s=r,l=0;if(!t||42!=n)return i;if(s<3)return 0;for(s>a-y&&(s=a-y,l=r-s),u.set(t.subarray(l,l+s),0),O=s,E=s,x=255&u[0],x=(x<<A^255&u[1])&k,o=0;o<=s-3;o++)x=(x<<A^255&u[o+2])&k,v[o&d]=b[x],b[x]=o;return 0},e.deflate=function(l,f){let w,S,I,M,W;if(f>4||f<0)return i;if(!l.next_out||!l.next_in&&0!==l.avail_in||n==g&&4!=f)return l.msg=h[4],i;if(0===l.avail_out)return l.msg=h[7],-5;var N;if(t=l,M=o,o=f,42==n&&(S=8+(s-8<<4)<<8,I=(F-1&255)>>1,I>3&&(I=3),S|=I<<6,0!==O&&(S|=32),S+=31-S%31,n=m,ee((N=S)>>8&255),ee(255&N)),0!==e.pending){if(t.flush_pending(),0===t.avail_out)return o=-1,0}else if(0===t.avail_in&&f<=M&&4!=f)return t.msg=h[7],-5;if(n==g&&0!==t.avail_in)return l.msg=h[7],-5;if(0!==t.avail_in||0!==R||0!=f&&n!=g){switch(W=-1,p[F].func){case 0:W=function(e){let n,i=65535;for(i>r-5&&(i=r-5);;){if(R<=1){if(ue(),0===R&&0==e)return 0;if(0===R)break}if(O+=R,R=0,n=E+i,(0===O||O>=n)&&(R=O-n,O=n,de(!1),0===t.avail_out))return 0;if(O-E>=a-y&&(de(!1),0===t.avail_out))return 0}return de(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(f);break;case 1:W=function(e){let n,r=0;for(;;){if(R<y){if(ue(),R<y&&0==e)return 0;if(0===R)break}if(R>=3&&(x=(x<<A^255&u[O+2])&k,r=65535&b[x],v[O&d]=b[x],b[x]=O),0!==r&&(O-r&65535)<=a-y&&2!=U&&(D=fe(r)),D>=3)if(n=ae(O-j,D-3),R-=D,D<=P&&R>=3){D--;do{O++,x=(x<<A^255&u[O+2])&k,r=65535&b[x],v[O&d]=b[x],b[x]=O}while(0!=--D);O++}else O+=D,D=0,x=255&u[O],x=(x<<A^255&u[O+1])&k;else n=ae(0,255&u[O]),R--,O++;if(n&&(de(!1),0===t.avail_out))return 0}return de(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(f);break;case 2:W=function(e){let n,r,i=0;for(;;){if(R<y){if(ue(),R<y&&0==e)return 0;if(0===R)break}if(R>=3&&(x=(x<<A^255&u[O+2])&k,i=65535&b[x],v[O&d]=b[x],b[x]=O),T=D,z=j,D=2,0!==i&&T<P&&(O-i&65535)<=a-y&&(2!=U&&(D=fe(i)),D<=5&&(1==U||3==D&&O-j>4096)&&(D=2)),T>=3&&D<=T){r=O+R-3,n=ae(O-1-z,T-3),R-=T-1,T-=2;do{++O<=r&&(x=(x<<A^255&u[O+2])&k,i=65535&b[x],v[O&d]=b[x],b[x]=O)}while(0!=--T);if(C=0,D=2,O++,n&&(de(!1),0===t.avail_out))return 0}else if(0!==C){if(n=ae(0,255&u[O-1]),n&&de(!1),O++,R--,0===t.avail_out)return 0}else C=1,O++,R--}return 0!==C&&(n=ae(0,255&u[O-1]),C=0),de(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(f)}if(2!=W&&3!=W||(n=g),0==W||2==W)return 0===t.avail_out&&(o=-1),0;if(1==W){if(1==f)ne(2,3),re(256,c.static_ltree),oe(),1+Y+10-$<9&&(ne(2,3),re(256,c.static_ltree),oe()),Y=7;else if(ce(0,0,!1),3==f)for(w=0;w<_;w++)b[w]=0;if(t.flush_pending(),0===t.avail_out)return o=-1,0}}return 4!=f?0:1}}function b(){const e=this;e.next_in_index=0,e.next_out_index=0,e.avail_in=0,e.total_in=0,e.avail_out=0,e.total_out=0}b.prototype={deflateInit(e,t){const n=this;return n.dstate=new v,t||(t=15),n.dstate.deflateInit(n,e,t)},deflate(e){const t=this;return t.dstate?t.dstate.deflate(t,e):i},deflateEnd(){const e=this;if(!e.dstate)return i;const t=e.dstate.deflateEnd();return e.dstate=null,t},deflateParams(e,t){const n=this;return n.dstate?n.dstate.deflateParams(n,e,t):i},deflateSetDictionary(e,t){const n=this;return n.dstate?n.dstate.deflateSetDictionary(n,e,t):i},read_buf(e,t,n){const r=this;let i=r.avail_in;return i>n&&(i=n),0===i?0:(r.avail_in-=i,e.set(r.next_in.subarray(r.next_in_index,r.next_in_index+i),t),r.next_in_index+=i,r.total_in+=i,i)},flush_pending(){const e=this;let t=e.dstate.pending;t>e.avail_out&&(t=e.avail_out),0!==t&&(e.next_out.set(e.dstate.pending_buf.subarray(e.dstate.pending_out,e.dstate.pending_out+t),e.next_out_index),e.next_out_index+=t,e.dstate.pending_out+=t,e.total_out+=t,e.avail_out-=t,e.dstate.pending-=t,0===e.dstate.pending&&(e.dstate.pending_out=0))}};const x=-2,_=-3,S=-5,k=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],A=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],E=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],D=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],z=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],C=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],O=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function j(){let e,t,n,r,i,o;function a(e,t,a,s,l,c,d,u,f,p,h){let m,g,y,w,v,b,x,k,A,E,D,z,C,O,j;E=0,v=a;do{n[e[t+E]]++,E++,v--}while(0!==v);if(n[0]==a)return d[0]=-1,u[0]=0,0;for(k=u[0],b=1;b<=15&&0===n[b];b++);for(x=b,k<b&&(k=b),v=15;0!==v&&0===n[v];v--);for(y=v,k>v&&(k=v),u[0]=k,O=1<<b;b<v;b++,O<<=1)if((O-=n[b])<0)return _;if((O-=n[v])<0)return _;for(n[v]+=O,o[1]=b=0,E=1,C=2;0!=--v;)o[C]=b+=n[E],C++,E++;v=0,E=0;do{0!==(b=e[t+E])&&(h[o[b]++]=v),E++}while(++v<a);for(a=o[y],o[0]=v=0,E=0,w=-1,z=-k,i[0]=0,D=0,j=0;x<=y;x++)for(m=n[x];0!=m--;){for(;x>z+k;){if(w++,z+=k,j=y-z,j=j>k?k:j,(g=1<<(b=x-z))>m+1&&(g-=m+1,C=x,b<j))for(;++b<j&&!((g<<=1)<=n[++C]);)g-=n[C];if(j=1<<b,p[0]+j>1440)return _;i[w]=D=p[0],p[0]+=j,0!==w?(o[w]=v,r[0]=b,r[1]=k,b=v>>>z-k,r[2]=D-i[w-1]-b,f.set(r,3*(i[w-1]+b))):d[0]=D}for(r[1]=x-z,E>=a?r[0]=192:h[E]<s?(r[0]=h[E]<256?0:96,r[2]=h[E++]):(r[0]=c[h[E]-s]+16+64,r[2]=l[h[E++]-s]),g=1<<x-z,b=v>>>z;b<j;b+=g)f.set(r,3*(D+b));for(b=1<<x-1;v&b;b>>>=1)v^=b;for(v^=b,A=(1<<z)-1;(v&A)!=o[w];)w--,z-=k,A=(1<<z)-1}return 0!==O&&1!=y?S:0}function s(a){let s;for(e||(e=[],t=[],n=new Int32Array(16),r=[],i=new Int32Array(15),o=new Int32Array(16)),t.length<a&&(t=[]),s=0;s<a;s++)t[s]=0;for(s=0;s<16;s++)n[s]=0;for(s=0;s<3;s++)r[s]=0;i.set(n.subarray(0,15),0),o.set(n.subarray(0,16),0)}this.inflate_trees_bits=function(n,r,i,o,l){let c;return s(19),e[0]=0,c=a(n,0,19,19,null,null,i,r,o,e,t),c==_?l.msg="oversubscribed dynamic bit lengths tree":c!=S&&0!==r[0]||(l.msg="incomplete dynamic bit lengths tree",c=_),c},this.inflate_trees_dynamic=function(n,r,i,o,l,c,d,u,f){let p;return s(288),e[0]=0,p=a(i,0,n,257,D,z,c,o,u,e,t),0!=p||0===o[0]?(p==_?f.msg="oversubscribed literal/length tree":-4!=p&&(f.msg="incomplete literal/length tree",p=_),p):(s(288),p=a(i,n,r,0,C,O,d,l,u,e,t),0!=p||0===l[0]&&n>257?(p==_?f.msg="oversubscribed distance tree":p==S?(f.msg="incomplete distance tree",p=_):-4!=p&&(f.msg="empty distance tree with lengths",p=_),p):0)}}function R(){const e=this;let t,n,r,i,o=0,a=0,s=0,l=0,c=0,d=0,u=0,f=0,p=0,h=0;function m(e,t,n,r,i,o,a,s){let l,c,d,u,f,p,h,m,g,y,w,v,b,x,S,A;h=s.next_in_index,m=s.avail_in,f=a.bitb,p=a.bitk,g=a.write,y=g<a.read?a.read-g-1:a.end-g,w=k[e],v=k[t];do{for(;p<20;)m--,f|=(255&s.read_byte(h++))<<p,p+=8;if(l=f&w,c=n,d=r,A=3*(d+l),0!==(u=c[A]))for(;;){if(f>>=c[A+1],p-=c[A+1],16&u){for(u&=15,b=c[A+2]+(f&k[u]),f>>=u,p-=u;p<15;)m--,f|=(255&s.read_byte(h++))<<p,p+=8;for(l=f&v,c=i,d=o,A=3*(d+l),u=c[A];;){if(f>>=c[A+1],p-=c[A+1],16&u){for(u&=15;p<u;)m--,f|=(255&s.read_byte(h++))<<p,p+=8;if(x=c[A+2]+(f&k[u]),f>>=u,p-=u,y-=b,g>=x)S=g-x,g-S>0&&2>g-S?(a.win[g++]=a.win[S++],a.win[g++]=a.win[S++],b-=2):(a.win.set(a.win.subarray(S,S+2),g),g+=2,S+=2,b-=2);else{S=g-x;do{S+=a.end}while(S<0);if(u=a.end-S,b>u){if(b-=u,g-S>0&&u>g-S)do{a.win[g++]=a.win[S++]}while(0!=--u);else a.win.set(a.win.subarray(S,S+u),g),g+=u,S+=u,u=0;S=0}}if(g-S>0&&b>g-S)do{a.win[g++]=a.win[S++]}while(0!=--b);else a.win.set(a.win.subarray(S,S+b),g),g+=b,S+=b,b=0;break}if(64&u)return s.msg="invalid distance code",b=s.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,a.bitb=f,a.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,a.write=g,_;l+=c[A+2],l+=f&k[u],A=3*(d+l),u=c[A]}break}if(64&u)return 32&u?(b=s.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,a.bitb=f,a.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,a.write=g,1):(s.msg="invalid literal/length code",b=s.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,a.bitb=f,a.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,a.write=g,_);if(l+=c[A+2],l+=f&k[u],A=3*(d+l),0===(u=c[A])){f>>=c[A+1],p-=c[A+1],a.win[g++]=c[A+2],y--;break}}else f>>=c[A+1],p-=c[A+1],a.win[g++]=c[A+2],y--}while(y>=258&&m>=10);return b=s.avail_in-m,b=p>>3<b?p>>3:b,m+=b,h-=b,p-=b<<3,a.bitb=f,a.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,a.write=g,0}e.init=function(e,o,a,s,l,c){t=0,u=e,f=o,r=a,p=s,i=l,h=c,n=null},e.proc=function(e,g,y){let w,v,b,S,A,E,D,z=0,C=0,O=0;for(O=g.next_in_index,S=g.avail_in,z=e.bitb,C=e.bitk,A=e.write,E=A<e.read?e.read-A-1:e.end-A;;)switch(t){case 0:if(E>=258&&S>=10&&(e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,y=m(u,f,r,p,i,h,e,g),O=g.next_in_index,S=g.avail_in,z=e.bitb,C=e.bitk,A=e.write,E=A<e.read?e.read-A-1:e.end-A,0!=y)){t=1==y?7:9;break}s=u,n=r,a=p,t=1;case 1:for(w=s;C<w;){if(0===S)return e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);y=0,S--,z|=(255&g.read_byte(O++))<<C,C+=8}if(v=3*(a+(z&k[w])),z>>>=n[v+1],C-=n[v+1],b=n[v],0===b){l=n[v+2],t=6;break}if(16&b){c=15&b,o=n[v+2],t=2;break}if(!(64&b)){s=b,a=v/3+n[v+2];break}if(32&b){t=7;break}return t=9,g.msg="invalid literal/length code",y=_,e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);case 2:for(w=c;C<w;){if(0===S)return e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);y=0,S--,z|=(255&g.read_byte(O++))<<C,C+=8}o+=z&k[w],z>>=w,C-=w,s=f,n=i,a=h,t=3;case 3:for(w=s;C<w;){if(0===S)return e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);y=0,S--,z|=(255&g.read_byte(O++))<<C,C+=8}if(v=3*(a+(z&k[w])),z>>=n[v+1],C-=n[v+1],b=n[v],16&b){c=15&b,d=n[v+2],t=4;break}if(!(64&b)){s=b,a=v/3+n[v+2];break}return t=9,g.msg="invalid distance code",y=_,e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);case 4:for(w=c;C<w;){if(0===S)return e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);y=0,S--,z|=(255&g.read_byte(O++))<<C,C+=8}d+=z&k[w],z>>=w,C-=w,t=5;case 5:for(D=A-d;D<0;)D+=e.end;for(;0!==o;){if(0===E&&(A==e.end&&0!==e.read&&(A=0,E=A<e.read?e.read-A-1:e.end-A),0===E&&(e.write=A,y=e.inflate_flush(g,y),A=e.write,E=A<e.read?e.read-A-1:e.end-A,A==e.end&&0!==e.read&&(A=0,E=A<e.read?e.read-A-1:e.end-A),0===E)))return e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);e.win[A++]=e.win[D++],E--,D==e.end&&(D=0),o--}t=0;break;case 6:if(0===E&&(A==e.end&&0!==e.read&&(A=0,E=A<e.read?e.read-A-1:e.end-A),0===E&&(e.write=A,y=e.inflate_flush(g,y),A=e.write,E=A<e.read?e.read-A-1:e.end-A,A==e.end&&0!==e.read&&(A=0,E=A<e.read?e.read-A-1:e.end-A),0===E)))return e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);y=0,e.win[A++]=l,E--,t=0;break;case 7:if(C>7&&(C-=8,S++,O--),e.write=A,y=e.inflate_flush(g,y),A=e.write,E=A<e.read?e.read-A-1:e.end-A,e.read!=e.write)return e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);t=8;case 8:return y=1,e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);case 9:return y=_,e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y);default:return y=x,e.bitb=z,e.bitk=C,g.avail_in=S,g.total_in+=O-g.next_in_index,g.next_in_index=O,e.write=A,e.inflate_flush(g,y)}},e.free=function(){}}j.inflate_trees_fixed=function(e,t,n,r){return e[0]=9,t[0]=5,n[0]=A,r[0]=E,0};const T=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function I(e,t){const n=this;let r,i=0,o=0,a=0,s=0;const l=[0],c=[0],d=new R;let u=0,f=new Int32Array(4320);const p=new j;n.bitk=0,n.bitb=0,n.win=new Uint8Array(t),n.end=t,n.read=0,n.write=0,n.reset=function(e,t){t&&(t[0]=0),6==i&&d.free(e),i=0,n.bitk=0,n.bitb=0,n.read=n.write=0},n.reset(e,null),n.inflate_flush=function(e,t){let r,i,o;return i=e.next_out_index,o=n.read,r=(o<=n.write?n.write:n.end)-o,r>e.avail_out&&(r=e.avail_out),0!==r&&t==S&&(t=0),e.avail_out-=r,e.total_out+=r,e.next_out.set(n.win.subarray(o,o+r),i),i+=r,o+=r,o==n.end&&(o=0,n.write==n.end&&(n.write=0),r=n.write-o,r>e.avail_out&&(r=e.avail_out),0!==r&&t==S&&(t=0),e.avail_out-=r,e.total_out+=r,e.next_out.set(n.win.subarray(o,o+r),i),i+=r,o+=r),e.next_out_index=i,n.read=o,t},n.proc=function(e,t){let h,m,g,y,w,v,b,S;for(y=e.next_in_index,w=e.avail_in,m=n.bitb,g=n.bitk,v=n.write,b=v<n.read?n.read-v-1:n.end-v;;){let A,E,D,z,C,O,R,I;switch(i){case 0:for(;g<3;){if(0===w)return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);t=0,w--,m|=(255&e.read_byte(y++))<<g,g+=8}switch(h=7&m,u=1&h,h>>>1){case 0:m>>>=3,g-=3,h=7&g,m>>>=h,g-=h,i=1;break;case 1:A=[],E=[],D=[[]],z=[[]],j.inflate_trees_fixed(A,E,D,z),d.init(A[0],E[0],D[0],0,z[0],0),m>>>=3,g-=3,i=6;break;case 2:m>>>=3,g-=3,i=3;break;case 3:return m>>>=3,g-=3,i=9,e.msg="invalid block type",t=_,n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t)}break;case 1:for(;g<32;){if(0===w)return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);t=0,w--,m|=(255&e.read_byte(y++))<<g,g+=8}if((~m>>>16&65535)!=(65535&m))return i=9,e.msg="invalid stored block lengths",t=_,n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);o=65535&m,m=g=0,i=0!==o?2:0!==u?7:0;break;case 2:if(0===w)return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);if(0===b&&(v==n.end&&0!==n.read&&(v=0,b=v<n.read?n.read-v-1:n.end-v),0===b&&(n.write=v,t=n.inflate_flush(e,t),v=n.write,b=v<n.read?n.read-v-1:n.end-v,v==n.end&&0!==n.read&&(v=0,b=v<n.read?n.read-v-1:n.end-v),0===b)))return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);if(t=0,h=o,h>w&&(h=w),h>b&&(h=b),n.win.set(e.read_buf(y,h),v),y+=h,w-=h,v+=h,b-=h,0!=(o-=h))break;i=0!==u?7:0;break;case 3:for(;g<14;){if(0===w)return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);t=0,w--,m|=(255&e.read_byte(y++))<<g,g+=8}if(a=h=16383&m,(31&h)>29||(h>>5&31)>29)return i=9,e.msg="too many length or distance symbols",t=_,n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);if(h=258+(31&h)+(h>>5&31),!r||r.length<h)r=[];else for(S=0;S<h;S++)r[S]=0;m>>>=14,g-=14,s=0,i=4;case 4:for(;s<4+(a>>>10);){for(;g<3;){if(0===w)return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);t=0,w--,m|=(255&e.read_byte(y++))<<g,g+=8}r[T[s++]]=7&m,m>>>=3,g-=3}for(;s<19;)r[T[s++]]=0;if(l[0]=7,h=p.inflate_trees_bits(r,l,c,f,e),0!=h)return(t=h)==_&&(r=null,i=9),n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);s=0,i=5;case 5:for(;h=a,!(s>=258+(31&h)+(h>>5&31));){let o,d;for(h=l[0];g<h;){if(0===w)return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);t=0,w--,m|=(255&e.read_byte(y++))<<g,g+=8}if(h=f[3*(c[0]+(m&k[h]))+1],d=f[3*(c[0]+(m&k[h]))+2],d<16)m>>>=h,g-=h,r[s++]=d;else{for(S=18==d?7:d-14,o=18==d?11:3;g<h+S;){if(0===w)return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);t=0,w--,m|=(255&e.read_byte(y++))<<g,g+=8}if(m>>>=h,g-=h,o+=m&k[S],m>>>=S,g-=S,S=s,h=a,S+o>258+(31&h)+(h>>5&31)||16==d&&S<1)return r=null,i=9,e.msg="invalid bit length repeat",t=_,n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);d=16==d?r[S-1]:0;do{r[S++]=d}while(0!=--o);s=S}}if(c[0]=-1,C=[],O=[],R=[],I=[],C[0]=9,O[0]=6,h=a,h=p.inflate_trees_dynamic(257+(31&h),1+(h>>5&31),r,C,O,R,I,f,e),0!=h)return h==_&&(r=null,i=9),t=h,n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);d.init(C[0],O[0],f,R[0],f,I[0]),i=6;case 6:if(n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,1!=(t=d.proc(n,e,t)))return n.inflate_flush(e,t);if(t=0,d.free(e),y=e.next_in_index,w=e.avail_in,m=n.bitb,g=n.bitk,v=n.write,b=v<n.read?n.read-v-1:n.end-v,0===u){i=0;break}i=7;case 7:if(n.write=v,t=n.inflate_flush(e,t),v=n.write,b=v<n.read?n.read-v-1:n.end-v,n.read!=n.write)return n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);i=8;case 8:return t=1,n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);case 9:return t=_,n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t);default:return t=x,n.bitb=m,n.bitk=g,e.avail_in=w,e.total_in+=y-e.next_in_index,e.next_in_index=y,n.write=v,n.inflate_flush(e,t)}}},n.free=function(e){n.reset(e,null),n.win=null,f=null},n.set_dictionary=function(e,t,r){n.win.set(e.subarray(t,t+r),0),n.read=n.write=r},n.sync_point=function(){return 1==i?1:0}}const P=13,F=[0,0,255,255];function U(){const e=this;function t(e){return e&&e.istate?(e.total_in=e.total_out=0,e.msg=null,e.istate.mode=7,e.istate.blocks.reset(e,null),0):x}e.mode=0,e.method=0,e.was=[0],e.need=0,e.marker=0,e.wbits=0,e.inflateEnd=function(t){return e.blocks&&e.blocks.free(t),e.blocks=null,0},e.inflateInit=function(n,r){return n.msg=null,e.blocks=null,r<8||r>15?(e.inflateEnd(n),x):(e.wbits=r,n.istate.blocks=new I(n,1<<r),t(n),0)},e.inflate=function(e,t){let n,r;if(!e||!e.istate||!e.next_in)return x;const i=e.istate;for(t=4==t?S:0,n=S;;)switch(i.mode){case 0:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,8!=(15&(i.method=e.read_byte(e.next_in_index++)))){i.mode=P,e.msg="unknown compression method",i.marker=5;break}if(8+(i.method>>4)>i.wbits){i.mode=P,e.msg="invalid win size",i.marker=5;break}i.mode=1;case 1:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,r=255&e.read_byte(e.next_in_index++),((i.method<<8)+r)%31!=0){i.mode=P,e.msg="incorrect header check",i.marker=5;break}if(!(32&r)){i.mode=7;break}i.mode=2;case 2:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need=(255&e.read_byte(e.next_in_index++))<<24&4278190080,i.mode=3;case 3:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need+=(255&e.read_byte(e.next_in_index++))<<16&16711680,i.mode=4;case 4:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need+=(255&e.read_byte(e.next_in_index++))<<8&65280,i.mode=5;case 5:return 0===e.avail_in?n:(n=t,e.avail_in--,e.total_in++,i.need+=255&e.read_byte(e.next_in_index++),i.mode=6,2);case 6:return i.mode=P,e.msg="need dictionary",i.marker=0,x;case 7:if(n=i.blocks.proc(e,n),n==_){i.mode=P,i.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,i.blocks.reset(e,i.was),i.mode=12;case 12:return e.avail_in=0,1;case P:return _;default:return x}},e.inflateSetDictionary=function(e,t,n){let r=0,i=n;if(!e||!e.istate||6!=e.istate.mode)return x;const o=e.istate;return i>=1<<o.wbits&&(i=(1<<o.wbits)-1,r=n-i),o.blocks.set_dictionary(t,r,i),o.mode=7,0},e.inflateSync=function(e){let n,r,i,o,a;if(!e||!e.istate)return x;const s=e.istate;if(s.mode!=P&&(s.mode=P,s.marker=0),0===(n=e.avail_in))return S;for(r=e.next_in_index,i=s.marker;0!==n&&i<4;)e.read_byte(r)==F[i]?i++:i=0!==e.read_byte(r)?0:4-i,r++,n--;return e.total_in+=r-e.next_in_index,e.next_in_index=r,e.avail_in=n,s.marker=i,4!=i?_:(o=e.total_in,a=e.total_out,t(e),e.total_in=o,e.total_out=a,s.mode=7,0)},e.inflateSyncPoint=function(e){return e&&e.istate&&e.istate.blocks?e.istate.blocks.sync_point():x}}function M(){}M.prototype={inflateInit(e){const t=this;return t.istate=new U,e||(e=15),t.istate.inflateInit(t,e)},inflate(e){const t=this;return t.istate?t.istate.inflate(t,e):x},inflateEnd(){const e=this;if(!e.istate)return x;const t=e.istate.inflateEnd(e);return e.istate=null,t},inflateSync(){const e=this;return e.istate?e.istate.inflateSync(e):x},inflateSetDictionary(e,t){const n=this;return n.istate?n.istate.inflateSetDictionary(n,e,t):x},read_byte(e){return this.next_in[e]},read_buf(e,t){return this.next_in.subarray(e,e+t)}};const W=4294967295,N=65535,L=67324752,q=134695760,B=q,H=33639248,V=101010256,K=101075792,Z=117853008,X=22,Y=21589,G=2048,$="/",J=new Date(2107,11,31),Q=new Date(1980,0,1),ee=void 0,te="undefined",ne="function";class re{constructor(e){return class extends TransformStream{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}let ie=2;try{typeof navigator!=te&&navigator.hardwareConcurrency&&(ie=navigator.hardwareConcurrency)}catch(e){}const oe={chunkSize:524288,maxWorkers:ie,terminateWorkerTimeout:5e3,useWebWorkers:!0,useCompressionStream:!0,workerScripts:ee,CompressionStreamNative:typeof CompressionStream!=te&&CompressionStream,DecompressionStreamNative:typeof DecompressionStream!=te&&DecompressionStream},ae=Object.assign({},oe);function se(){return ae}function le(e){return Math.max(e.chunkSize,64)}function ce(e){const{baseURL:t,chunkSize:n,maxWorkers:r,terminateWorkerTimeout:i,useCompressionStream:o,useWebWorkers:a,Deflate:s,Inflate:l,CompressionStream:c,DecompressionStream:d,workerScripts:u}=e;if(de("baseURL",t),de("chunkSize",n),de("maxWorkers",r),de("terminateWorkerTimeout",i),de("useCompressionStream",o),de("useWebWorkers",a),s&&(ae.CompressionStream=new re(s)),l&&(ae.DecompressionStream=new re(l)),de("CompressionStream",c),de("DecompressionStream",d),u!==ee){const{deflate:e,inflate:t}=u;if((e||t)&&(ae.workerScripts||(ae.workerScripts={})),e){if(!Array.isArray(e))throw new Error("workerScripts.deflate must be an array");ae.workerScripts.deflate=e}if(t){if(!Array.isArray(t))throw new Error("workerScripts.inflate must be an array");ae.workerScripts.inflate=t}}}function de(e,t){t!==ee&&(ae[e]=t)}const ue={application:{"andrew-inset":"ez",annodex:"anx","atom+xml":"atom","atomcat+xml":"atomcat","atomserv+xml":"atomsrv",bbolin:"lin","cu-seeme":"cu","davmount+xml":"davmount",dsptype:"tsp",ecmascript:["es","ecma"],futuresplash:"spl",hta:"hta","java-archive":"jar","java-serialized-object":"ser","java-vm":"class",m3g:"m3g","mac-binhex40":"hqx",mathematica:["nb","ma","mb"],msaccess:"mdb",msword:["doc","dot","wiz"],mxf:"mxf",oda:"oda",ogg:"ogx",pdf:"pdf","pgp-keys":"key","pgp-signature":["asc","sig"],"pics-rules":"prf",postscript:["ps","ai","eps","epsi","epsf","eps2","eps3"],rar:"rar","rdf+xml":"rdf","rss+xml":"rss",rtf:"rtf","xhtml+xml":["xhtml","xht"],xml:["xml","xsl","xsd","xpdl"],"xspf+xml":"xspf",zip:"zip","vnd.android.package-archive":"apk","vnd.cinderella":"cdy","vnd.google-earth.kml+xml":"kml","vnd.google-earth.kmz":"kmz","vnd.mozilla.xul+xml":"xul","vnd.ms-excel":["xls","xlb","xlt","xlm","xla","xlc","xlw"],"vnd.ms-pki.seccat":"cat","vnd.ms-pki.stl":"stl","vnd.ms-powerpoint":["ppt","pps","pot","ppa","pwz"],"vnd.oasis.opendocument.chart":"odc","vnd.oasis.opendocument.database":"odb","vnd.oasis.opendocument.formula":"odf","vnd.oasis.opendocument.graphics":"odg","vnd.oasis.opendocument.graphics-template":"otg","vnd.oasis.opendocument.image":"odi","vnd.oasis.opendocument.presentation":"odp","vnd.oasis.opendocument.presentation-template":"otp","vnd.oasis.opendocument.spreadsheet":"ods","vnd.oasis.opendocument.spreadsheet-template":"ots","vnd.oasis.opendocument.text":"odt","vnd.oasis.opendocument.text-master":["odm","otm"],"vnd.oasis.opendocument.text-template":"ott","vnd.oasis.opendocument.text-web":"oth","vnd.openxmlformats-officedocument.spreadsheetml.sheet":"xlsx","vnd.openxmlformats-officedocument.spreadsheetml.template":"xltx","vnd.openxmlformats-officedocument.presentationml.presentation":"pptx","vnd.openxmlformats-officedocument.presentationml.slideshow":"ppsx","vnd.openxmlformats-officedocument.presentationml.template":"potx","vnd.openxmlformats-officedocument.wordprocessingml.document":"docx","vnd.openxmlformats-officedocument.wordprocessingml.template":"dotx","vnd.smaf":"mmf","vnd.stardivision.calc":"sdc","vnd.stardivision.chart":"sds","vnd.stardivision.draw":"sda","vnd.stardivision.impress":"sdd","vnd.stardivision.math":["sdf","smf"],"vnd.stardivision.writer":["sdw","vor"],"vnd.stardivision.writer-global":"sgl","vnd.sun.xml.calc":"sxc","vnd.sun.xml.calc.template":"stc","vnd.sun.xml.draw":"sxd","vnd.sun.xml.draw.template":"std","vnd.sun.xml.impress":"sxi","vnd.sun.xml.impress.template":"sti","vnd.sun.xml.math":"sxm","vnd.sun.xml.writer":"sxw","vnd.sun.xml.writer.global":"sxg","vnd.sun.xml.writer.template":"stw","vnd.symbian.install":["sis","sisx"],"vnd.visio":["vsd","vst","vss","vsw","vsdx","vssx","vstx","vssm","vstm"],"vnd.wap.wbxml":"wbxml","vnd.wap.wmlc":"wmlc","vnd.wap.wmlscriptc":"wmlsc","vnd.wordperfect":"wpd","vnd.wordperfect5.1":"wp5","x-123":"wk","x-7z-compressed":"7z","x-abiword":"abw","x-apple-diskimage":"dmg","x-bcpio":"bcpio","x-bittorrent":"torrent","x-cbr":["cbr","cba","cbt","cb7"],"x-cbz":"cbz","x-cdf":["cdf","cda"],"x-cdlink":"vcd","x-chess-pgn":"pgn","x-cpio":"cpio","x-csh":"csh","x-director":["dir","dxr","cst","cct","cxt","w3d","fgd","swa"],"x-dms":"dms","x-doom":"wad","x-dvi":"dvi","x-httpd-eruby":"rhtml","x-font":"pcf.Z","x-freemind":"mm","x-gnumeric":"gnumeric","x-go-sgf":"sgf","x-graphing-calculator":"gcf","x-gtar":["gtar","taz"],"x-hdf":"hdf","x-httpd-php":["phtml","pht","php"],"x-httpd-php-source":"phps","x-httpd-php3":"php3","x-httpd-php3-preprocessed":"php3p","x-httpd-php4":"php4","x-httpd-php5":"php5","x-ica":"ica","x-info":"info","x-internet-signup":["ins","isp"],"x-iphone":"iii","x-iso9660-image":"iso","x-java-jnlp-file":"jnlp","x-jmol":"jmz","x-killustrator":"kil","x-latex":"latex","x-lyx":"lyx","x-lzx":"lzx","x-maker":["frm","fb","fbdoc"],"x-ms-wmd":"wmd","x-msdos-program":["com","exe","bat","dll"],"x-netcdf":["nc"],"x-ns-proxy-autoconfig":["pac","dat"],"x-nwc":"nwc","x-object":"o","x-oz-application":"oza","x-pkcs7-certreqresp":"p7r","x-python-code":["pyc","pyo"],"x-qgis":["qgs","shp","shx"],"x-quicktimeplayer":"qtl","x-redhat-package-manager":["rpm","rpa"],"x-ruby":"rb","x-sh":"sh","x-shar":"shar","x-shockwave-flash":["swf","swfl"],"x-silverlight":"scr","x-stuffit":"sit","x-sv4cpio":"sv4cpio","x-sv4crc":"sv4crc","x-tar":"tar","x-tex-gf":"gf","x-tex-pk":"pk","x-texinfo":["texinfo","texi"],"x-trash":["~","%","bak","old","sik"],"x-ustar":"ustar","x-wais-source":"src","x-wingz":"wz","x-x509-ca-cert":["crt","der","cer"],"x-xcf":"xcf","x-xfig":"fig","x-xpinstall":"xpi",applixware:"aw","atomsvc+xml":"atomsvc","ccxml+xml":"ccxml","cdmi-capability":"cdmia","cdmi-container":"cdmic","cdmi-domain":"cdmid","cdmi-object":"cdmio","cdmi-queue":"cdmiq","docbook+xml":"dbk","dssc+der":"dssc","dssc+xml":"xdssc","emma+xml":"emma","epub+zip":"epub",exi:"exi","font-tdpfr":"pfr","gml+xml":"gml","gpx+xml":"gpx",gxf:"gxf",hyperstudio:"stk","inkml+xml":["ink","inkml"],ipfix:"ipfix","jsonml+json":"jsonml","lost+xml":"lostxml","mads+xml":"mads",marc:"mrc","marcxml+xml":"mrcx","mathml+xml":["mathml","mml"],mbox:"mbox","mediaservercontrol+xml":"mscml","metalink+xml":"metalink","metalink4+xml":"meta4","mets+xml":"mets","mods+xml":"mods",mp21:["m21","mp21"],mp4:"mp4s","oebps-package+xml":"opf","omdoc+xml":"omdoc",onenote:["onetoc","onetoc2","onetmp","onepkg"],oxps:"oxps","patch-ops-error+xml":"xer","pgp-encrypted":"pgp",pkcs10:"p10","pkcs7-mime":["p7m","p7c"],"pkcs7-signature":"p7s",pkcs8:"p8","pkix-attr-cert":"ac","pkix-crl":"crl","pkix-pkipath":"pkipath",pkixcmp:"pki","pls+xml":"pls","prs.cww":"cww","pskc+xml":"pskcxml","reginfo+xml":"rif","relax-ng-compact-syntax":"rnc","resource-lists+xml":"rl","resource-lists-diff+xml":"rld","rls-services+xml":"rs","rpki-ghostbusters":"gbr","rpki-manifest":"mft","rpki-roa":"roa","rsd+xml":"rsd","sbml+xml":"sbml","scvp-cv-request":"scq","scvp-cv-response":"scs","scvp-vp-request":"spq","scvp-vp-response":"spp",sdp:"sdp","set-payment-initiation":"setpay","set-registration-initiation":"setreg","shf+xml":"shf","sparql-query":"rq","sparql-results+xml":"srx",srgs:"gram","srgs+xml":"grxml","sru+xml":"sru","ssdl+xml":"ssdl","ssml+xml":"ssml","tei+xml":["tei","teicorpus"],"thraud+xml":"tfi","timestamped-data":"tsd","vnd.3gpp.pic-bw-large":"plb","vnd.3gpp.pic-bw-small":"psb","vnd.3gpp.pic-bw-var":"pvb","vnd.3gpp2.tcap":"tcap","vnd.3m.post-it-notes":"pwn","vnd.accpac.simply.aso":"aso","vnd.accpac.simply.imp":"imp","vnd.acucobol":"acu","vnd.acucorp":["atc","acutc"],"vnd.adobe.air-application-installer-package+zip":"air","vnd.adobe.formscentral.fcdt":"fcdt","vnd.adobe.fxp":["fxp","fxpl"],"vnd.adobe.xdp+xml":"xdp","vnd.adobe.xfdf":"xfdf","vnd.ahead.space":"ahead","vnd.airzip.filesecure.azf":"azf","vnd.airzip.filesecure.azs":"azs","vnd.amazon.ebook":"azw","vnd.americandynamics.acc":"acc","vnd.amiga.ami":"ami","vnd.anser-web-certificate-issue-initiation":"cii","vnd.anser-web-funds-transfer-initiation":"fti","vnd.antix.game-component":"atx","vnd.apple.installer+xml":"mpkg","vnd.apple.mpegurl":"m3u8","vnd.aristanetworks.swi":"swi","vnd.astraea-software.iota":"iota","vnd.audiograph":"aep","vnd.blueice.multipass":"mpm","vnd.bmi":"bmi","vnd.businessobjects":"rep","vnd.chemdraw+xml":"cdxml","vnd.chipnuts.karaoke-mmd":"mmd","vnd.claymore":"cla","vnd.cloanto.rp9":"rp9","vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"vnd.cluetrust.cartomobile-config":"c11amc","vnd.cluetrust.cartomobile-config-pkg":"c11amz","vnd.commonspace":"csp","vnd.contact.cmsg":"cdbcmsg","vnd.cosmocaller":"cmc","vnd.crick.clicker":"clkx","vnd.crick.clicker.keyboard":"clkk","vnd.crick.clicker.palette":"clkp","vnd.crick.clicker.template":"clkt","vnd.crick.clicker.wordbank":"clkw","vnd.criticaltools.wbs+xml":"wbs","vnd.ctc-posml":"pml","vnd.cups-ppd":"ppd","vnd.curl.car":"car","vnd.curl.pcurl":"pcurl","vnd.dart":"dart","vnd.data-vision.rdz":"rdz","vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"vnd.dece.ttml+xml":["uvt","uvvt"],"vnd.dece.unspecified":["uvx","uvvx"],"vnd.dece.zip":["uvz","uvvz"],"vnd.denovo.fcselayout-link":"fe_launch","vnd.dna":"dna","vnd.dolby.mlp":"mlp","vnd.dpgraph":"dpg","vnd.dreamfactory":"dfac","vnd.ds-keypoint":"kpxx","vnd.dvb.ait":"ait","vnd.dvb.service":"svc","vnd.dynageo":"geo","vnd.ecowin.chart":"mag","vnd.enliven":"nml","vnd.epson.esf":"esf","vnd.epson.msf":"msf","vnd.epson.quickanime":"qam","vnd.epson.salt":"slt","vnd.epson.ssf":"ssf","vnd.eszigno3+xml":["es3","et3"],"vnd.ezpix-album":"ez2","vnd.ezpix-package":"ez3","vnd.fdf":"fdf","vnd.fdsn.mseed":"mseed","vnd.fdsn.seed":["seed","dataless"],"vnd.flographit":"gph","vnd.fluxtime.clip":"ftc","vnd.framemaker":["fm","frame","maker","book"],"vnd.frogans.fnc":"fnc","vnd.frogans.ltf":"ltf","vnd.fsc.weblaunch":"fsc","vnd.fujitsu.oasys":"oas","vnd.fujitsu.oasys2":"oa2","vnd.fujitsu.oasys3":"oa3","vnd.fujitsu.oasysgp":"fg5","vnd.fujitsu.oasysprs":"bh2","vnd.fujixerox.ddd":"ddd","vnd.fujixerox.docuworks":"xdw","vnd.fujixerox.docuworks.binder":"xbd","vnd.fuzzysheet":"fzs","vnd.genomatix.tuxedo":"txd","vnd.geogebra.file":"ggb","vnd.geogebra.tool":"ggt","vnd.geometry-explorer":["gex","gre"],"vnd.geonext":"gxt","vnd.geoplan":"g2w","vnd.geospace":"g3w","vnd.gmx":"gmx","vnd.grafeq":["gqf","gqs"],"vnd.groove-account":"gac","vnd.groove-help":"ghf","vnd.groove-identity-message":"gim","vnd.groove-injector":"grv","vnd.groove-tool-message":"gtm","vnd.groove-tool-template":"tpl","vnd.groove-vcard":"vcg","vnd.hal+xml":"hal","vnd.handheld-entertainment+xml":"zmm","vnd.hbci":"hbci","vnd.hhe.lesson-player":"les","vnd.hp-hpgl":"hpgl","vnd.hp-hpid":"hpid","vnd.hp-hps":"hps","vnd.hp-jlyt":"jlt","vnd.hp-pcl":"pcl","vnd.hp-pclxl":"pclxl","vnd.hydrostatix.sof-data":"sfd-hdstx","vnd.ibm.minipay":"mpy","vnd.ibm.modcap":["afp","listafp","list3820"],"vnd.ibm.rights-management":"irm","vnd.ibm.secure-container":"sc","vnd.iccprofile":["icc","icm"],"vnd.igloader":"igl","vnd.immervision-ivp":"ivp","vnd.immervision-ivu":"ivu","vnd.insors.igm":"igm","vnd.intercon.formnet":["xpw","xpx"],"vnd.intergeo":"i2g","vnd.intu.qbo":"qbo","vnd.intu.qfx":"qfx","vnd.ipunplugged.rcprofile":"rcprofile","vnd.irepository.package+xml":"irp","vnd.is-xpr":"xpr","vnd.isac.fcs":"fcs","vnd.jam":"jam","vnd.jcp.javame.midlet-rms":"rms","vnd.jisp":"jisp","vnd.joost.joda-archive":"joda","vnd.kahootz":["ktz","ktr"],"vnd.kde.karbon":"karbon","vnd.kde.kchart":"chrt","vnd.kde.kformula":"kfo","vnd.kde.kivio":"flw","vnd.kde.kontour":"kon","vnd.kde.kpresenter":["kpr","kpt"],"vnd.kde.kspread":"ksp","vnd.kde.kword":["kwd","kwt"],"vnd.kenameaapp":"htke","vnd.kidspiration":"kia","vnd.kinar":["kne","knp"],"vnd.koan":["skp","skd","skt","skm"],"vnd.kodak-descriptor":"sse","vnd.las.las+xml":"lasxml","vnd.llamagraphics.life-balance.desktop":"lbd","vnd.llamagraphics.life-balance.exchange+xml":"lbe","vnd.lotus-1-2-3":"123","vnd.lotus-approach":"apr","vnd.lotus-freelance":"pre","vnd.lotus-notes":"nsf","vnd.lotus-organizer":"org","vnd.lotus-screencam":"scm","vnd.lotus-wordpro":"lwp","vnd.macports.portpkg":"portpkg","vnd.mcd":"mcd","vnd.medcalcdata":"mc1","vnd.mediastation.cdkey":"cdkey","vnd.mfer":"mwf","vnd.mfmp":"mfm","vnd.micrografx.flo":"flo","vnd.micrografx.igx":"igx","vnd.mif":"mif","vnd.mobius.daf":"daf","vnd.mobius.dis":"dis","vnd.mobius.mbk":"mbk","vnd.mobius.mqy":"mqy","vnd.mobius.msl":"msl","vnd.mobius.plc":"plc","vnd.mobius.txf":"txf","vnd.mophun.application":"mpn","vnd.mophun.certificate":"mpc","vnd.ms-artgalry":"cil","vnd.ms-cab-compressed":"cab","vnd.ms-excel.addin.macroenabled.12":"xlam","vnd.ms-excel.sheet.binary.macroenabled.12":"xlsb","vnd.ms-excel.sheet.macroenabled.12":"xlsm","vnd.ms-excel.template.macroenabled.12":"xltm","vnd.ms-fontobject":"eot","vnd.ms-htmlhelp":"chm","vnd.ms-ims":"ims","vnd.ms-lrm":"lrm","vnd.ms-officetheme":"thmx","vnd.ms-powerpoint.addin.macroenabled.12":"ppam","vnd.ms-powerpoint.presentation.macroenabled.12":"pptm","vnd.ms-powerpoint.slide.macroenabled.12":"sldm","vnd.ms-powerpoint.slideshow.macroenabled.12":"ppsm","vnd.ms-powerpoint.template.macroenabled.12":"potm","vnd.ms-project":["mpp","mpt"],"vnd.ms-word.document.macroenabled.12":"docm","vnd.ms-word.template.macroenabled.12":"dotm","vnd.ms-works":["wps","wks","wcm","wdb"],"vnd.ms-wpl":"wpl","vnd.ms-xpsdocument":"xps","vnd.mseq":"mseq","vnd.musician":"mus","vnd.muvee.style":"msty","vnd.mynfc":"taglet","vnd.neurolanguage.nlu":"nlu","vnd.nitf":["ntf","nitf"],"vnd.noblenet-directory":"nnd","vnd.noblenet-sealer":"nns","vnd.noblenet-web":"nnw","vnd.nokia.n-gage.data":"ngdat","vnd.nokia.n-gage.symbian.install":"n-gage","vnd.nokia.radio-preset":"rpst","vnd.nokia.radio-presets":"rpss","vnd.novadigm.edm":"edm","vnd.novadigm.edx":"edx","vnd.novadigm.ext":"ext","vnd.oasis.opendocument.chart-template":"otc","vnd.oasis.opendocument.formula-template":"odft","vnd.oasis.opendocument.image-template":"oti","vnd.olpc-sugar":"xo","vnd.oma.dd2+xml":"dd2","vnd.openofficeorg.extension":"oxt","vnd.openxmlformats-officedocument.presentationml.slide":"sldx","vnd.osgeo.mapguide.package":"mgp","vnd.osgi.dp":"dp","vnd.osgi.subsystem":"esa","vnd.palm":["pdb","pqa","oprc"],"vnd.pawaafile":"paw","vnd.pg.format":"str","vnd.pg.osasli":"ei6","vnd.picsel":"efif","vnd.pmi.widget":"wg","vnd.pocketlearn":"plf","vnd.powerbuilder6":"pbd","vnd.previewsystems.box":"box","vnd.proteus.magazine":"mgz","vnd.publishare-delta-tree":"qps","vnd.pvi.ptid1":"ptid","vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"vnd.realvnc.bed":"bed","vnd.recordare.musicxml":"mxl","vnd.recordare.musicxml+xml":"musicxml","vnd.rig.cryptonote":"cryptonote","vnd.rn-realmedia":"rm","vnd.rn-realmedia-vbr":"rmvb","vnd.route66.link66+xml":"link66","vnd.sailingtracker.track":"st","vnd.seemail":"see","vnd.sema":"sema","vnd.semd":"semd","vnd.semf":"semf","vnd.shana.informed.formdata":"ifm","vnd.shana.informed.formtemplate":"itp","vnd.shana.informed.interchange":"iif","vnd.shana.informed.package":"ipk","vnd.simtech-mindmapper":["twd","twds"],"vnd.smart.teacher":"teacher","vnd.solent.sdkm+xml":["sdkm","sdkd"],"vnd.spotfire.dxp":"dxp","vnd.spotfire.sfs":"sfs","vnd.stepmania.package":"smzip","vnd.stepmania.stepchart":"sm","vnd.sus-calendar":["sus","susp"],"vnd.svd":"svd","vnd.syncml+xml":"xsm","vnd.syncml.dm+wbxml":"bdm","vnd.syncml.dm+xml":"xdm","vnd.tao.intent-module-archive":"tao","vnd.tcpdump.pcap":["pcap","cap","dmp"],"vnd.tmobile-livetv":"tmo","vnd.trid.tpt":"tpt","vnd.triscape.mxs":"mxs","vnd.trueapp":"tra","vnd.ufdl":["ufd","ufdl"],"vnd.uiq.theme":"utz","vnd.umajin":"umj","vnd.unity":"unityweb","vnd.uoml+xml":"uoml","vnd.vcx":"vcx","vnd.visionary":"vis","vnd.vsf":"vsf","vnd.webturbo":"wtb","vnd.wolfram.player":"nbp","vnd.wqd":"wqd","vnd.wt.stf":"stf","vnd.xara":"xar","vnd.xfdl":"xfdl","vnd.yamaha.hv-dic":"hvd","vnd.yamaha.hv-script":"hvs","vnd.yamaha.hv-voice":"hvp","vnd.yamaha.openscoreformat":"osf","vnd.yamaha.openscoreformat.osfpvg+xml":"osfpvg","vnd.yamaha.smaf-audio":"saf","vnd.yamaha.smaf-phrase":"spf","vnd.yellowriver-custom-menu":"cmp","vnd.zul":["zir","zirz"],"vnd.zzazz.deck+xml":"zaz","voicexml+xml":"vxml",widget:"wgt",winhlp:"hlp","wsdl+xml":"wsdl","wspolicy+xml":"wspolicy","x-ace-compressed":"ace","x-authorware-bin":["aab","x32","u32","vox"],"x-authorware-map":"aam","x-authorware-seg":"aas","x-blorb":["blb","blorb"],"x-bzip":"bz","x-bzip2":["bz2","boz"],"x-cfs-compressed":"cfs","x-chat":"chat","x-conference":"nsc","x-dgc-compressed":"dgc","x-dtbncx+xml":"ncx","x-dtbook+xml":"dtb","x-dtbresource+xml":"res","x-eva":"eva","x-font-bdf":"bdf","x-font-ghostscript":"gsf","x-font-linux-psf":"psf","x-font-pcf":"pcf","x-font-snf":"snf","x-font-ttf":["ttf","ttc"],"x-font-type1":["pfa","pfb","pfm","afm"],"x-freearc":"arc","x-gca-compressed":"gca","x-glulx":"ulx","x-gramps-xml":"gramps","x-install-instructions":"install","x-lzh-compressed":["lzh","lha"],"x-mie":"mie","x-mobipocket-ebook":["prc","mobi"],"x-ms-application":"application","x-ms-shortcut":"lnk","x-ms-xbap":"xbap","x-msbinder":"obd","x-mscardfile":"crd","x-msclip":"clp","application/x-ms-installer":"msi","x-msmediaview":["mvb","m13","m14"],"x-msmetafile":["wmf","wmz","emf","emz"],"x-msmoney":"mny","x-mspublisher":"pub","x-msschedule":"scd","x-msterminal":"trm","x-mswrite":"wri","x-nzb":"nzb","x-pkcs12":["p12","pfx"],"x-pkcs7-certificates":["p7b","spc"],"x-research-info-systems":"ris","x-silverlight-app":"xap","x-sql":"sql","x-stuffitx":"sitx","x-subrip":"srt","x-t3vm-image":"t3","x-tex-tfm":"tfm","x-tgif":"obj","x-xliff+xml":"xlf","x-xz":"xz","x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"xaml+xml":"xaml","xcap-diff+xml":"xdf","xenc+xml":"xenc","xml-dtd":"dtd","xop+xml":"xop","xproc+xml":"xpl","xslt+xml":"xslt","xv+xml":["mxml","xhvml","xvml","xvm"],yang:"yang","yin+xml":"yin",envoy:"evy",fractals:"fif","internet-property-stream":"acx",olescript:"axs","vnd.ms-outlook":"msg","vnd.ms-pkicertstore":"sst","x-compress":"z","x-perfmon":["pma","pmc","pmr","pmw"],"ynd.ms-pkipko":"pko",gzip:["gz","tgz"],"smil+xml":["smi","smil"],"vnd.debian.binary-package":["deb","udeb"],"vnd.hzn-3d-crossword":"x3d","vnd.sqlite3":["db","sqlite","sqlite3","db-wal","sqlite-wal","db-shm","sqlite-shm"],"vnd.wap.sic":"sic","vnd.wap.slc":"slc","x-krita":["kra","krz"],"x-perl":["pm","pl"],yaml:["yaml","yml"]},audio:{amr:"amr","amr-wb":"awb",annodex:"axa",basic:["au","snd"],flac:"flac",midi:["mid","midi","kar","rmi"],mpeg:["mpga","mpega","mp3","m4a","mp2a","m2a","m3a"],mpegurl:"m3u",ogg:["oga","ogg","spx"],"prs.sid":"sid","x-aiff":"aifc","x-gsm":"gsm","x-ms-wma":"wma","x-ms-wax":"wax","x-pn-realaudio":"ram","x-realaudio":"ra","x-sd2":"sd2",adpcm:"adp",mp4:"mp4a",s3m:"s3m",silk:"sil","vnd.dece.audio":["uva","uvva"],"vnd.digital-winds":"eol","vnd.dra":"dra","vnd.dts":"dts","vnd.dts.hd":"dtshd","vnd.lucent.voice":"lvp","vnd.ms-playready.media.pya":"pya","vnd.nuera.ecelp4800":"ecelp4800","vnd.nuera.ecelp7470":"ecelp7470","vnd.nuera.ecelp9600":"ecelp9600","vnd.rip":"rip",webm:"weba","x-caf":"caf","x-matroska":"mka","x-pn-realaudio-plugin":"rmp",xm:"xm",aac:"aac",aiff:["aiff","aif","aff"],opus:"opus",wav:"wav"},chemical:{"x-alchemy":"alc","x-cache":["cac","cache"],"x-cache-csf":"csf","x-cactvs-binary":["cbin","cascii","ctab"],"x-cdx":"cdx","x-chem3d":"c3d","x-cif":"cif","x-cmdf":"cmdf","x-cml":"cml","x-compass":"cpa","x-crossfire":"bsd","x-csml":["csml","csm"],"x-ctx":"ctx","x-cxf":["cxf","cef"],"x-embl-dl-nucleotide":["emb","embl"],"x-gamess-input":["inp","gam","gamin"],"x-gaussian-checkpoint":["fch","fchk"],"x-gaussian-cube":"cub","x-gaussian-input":["gau","gjc","gjf"],"x-gaussian-log":"gal","x-gcg8-sequence":"gcg","x-genbank":"gen","x-hin":"hin","x-isostar":["istr","ist"],"x-jcamp-dx":["jdx","dx"],"x-kinemage":"kin","x-macmolecule":"mcm","x-macromodel-input":"mmod","x-mdl-molfile":"mol","x-mdl-rdfile":"rd","x-mdl-rxnfile":"rxn","x-mdl-sdfile":"sd","x-mdl-tgf":"tgf","x-mmcif":"mcif","x-mol2":"mol2","x-molconn-Z":"b","x-mopac-graph":"gpt","x-mopac-input":["mop","mopcrt","zmt"],"x-mopac-out":"moo","x-ncbi-asn1":"asn","x-ncbi-asn1-ascii":["prt","ent"],"x-ncbi-asn1-binary":"val","x-rosdal":"ros","x-swissprot":"sw","x-vamas-iso14976":"vms","x-vmd":"vmd","x-xtel":"xtel","x-xyz":"xyz"},font:{otf:"otf",woff:"woff",woff2:"woff2"},image:{gif:"gif",ief:"ief",jpeg:["jpeg","jpg","jpe","jfif","jfif-tbnl","jif"],pcx:"pcx",png:"png","svg+xml":["svg","svgz"],tiff:["tiff","tif"],"vnd.djvu":["djvu","djv"],"vnd.wap.wbmp":"wbmp","x-canon-cr2":"cr2","x-canon-crw":"crw","x-cmu-raster":"ras","x-coreldraw":"cdr","x-coreldrawpattern":"pat","x-coreldrawtemplate":"cdt","x-corelphotopaint":"cpt","x-epson-erf":"erf","x-icon":"ico","x-jg":"art","x-jng":"jng","x-nikon-nef":"nef","x-olympus-orf":"orf","x-portable-anymap":"pnm","x-portable-bitmap":"pbm","x-portable-graymap":"pgm","x-portable-pixmap":"ppm","x-rgb":"rgb","x-xbitmap":"xbm","x-xpixmap":"xpm","x-xwindowdump":"xwd",bmp:"bmp",cgm:"cgm",g3fax:"g3",ktx:"ktx","prs.btif":"btif",sgi:"sgi","vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"vnd.dwg":"dwg","vnd.dxf":"dxf","vnd.fastbidsheet":"fbs","vnd.fpx":"fpx","vnd.fst":"fst","vnd.fujixerox.edmics-mmr":"mmr","vnd.fujixerox.edmics-rlc":"rlc","vnd.ms-modi":"mdi","vnd.ms-photo":"wdp","vnd.net-fpx":"npx","vnd.xiff":"xif",webp:"webp","x-3ds":"3ds","x-cmx":"cmx","x-freehand":["fh","fhc","fh4","fh5","fh7"],"x-pict":["pic","pct"],"x-tga":"tga","cis-cod":"cod",avif:"avifs",heic:["heif","heic"],pjpeg:["pjpg"],"vnd.adobe.photoshop":"psd","x-adobe-dng":"dng","x-fuji-raf":"raf","x-icns":"icns","x-kodak-dcr":"dcr","x-kodak-k25":"k25","x-kodak-kdc":"kdc","x-minolta-mrw":"mrw","x-panasonic-raw":["raw","rw2","rwl"],"x-pentax-pef":["pef","ptx"],"x-sigma-x3f":"x3f","x-sony-arw":"arw","x-sony-sr2":"sr2","x-sony-srf":"srf"},message:{rfc822:["eml","mime","mht","mhtml","nws"]},model:{iges:["igs","iges"],mesh:["msh","mesh","silo"],vrml:["wrl","vrml"],"x3d+vrml":["x3dv","x3dvz"],"x3d+xml":"x3dz","x3d+binary":["x3db","x3dbz"],"vnd.collada+xml":"dae","vnd.dwf":"dwf","vnd.gdl":"gdl","vnd.gtw":"gtw","vnd.mts":"mts","vnd.usdz+zip":"usdz","vnd.vtu":"vtu"},text:{"cache-manifest":["manifest","appcache"],calendar:["ics","icz","ifb"],css:"css",csv:"csv",h323:"323",html:["html","htm","shtml","stm"],iuls:"uls",plain:["txt","text","brf","conf","def","list","log","in","bas","diff","ksh"],richtext:"rtx",scriptlet:["sct","wsc"],texmacs:"tm","tab-separated-values":"tsv","vnd.sun.j2me.app-descriptor":"jad","vnd.wap.wml":"wml","vnd.wap.wmlscript":"wmls","x-bibtex":"bib","x-boo":"boo","x-c++hdr":["h++","hpp","hxx","hh"],"x-c++src":["c++","cpp","cxx","cc"],"x-component":"htc","x-dsrc":"d","x-diff":"patch","x-haskell":"hs","x-java":"java","x-literate-haskell":"lhs","x-moc":"moc","x-pascal":["p","pas","pp","inc"],"x-pcs-gcd":"gcd","x-python":"py","x-scala":"scala","x-setext":"etx","x-tcl":["tcl","tk"],"x-tex":["tex","ltx","sty","cls"],"x-vcalendar":"vcs","x-vcard":"vcf",n3:"n3","prs.lines.tag":"dsc",sgml:["sgml","sgm"],troff:["t","tr","roff","man","me","ms"],turtle:"ttl","uri-list":["uri","uris","urls"],vcard:"vcard","vnd.curl":"curl","vnd.curl.dcurl":"dcurl","vnd.curl.scurl":"scurl","vnd.curl.mcurl":"mcurl","vnd.dvb.subtitle":"sub","vnd.fly":"fly","vnd.fmi.flexstor":"flx","vnd.graphviz":"gv","vnd.in3d.3dml":"3dml","vnd.in3d.spot":"spot","x-asm":["s","asm"],"x-c":["c","h","dic"],"x-fortran":["f","for","f77","f90"],"x-opml":"opml","x-nfo":"nfo","x-sfv":"sfv","x-uuencode":"uu",webviewhtml:"htt",javascript:"js",json:"json",markdown:["md","markdown","mdown","markdn"],"vnd.wap.si":"si","vnd.wap.sl":"sl"},video:{avif:"avif","3gpp":"3gp",annodex:"axv",dl:"dl",dv:["dif","dv"],fli:"fli",gl:"gl",mpeg:["mpeg","mpg","mpe","m1v","m2v","mp2","mpa","mpv2"],mp4:["mp4","mp4v","mpg4"],quicktime:["qt","mov"],ogg:"ogv","vnd.mpegurl":["mxu","m4u"],"x-flv":"flv","x-la-asf":["lsf","lsx"],"x-mng":"mng","x-ms-asf":["asf","asx","asr"],"x-ms-wm":"wm","x-ms-wmv":"wmv","x-ms-wmx":"wmx","x-ms-wvx":"wvx","x-msvideo":"avi","x-sgi-movie":"movie","x-matroska":["mpv","mkv","mk3d","mks"],"3gpp2":"3g2",h261:"h261",h263:"h263",h264:"h264",jpeg:"jpgv",jpm:["jpm","jpgm"],mj2:["mj2","mjp2"],"vnd.dece.hd":["uvh","uvvh"],"vnd.dece.mobile":["uvm","uvvm"],"vnd.dece.pd":["uvp","uvvp"],"vnd.dece.sd":["uvs","uvvs"],"vnd.dece.video":["uvv","uvvv"],"vnd.dvb.file":"dvb","vnd.fvt":"fvt","vnd.ms-playready.media.pyv":"pyv","vnd.uvvu.mp4":["uvu","uvvu"],"vnd.vivo":"viv",webm:"webm","x-f4v":"f4v","x-m4v":"m4v","x-ms-vob":"vob","x-smv":"smv",mp2t:"ts"},"x-conference":{"x-cooltalk":"ice"},"x-world":{"x-vrml":["vrm","flr","wrz","xaf","xof"]}},fe=(()=>{const e={};for(const t of Object.keys(ue))for(const n of Object.keys(ue[t])){const r=ue[t][n];if("string"==typeof r)e[r]=t+"/"+n;else for(let i=0;i<r.length;i++)e[r[i]]=t+"/"+n}return e})(),pe=[];for(let e=0;e<256;e++){let t=e;for(let e=0;e<8;e++)1&t?t=t>>>1^3988292384:t>>>=1;pe[e]=t}class he{constructor(e){this.crc=e||-1}append(e){let t=0|this.crc;for(let n=0,r=0|e.length;n<r;n++)t=t>>>8^pe[255&(t^e[n])];this.crc=t}get(){return~this.crc}}class me extends TransformStream{constructor(){let e;const t=new he;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new Uint8Array(4);new DataView(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}function ge(e){if(typeof TextEncoder==te){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new TextEncoder).encode(e)}const ye={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=ye.getPartial(n);return 32===r?e.concat(t):ye._shiftRight(t,r,0|n,e.slice(0,e.length-1))},bitLength(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+ye.getPartial(n)},clamp(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,Math.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=ye.partial(t,e[n-1]&2147483648>>t-1,1)),e},partial:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,getPartial:e=>Math.round(e/1099511627776)||32,_shiftRight(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let i=0;i<e.length;i++)r.push(n|e[i]>>>t),n=e[i]<<32-t;const i=e.length?e[e.length-1]:0,o=ye.getPartial(i);return r.push(ye.partial(t+o&31,t+o>32?n:r.pop(),1)),r}},we={bytes:{fromBits(e){const t=ye.bitLength(e)/8,n=new Uint8Array(t);let r;for(let i=0;i<t;i++)3&i||(r=e[i/4]),n[i]=r>>>24,r<<=8;return n},toBits(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3&~n||(t.push(r),r=0);return 3&n&&t.push(ye.partial(8*(3&n),r)),t}}},ve=class{constructor(e){const t=this;t.blockSize=512,t._init=[1732584193,4023233417,2562383102,271733878,3285377520],t._key=[1518500249,1859775393,2400959708,3395469782],e?(t._h=e._h.slice(0),t._buffer=e._buffer.slice(0),t._length=e._length):t.reset()}reset(){const e=this;return e._h=e._init.slice(0),e._buffer=[],e._length=0,e}update(e){const t=this;"string"==typeof e&&(e=we.utf8String.toBits(e));const n=t._buffer=ye.concat(t._buffer,e),r=t._length,i=t._length=r+ye.bitLength(e);if(i>9007199254740991)throw new Error("Cannot hash more than 2^53 - 1 bits");const o=new Uint32Array(n);let a=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);e<=i;e+=t.blockSize)t._block(o.subarray(16*a,16*(a+1))),a+=1;return n.splice(0,16*a),t}finalize(){const e=this;let t=e._buffer;const n=e._h;t=ye.concat(t,[ye.partial(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(Math.floor(e._length/4294967296)),t.push(0|e._length);t.length;)e._block(t.splice(0,16));return e.reset(),n}_f(e,t,n,r){return e<=19?t&n|~t&r:e<=39?t^n^r:e<=59?t&n|t&r|n&r:e<=79?t^n^r:void 0}_S(e,t){return t<<e|t>>>32-e}_block(e){const t=this,n=t._h,r=Array(80);for(let t=0;t<16;t++)r[t]=e[t];let i=n[0],o=n[1],a=n[2],s=n[3],l=n[4];for(let e=0;e<=79;e++){e>=16&&(r[e]=t._S(1,r[e-3]^r[e-8]^r[e-14]^r[e-16]));const n=t._S(5,i)+t._f(e,o,a,s)+l+r[e]+t._key[Math.floor(e/20)]|0;l=s,s=a,a=t._S(30,o),o=i,i=n}n[0]=n[0]+i|0,n[1]=n[1]+o|0,n[2]=n[2]+a|0,n[3]=n[3]+s|0,n[4]=n[4]+l|0}},be=class{constructor(e){const t=this;t._tables=[[[],[],[],[],[]],[[],[],[],[],[]]],t._tables[0][0][0]||t._precompute();const n=t._tables[0][4],r=t._tables[1],i=e.length;let o,a,s,l=1;if(4!==i&&6!==i&&8!==i)throw new Error("invalid aes key size");for(t._key=[a=e.slice(0),s=[]],o=i;o<4*i+28;o++){let e=a[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^l<<24,l=l<<1^283*(l>>7))),a[o]=a[o-i]^e}for(let e=0;o;e++,o--){const t=a[3&e?o:o-4];s[e]=o<=4||e<4?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this._crypt(e,0)}decrypt(e){return this._crypt(e,1)}_precompute(){const e=this._tables[0],t=this._tables[1],n=e[4],r=t[4],i=[],o=[];let a,s,l,c;for(let e=0;e<256;e++)o[(i[e]=e<<1^283*(e>>7))^e]=e;for(let d=a=0;!n[d];d^=s||1,a=o[a]||1){let o=a^a<<1^a<<2^a<<3^a<<4;o=o>>8^255&o^99,n[d]=o,r[o]=d,c=i[l=i[s=i[d]]];let u=16843009*c^65537*l^257*s^16843008*d,f=257*i[o]^16843008*o;for(let n=0;n<4;n++)e[n][d]=f=f<<24^f>>>8,t[n][o]=u=u<<24^u>>>8}for(let n=0;n<5;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}_crypt(e,t){if(4!==e.length)throw new Error("invalid aes block size");const n=this._key[t],r=n.length/4-2,i=[0,0,0,0],o=this._tables[t],a=o[0],s=o[1],l=o[2],c=o[3],d=o[4];let u,f,p,h=e[0]^n[0],m=e[t?3:1]^n[1],g=e[2]^n[2],y=e[t?1:3]^n[3],w=4;for(let e=0;e<r;e++)u=a[h>>>24]^s[m>>16&255]^l[g>>8&255]^c[255&y]^n[w],f=a[m>>>24]^s[g>>16&255]^l[y>>8&255]^c[255&h]^n[w+1],p=a[g>>>24]^s[y>>16&255]^l[h>>8&255]^c[255&m]^n[w+2],y=a[y>>>24]^s[h>>16&255]^l[m>>8&255]^c[255&g]^n[w+3],w+=4,h=u,m=f,g=p;for(let e=0;e<4;e++)i[t?3&-e:e]=d[h>>>24]<<24^d[m>>16&255]<<16^d[g>>8&255]<<8^d[255&y]^n[w++],u=h,h=m,m=g,g=y,y=u;return i}},xe={getRandomValues(e){const t=new Uint32Array(e.buffer),n=e=>{let t=987654321;const n=4294967295;return function(){return t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(Math.random()>.5?1:-1)}};for(let r,i=0;i<e.length;i+=4){const e=n(4294967296*(r||Math.random()));r=987654071*e(),t[i/4]=4294967296*e()|0}return e}},_e=class{constructor(e,t){this._prf=e,this._initIv=t,this._iv=t}reset(){this._iv=this._initIv}update(e){return this.calculate(this._prf,e,this._iv)}incWord(e){if(255&~(e>>24))e+=1<<24;else{let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}return e}incCounter(e){0===(e[0]=this.incWord(e[0]))&&(e[1]=this.incWord(e[1]))}calculate(e,t,n){let r;if(!(r=t.length))return[];const i=ye.bitLength(t);for(let i=0;i<r;i+=4){this.incCounter(n);const r=e.encrypt(n);t[i]^=r[0],t[i+1]^=r[1],t[i+2]^=r[2],t[i+3]^=r[3]}return ye.clamp(t,i)}},Se={importKey:e=>new Se.hmacSha1(we.bytes.toBits(e)),pbkdf2(e,t,n,r){if(n=n||1e4,r<0||n<0)throw new Error("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,a,s,l,c;const d=new ArrayBuffer(i),u=new DataView(d);let f=0;const p=ye;for(t=we.bytes.toBits(t),c=1;f<(i||1);c++){for(o=a=e.encrypt(p.concat(t,[c])),s=1;s<n;s++)for(a=e.encrypt(a),l=0;l<a.length;l++)o[l]^=a[l];for(s=0;f<(i||1)&&s<o.length;s++)u.setInt32(f,o[s]),f+=4}return d.slice(0,r/8)},hmacSha1:class{constructor(e){const t=this,n=t._hash=ve,r=[[],[]];t._baseHash=[new n,new n];const i=t._baseHash[0].blockSize/32;e.length>i&&(e=(new n).update(e).finalize());for(let t=0;t<i;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t._baseHash[0].update(r[0]),t._baseHash[1].update(r[1]),t._resultHash=new n(t._baseHash[0])}reset(){const e=this;e._resultHash=new e._hash(e._baseHash[0]),e._updated=!1}update(e){this._updated=!0,this._resultHash.update(e)}digest(){const e=this,t=e._resultHash.finalize(),n=new e._hash(e._baseHash[1]).update(t).finalize();return e.reset(),n}encrypt(e){if(this._updated)throw new Error("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},ke=typeof crypto!=te&&typeof crypto.getRandomValues==ne,Ae="Invalid password",Ee="Invalid signature",De="zipjs-abort-check-password";function ze(e){return ke?crypto.getRandomValues(e):xe.getRandomValues(e)}const Ce=16,Oe={name:"PBKDF2"},je=Object.assign({hash:{name:"HMAC"}},Oe),Re=Object.assign({iterations:1e3,hash:{name:"SHA-1"}},Oe),Te=["deriveBits"],Ie=[8,12,16],Pe=[16,24,32],Fe=10,Ue=[0,0,0,0],Me=typeof crypto!=te,We=Me&&crypto.subtle,Ne=Me&&typeof We!=te,Le=we.bytes,qe=be,Be=_e,He=Se.hmacSha1;let Ve=Me&&Ne&&typeof We.importKey==ne,Ke=Me&&Ne&&typeof We.deriveBits==ne;class Ze extends TransformStream{constructor({password:e,rawPassword:t,signed:n,encryptionStrength:r,checkPasswordOnly:i}){super({start(){Object.assign(this,{ready:new Promise((e=>this.resolveReady=e)),password:$e(e,t),signed:n,strength:r-1,pending:new Uint8Array})},async transform(e,t){const n=this,{password:r,strength:o,resolveReady:a,ready:s}=n;r?(await async function(e,t,n,r){const i=await Ge(e,t,n,Qe(r,0,Ie[t])),o=Qe(r,Ie[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new Error(Ae)}(n,o,r,Qe(e,0,Ie[o]+2)),e=Qe(e,Ie[o]+2),i?t.error(new Error(De)):a()):await s;const l=new Uint8Array(e.length-Fe-(e.length-Fe)%Ce);t.enqueue(Ye(n,e,l,0,Fe,!0))},async flush(e){const{signed:t,ctr:n,hmac:r,pending:i,ready:o}=this;if(r&&n){await o;const a=Qe(i,0,i.length-Fe),s=Qe(i,i.length-Fe);let l=new Uint8Array;if(a.length){const e=tt(Le,a);r.update(e);const t=n.update(e);l=et(Le,t)}if(t){const e=Qe(et(Le,r.digest()),0,Fe);for(let t=0;t<Fe;t++)if(e[t]!=s[t])throw new Error(Ee)}e.enqueue(l)}}})}}class Xe extends TransformStream{constructor({password:e,rawPassword:t,encryptionStrength:n}){let r;super({start(){Object.assign(this,{ready:new Promise((e=>this.resolveReady=e)),password:$e(e,t),strength:n-1,pending:new Uint8Array})},async transform(e,t){const n=this,{password:r,strength:i,resolveReady:o,ready:a}=n;let s=new Uint8Array;r?(s=await async function(e,t,n){const r=ze(new Uint8Array(Ie[t]));return Je(r,await Ge(e,t,n,r))}(n,i,r),o()):await a;const l=new Uint8Array(s.length+e.length-e.length%Ce);l.set(s,0),t.enqueue(Ye(n,e,l,s.length,0))},async flush(e){const{ctr:t,hmac:n,pending:i,ready:o}=this;if(n&&t){await o;let a=new Uint8Array;if(i.length){const e=t.update(tt(Le,i));n.update(e),a=et(Le,e)}r.signature=et(Le,n.digest()).slice(0,Fe),e.enqueue(Je(a,r.signature))}}}),r=this}}function Ye(e,t,n,r,i,o){const{ctr:a,hmac:s,pending:l}=e,c=t.length-i;let d;for(l.length&&(t=Je(l,t),n=function(e,t){if(t&&t>e.length){const n=e;(e=new Uint8Array(t)).set(n,0)}return e}(n,c-c%Ce)),d=0;d<=c-Ce;d+=Ce){const e=tt(Le,Qe(t,d,d+Ce));o&&s.update(e);const i=a.update(e);o||s.update(i),n.set(et(Le,i),d+r)}return e.pending=Qe(t,d),n}async function Ge(e,t,n,r){e.password=null;const i=await async function(e,t,n,r,i){if(!Ve)return Se.importKey(t);try{return await We.importKey("raw",t,n,!1,i)}catch(e){return Ve=!1,Se.importKey(t)}}(0,n,je,0,Te),o=await async function(e,t,n){if(!Ke)return Se.pbkdf2(t,e.salt,Re.iterations,n);try{return await We.deriveBits(e,t,n)}catch(r){return Ke=!1,Se.pbkdf2(t,e.salt,Re.iterations,n)}}(Object.assign({salt:r},Re),i,8*(2*Pe[t]+2)),a=new Uint8Array(o),s=tt(Le,Qe(a,0,Pe[t])),l=tt(Le,Qe(a,Pe[t],2*Pe[t])),c=Qe(a,2*Pe[t]);return Object.assign(e,{keys:{key:s,authentication:l,passwordVerification:c},ctr:new Be(new qe(s),Array.from(Ue)),hmac:new He(l)}),c}function $e(e,t){return t===ee?ge(e):t}function Je(e,t){let n=e;return e.length+t.length&&(n=new Uint8Array(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function Qe(e,t,n){return e.subarray(t,n)}function et(e,t){return e.fromBits(t)}function tt(e,t){return e.toBits(t)}class nt extends TransformStream{constructor({password:e,passwordVerification:t,checkPasswordOnly:n}){super({start(){Object.assign(this,{password:e,passwordVerification:t}),at(this,e)},transform(e,t){const r=this;if(r.password){const t=it(r,e.subarray(0,12));if(r.password=null,t[11]!=r.passwordVerification)throw new Error(Ae);e=e.subarray(12)}n?t.error(new Error(De)):t.enqueue(it(r,e))}})}}class rt extends TransformStream{constructor({password:e,passwordVerification:t}){super({start(){Object.assign(this,{password:e,passwordVerification:t}),at(this,e)},transform(e,t){const n=this;let r,i;if(n.password){n.password=null;const t=ze(new Uint8Array(12));t[11]=n.passwordVerification,r=new Uint8Array(e.length+t.length),r.set(ot(n,t),0),i=12}else r=new Uint8Array(e.length),i=0;r.set(ot(n,e),i),t.enqueue(r)}})}}function it(e,t){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=lt(e)^t[r],st(e,n[r]);return n}function ot(e,t){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=lt(e)^t[r],st(e,t[r]);return n}function at(e,t){const n=[305419896,591751049,878082192];Object.assign(e,{keys:n,crcKey0:new he(n[0]),crcKey2:new he(n[2])});for(let n=0;n<t.length;n++)st(e,t.charCodeAt(n))}function st(e,t){let[n,r,i]=e.keys;e.crcKey0.append([t]),n=~e.crcKey0.get(),r=dt(Math.imul(dt(r+ct(n)),134775813)+1),e.crcKey2.append([r>>>24]),i=~e.crcKey2.get(),e.keys=[n,r,i]}function lt(e){const t=2|e.keys[2];return ct(Math.imul(t,1^t)>>>8)}function ct(e){return 255&e}function dt(e){return 4294967295&e}const ut="deflate-raw";class ft extends TransformStream{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:i,encrypted:o,useCompressionStream:a,zipCrypto:s,signed:l,level:c}=e,d=this;let u,f,p=ht(super.readable);o&&!s||!l||(u=new me,p=yt(p,u)),i&&(p=gt(p,a,{level:c,chunkSize:t},r,n)),o&&(s?p=yt(p,new rt(e)):(f=new Xe(e),p=yt(p,f))),mt(d,p,(()=>{let e;o&&!s&&(e=f.signature),o&&!s||!l||(e=new DataView(u.value.buffer).getUint32(0)),d.signature=e}))}}class pt extends TransformStream{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:a,signature:s,compressed:l,useCompressionStream:c}=e;let d,u,f=ht(super.readable);o&&(i?f=yt(f,new nt(e)):(u=new Ze(e),f=yt(f,u))),l&&(f=gt(f,c,{chunkSize:t},r,n)),o&&!i||!a||(d=new me,f=yt(f,d)),mt(this,f,(()=>{if((!o||i)&&a){const e=new DataView(d.value.buffer);if(s!=e.getUint32(0,!1))throw new Error(Ee)}}))}}function ht(e){return yt(e,new TransformStream({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function mt(e,t,n){t=yt(t,new TransformStream({flush:n})),Object.defineProperty(e,"readable",{get:()=>t})}function gt(e,t,n,r,i){try{e=yt(e,new(t&&r?r:i)(ut,n))}catch(r){if(!t)return e;try{e=yt(e,new i(ut,n))}catch(t){return e}}return e}function yt(e,t){return e.pipeThrough(t)}const wt="data",vt="close",bt="deflate",xt="inflate";class _t extends TransformStream{constructor(e,t){super({});const n=this,{codecType:r}=e;let i;r.startsWith(bt)?i=ft:r.startsWith(xt)&&(i=pt);let o=0,a=0;const s=new i(e,t),l=super.readable,c=new TransformStream({transform(e,t){e&&e.length&&(a+=e.length,t.enqueue(e))},flush(){Object.assign(n,{inputSize:a})}}),d=new TransformStream({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=s;Object.assign(n,{signature:e,outputSize:o,inputSize:a})}});Object.defineProperty(n,"readable",{get:()=>l.pipeThrough(c).pipeThrough(s).pipeThrough(d)})}}class St extends TransformStream{constructor(e){let t;super({transform:function n(r,i){if(t){const e=new Uint8Array(t.length+r.length);e.set(t),e.set(r,t.length),r=e,t=null}r.length>e?(i.enqueue(r.slice(0,e)),n(r.slice(e),i)):t=r},flush(e){t&&t.length&&e.enqueue(t)}})}}let kt=typeof Worker!=te;class At{constructor(e,{readable:t,writable:n},{options:r,config:i,streamOptions:o,useWebWorkers:a,transferStreams:s,scripts:l},c){const{signal:d}=o;return Object.assign(e,{busy:!0,readable:t.pipeThrough(new St(i.chunkSize)).pipeThrough(new Et(t,o),{signal:d}),writable:n,options:Object.assign({},r),scripts:l,transferStreams:s,terminate:()=>new Promise((t=>{const{worker:n,busy:r}=e;n?(r?e.resolveTerminated=t:(n.terminate(),t()),e.interface=null):t()})),onTaskFinished(){const{resolveTerminated:t}=e;t&&(e.resolveTerminated=null,e.terminated=!0,e.worker.terminate(),t()),e.busy=!1,c(e)}}),(a&&kt?Ct:zt)(e,i)}}class Et extends TransformStream{constructor(e,{onstart:t,onprogress:n,size:r,onend:i}){let o=0;super({async start(){t&&await Dt(t,r)},async transform(e,t){o+=e.length,n&&await Dt(n,o,r),t.enqueue(e)},async flush(){e.size=o,i&&await Dt(i,o)}})}}async function Dt(e,...t){try{await e(...t)}catch(e){}}function zt(e,t){return{run:()=>async function({options:e,readable:t,writable:n,onTaskFinished:r},i){try{const r=new _t(e,i);await t.pipeThrough(r).pipeTo(n,{preventClose:!0,preventAbort:!0});const{signature:o,inputSize:a,outputSize:s}=r;return{signature:o,inputSize:a,outputSize:s}}finally{r()}}(e,t)}}function Ct(e,t){const{baseURL:n,chunkSize:r}=t;if(!e.interface){let i;try{i=function(e,t,n){const r={type:"module"};let i,o;typeof e==ne&&(e=e());try{i=new URL(e,t)}catch(t){i=e}if(Ot)try{o=new Worker(i)}catch(e){Ot=!1,o=new Worker(i,r)}else o=new Worker(i,r);return o.addEventListener("message",(e=>async function({data:e},t){const{type:n,value:r,messageId:i,result:o,error:a}=e,{reader:s,writer:l,resolveResult:c,rejectResult:d,onTaskFinished:u}=t;try{if(a){const{message:e,stack:t,code:n,name:r}=a,i=new Error(e);Object.assign(i,{stack:t,code:n,name:r}),f(i)}else{if("pull"==n){const{value:e,done:n}=await s.read();Rt({type:wt,value:e,done:n,messageId:i},t)}n==wt&&(await l.ready,await l.write(new Uint8Array(r)),Rt({type:"ack",messageId:i},t)),n==vt&&f(null,o)}}catch(a){Rt({type:vt,messageId:i},t),f(a)}function f(e,t){e?d(e):c(t),l&&l.releaseLock(),u()}}(e,n))),o}(e.scripts[0],n,e)}catch(n){return kt=!1,zt(e,t)}Object.assign(e,{worker:i,interface:{run:()=>async function(e,t){let n,r;const i=new Promise(((e,t)=>{n=e,r=t}));Object.assign(e,{reader:null,writer:null,resolveResult:n,rejectResult:r,result:i});const{readable:o,options:a,scripts:s}=e,{writable:l,closed:c}=function(e){let t;const n=new Promise((e=>t=e));return{writable:new WritableStream({async write(t){const n=e.getWriter();await n.ready,await n.write(t),n.releaseLock()},close(){t()},abort:t=>e.getWriter().abort(t)}),closed:n}}(e.writable),d=Rt({type:"start",scripts:s.slice(1),options:a,config:t,readable:o,writable:l},e);d||Object.assign(e,{reader:o.getReader(),writer:l.getWriter()});const u=await i;return d||await l.getWriter().close(),await c,u}(e,{chunkSize:r})}})}return e.interface}let Ot=!0,jt=!0;function Rt(e,{worker:t,writer:n,onTaskFinished:r,transferStreams:i}){try{const{value:n,readable:r,writable:o}=e,a=[];if(n&&(n.byteLength<n.buffer.byteLength?e.value=n.buffer.slice(0,n.byteLength):e.value=n.buffer,a.push(e.value)),i&&jt?(r&&a.push(r),o&&a.push(o)):e.readable=e.writable=null,a.length)try{return t.postMessage(e,a),!0}catch(n){jt=!1,e.readable=e.writable=null,t.postMessage(e)}else t.postMessage(e)}catch(e){throw n&&n.releaseLock(),r(),e}}let Tt=[];const It=[];let Pt=0;async function Ft(e,t){const{options:n,config:r}=t,{transferStreams:i,useWebWorkers:o,useCompressionStream:a,codecType:s,compressed:l,signed:c,encrypted:d}=n,{workerScripts:u,maxWorkers:f}=r;t.transferStreams=i||i===ee;const p=!(l||c||d||t.transferStreams);return t.useWebWorkers=!p&&(o||o===ee&&r.useWebWorkers),t.scripts=t.useWebWorkers&&u?u[s]:[],n.useCompressionStream=a||a===ee&&r.useCompressionStream,(await async function(){const n=Tt.find((e=>!e.busy));if(n)return Ut(n),new At(n,e,t,h);if(Tt.length<f){const n={indexWorker:Pt};return Pt++,Tt.push(n),new At(n,e,t,h)}return new Promise((n=>It.push({resolve:n,stream:e,workerOptions:t})))}()).run();function h(e){if(It.length){const[{resolve:t,stream:n,workerOptions:r}]=It.splice(0,1);t(new At(e,n,r,h))}else e.worker?(Ut(e),function(e,t){const{config:n}=t,{terminateWorkerTimeout:r}=n;Number.isFinite(r)&&r>=0&&(e.terminated?e.terminated=!1:e.terminateTimeout=setTimeout((async()=>{Tt=Tt.filter((t=>t!=e));try{await e.terminate()}catch(e){}}),r))}(e,t)):Tt=Tt.filter((t=>t!=e))}}function Ut(e){const{terminateTimeout:t}=e;t&&(clearTimeout(t),e.terminateTimeout=null)}function Mt(e,t,n){return class{constructor(r){const i=this;var o,a;o=r,a="level",(typeof Object.hasOwn===ne?Object.hasOwn(o,a):o.hasOwnProperty(a))&&r.level===ee&&delete r.level,i.codec=new e(Object.assign({},t,r)),n(i.codec,(e=>{if(i.pendingData){const t=i.pendingData;i.pendingData=new Uint8Array(t.length+e.length);const{pendingData:n}=i;n.set(t,0),n.set(e,t.length)}else i.pendingData=new Uint8Array(e)}))}append(e){return this.codec.push(e),r(this)}flush(){return this.codec.push(new Uint8Array,!0),r(this)}};function r(e){if(e.pendingData){const t=e.pendingData;return e.pendingData=null,t}return new Uint8Array}}const Wt="HTTP error ",Nt="HTTP Range not supported",Lt="Writer iterator completed too soon",qt="Range",Bt="GET",Ht="bytes",Vt=65536,Kt="writable";class Zt{constructor(){this.size=0}init(){this.initialized=!0}}class Xt extends Zt{get readable(){const e=this,{chunkSize:t=Vt}=e,n=new ReadableStream({start(){this.chunkOffset=0},async pull(r){const{offset:i=0,size:o,diskNumberStart:a}=n,{chunkOffset:s}=this;r.enqueue(await kn(e,i+s,Math.min(t,o-s),a)),s+t>o?r.close():this.chunkOffset+=t}});return n}}class Yt extends Zt{constructor(){super();const e=this,t=new WritableStream({write:t=>e.writeUint8Array(t)});Object.defineProperty(e,Kt,{get:()=>t})}writeUint8Array(){}}class Gt extends Xt{constructor(e){super();let t=e.length;for(;"="==e.charAt(t-1);)t--;const n=e.indexOf(",")+1;Object.assign(this,{dataURI:e,dataStart:n,size:Math.floor(.75*(t-n))})}readUint8Array(e,t){const{dataStart:n,dataURI:r}=this,i=new Uint8Array(t),o=4*Math.floor(e/3),a=atob(r.substring(o+n,4*Math.ceil((e+t)/3)+n)),s=e-3*Math.floor(o/4);for(let e=s;e<s+t;e++)i[e-s]=a.charCodeAt(e);return i}}class $t extends Yt{constructor(e){super(),Object.assign(this,{data:"data:"+(e||"")+";base64,",pending:[]})}writeUint8Array(e){const t=this;let n=0,r=t.pending;const i=t.pending.length;for(t.pending="",n=0;n<3*Math.floor((i+e.length)/3)-i;n++)r+=String.fromCharCode(e[n]);for(;n<e.length;n++)t.pending+=String.fromCharCode(e[n]);r.length>2?t.data+=btoa(r):t.pending=r}getData(){return this.data+btoa(this.pending)}}class Jt extends Xt{constructor(e){super(),Object.assign(this,{blob:e,size:e.size})}async readUint8Array(e,t){const n=this,r=e+t,i=e||r<n.size?n.blob.slice(e,r):n.blob;let o=await i.arrayBuffer();return o.byteLength>t&&(o=o.slice(e,r)),new Uint8Array(o)}}class Qt extends Zt{constructor(e){super();const t=new TransformStream,n=[];e&&n.push(["Content-Type",e]),Object.defineProperty(this,Kt,{get:()=>t.writable}),this.blob=new Response(t.readable,{headers:n}).blob()}getData(){return this.blob}}class en extends Jt{constructor(e){super(new Blob([e],{type:"text/plain"}))}}class tn extends Qt{constructor(e){super(e),Object.assign(this,{encoding:e,utf8:!e||"utf-8"==e.toLowerCase()})}async getData(){const{encoding:e,utf8:t}=this,n=await super.getData();if(n.text&&t)return n.text();{const t=new FileReader;return new Promise(((r,i)=>{Object.assign(t,{onload:({target:e})=>r(e.result),onerror:()=>i(t.error)}),t.readAsText(n,e)}))}}}class nn extends Xt{constructor(e,t){super(),on(this,e,t)}async init(){await an(this,hn,dn),super.init()}readUint8Array(e,t){return sn(this,e,t,hn,dn)}}class rn extends Xt{constructor(e,t){super(),on(this,e,t)}async init(){await an(this,mn,un),super.init()}readUint8Array(e,t){return sn(this,e,t,mn,un)}}function on(e,t,n){const{preventHeadRequest:r,useRangeHeader:i,forceRangeRequests:o,combineSizeEocd:a}=n;delete(n=Object.assign({},n)).preventHeadRequest,delete n.useRangeHeader,delete n.forceRangeRequests,delete n.combineSizeEocd,delete n.useXHR,Object.assign(e,{url:t,options:n,preventHeadRequest:r,useRangeHeader:i,forceRangeRequests:o,combineSizeEocd:a})}async function an(e,t,n){const{url:r,preventHeadRequest:i,useRangeHeader:o,forceRangeRequests:a,combineSizeEocd:s}=e;if(function(e){const{baseURL:t}=se(),{protocol:n}=new URL(e,t);return"http:"==n||"https:"==n}(r)&&(o||a)&&(void 0===i||i)){const r=await t(Bt,e,ln(e,s?-22:void 0));if(!a&&r.headers.get("Accept-Ranges")!=Ht)throw new Error(Nt);{let i;s&&(e.eocdCache=new Uint8Array(await r.arrayBuffer()));const o=r.headers.get("Content-Range");if(o){const e=o.trim().split(/\s*\/\s*/);if(e.length){const t=e[1];t&&"*"!=t&&(i=Number(t))}}i===ee?await pn(e,t,n):e.size=i}}else await pn(e,t,n)}async function sn(e,t,n,r,i){const{useRangeHeader:o,forceRangeRequests:a,eocdCache:s,size:l,options:c}=e;if(o||a){if(s&&t==l-X&&n==X)return s;const i=await r(Bt,e,ln(e,t,n));if(206!=i.status)throw new Error(Nt);return new Uint8Array(await i.arrayBuffer())}{const{data:r}=e;return r||await i(e,c),new Uint8Array(e.data.subarray(t,t+n))}}function ln(e,t=0,n=1){return Object.assign({},cn(e),{[qt]:Ht+"="+(t<0?t:t+"-"+(t+n-1))})}function cn({options:e}){const{headers:t}=e;if(t)return Symbol.iterator in t?Object.fromEntries(t):t}async function dn(e){await fn(e,hn)}async function un(e){await fn(e,mn)}async function fn(e,t){const n=await t(Bt,e,cn(e));e.data=new Uint8Array(await n.arrayBuffer()),e.size||(e.size=e.data.length)}async function pn(e,t,n){if(e.preventHeadRequest)await n(e,e.options);else{const r=(await t("HEAD",e,cn(e))).headers.get("Content-Length");r?e.size=Number(r):await n(e,e.options)}}async function hn(e,{options:t,url:n},r){const i=await fetch(n,Object.assign({},t,{method:e,headers:r}));if(i.status<400)return i;throw 416==i.status?new Error(Nt):new Error(Wt+(i.statusText||i.status))}function mn(e,{url:t},n){return new Promise(((r,i)=>{const o=new XMLHttpRequest;if(o.addEventListener("load",(()=>{if(o.status<400){const e=[];o.getAllResponseHeaders().trim().split(/[\r\n]+/).forEach((t=>{const n=t.trim().split(/\s*:\s*/);n[0]=n[0].trim().replace(/^[a-z]|-[a-z]/g,(e=>e.toUpperCase())),e.push(n)})),r({status:o.status,arrayBuffer:()=>o.response,headers:new Map(e)})}else i(416==o.status?new Error(Nt):new Error(Wt+(o.statusText||o.status)))}),!1),o.addEventListener("error",(e=>i(e.detail?e.detail.error:new Error("Network error"))),!1),o.open(e,t),n)for(const e of Object.entries(n))o.setRequestHeader(e[0],e[1]);o.responseType="arraybuffer",o.send()}))}class gn extends Xt{constructor(e,t={}){super(),Object.assign(this,{url:e,reader:t.useXHR?new rn(e,t):new nn(e,t)})}set size(e){}get size(){return this.reader.size}async init(){await this.reader.init(),super.init()}readUint8Array(e,t){return this.reader.readUint8Array(e,t)}}class yn extends Xt{constructor(e){super(),Object.assign(this,{array:e,size:e.length})}readUint8Array(e,t){return this.array.slice(e,e+t)}}class wn extends Yt{init(e=0){Object.assign(this,{offset:0,array:new Uint8Array(e)}),super.init()}writeUint8Array(e){const t=this;if(t.offset+e.length>t.array.length){const n=t.array;t.array=new Uint8Array(n.length+e.length),t.array.set(n)}t.array.set(e,t.offset),t.offset+=e.length}getData(){return this.array}}class vn extends Xt{constructor(e){super(),this.readers=e}async init(){const e=this,{readers:t}=e;e.lastDiskNumber=0,e.lastDiskOffset=0,await Promise.all(t.map((async(n,r)=>{await n.init(),r!=t.length-1&&(e.lastDiskOffset+=n.size),e.size+=n.size}))),super.init()}async readUint8Array(e,t,n=0){const r=this,{readers:i}=this;let o,a=n;-1==a&&(a=i.length-1);let s=e;for(;s>=i[a].size;)s-=i[a].size,a++;const l=i[a],c=l.size;if(s+t<=c)o=await kn(l,s,t);else{const i=c-s;o=new Uint8Array(t),o.set(await kn(l,s,i)),o.set(await r.readUint8Array(e+i,t-i,n),i)}return r.lastDiskNumber=Math.max(a,r.lastDiskNumber),o}}class bn extends Zt{constructor(e,t=4294967295){super();const n=this;let r,i,o;Object.assign(n,{diskNumber:0,diskOffset:0,size:0,maxSize:t,availableSize:t});const a=new WritableStream({async write(t){const{availableSize:a}=n;if(o)t.length>=a?(await s(t.slice(0,a)),await l(),n.diskOffset+=r.size,n.diskNumber++,o=null,await this.write(t.slice(a))):await s(t);else{const{value:a,done:s}=await e.next();if(s&&!a)throw new Error(Lt);r=a,r.size=0,r.maxSize&&(n.maxSize=r.maxSize),n.availableSize=n.maxSize,await xn(r),i=a.writable,o=i.getWriter(),await this.write(t)}},async close(){await o.ready,await l()}});async function s(e){const t=e.length;t&&(await o.ready,await o.write(e),r.size+=t,n.size+=t,n.availableSize-=t)}async function l(){i.size=r.size,await o.close()}Object.defineProperty(n,Kt,{get:()=>a})}}async function xn(e,t){if(!e.init||e.initialized)return Promise.resolve();await e.init(t)}function _n(e){return Array.isArray(e)&&(e=new vn(e)),e instanceof ReadableStream&&(e={readable:e}),e}function Sn(e){e.writable===ee&&typeof e.next==ne&&(e=new bn(e)),e instanceof WritableStream&&(e={writable:e});const{writable:t}=e;return t.size===ee&&(t.size=0),e instanceof bn||Object.assign(e,{diskNumber:0,diskOffset:0,availableSize:1/0,maxSize:1/0}),e}function kn(e,t,n,r){return e.readUint8Array(t,n,r)}const An=vn,En=bn,Dn="\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ".split(""),zn=256==Dn.length;function Cn(e,t){return t&&"cp437"==t.trim().toLowerCase()?function(e){if(zn){let t="";for(let n=0;n<e.length;n++)t+=Dn[e[n]];return t}return(new TextDecoder).decode(e)}(e):new TextDecoder(t).decode(e)}const On="filename",jn="rawFilename",Rn="comment",Tn="rawComment",In="uncompressedSize",Pn="compressedSize",Fn="offset",Un="diskNumberStart",Mn="lastModDate",Wn="rawLastModDate",Nn="lastAccessDate",Ln="creationDate",qn="internalFileAttribute",Bn="externalFileAttribute",Hn="msDosCompatible",Vn="zip64",Kn="encrypted",Zn="version",Xn="versionMadeBy",Yn="zipCrypto",Gn=[On,jn,Pn,In,Mn,Wn,Rn,Tn,Nn,Ln,Fn,Un,Un,qn,Bn,Hn,Vn,Kn,Zn,Xn,Yn,"directory","bitFlag","signature","filenameUTF8","commentUTF8","compressionMethod","extraField","rawExtraField","extraFieldZip64","extraFieldUnicodePath","extraFieldUnicodeComment","extraFieldAES","extraFieldNTFS","extraFieldExtendedTimestamp"];class $n{constructor(e){Gn.forEach((t=>this[t]=e[t]))}}const Jn="File format is not recognized",Qn="End of central directory not found",er="End of Zip64 central directory locator not found",tr="Central directory header not found",nr="Local file header not found",rr="Zip64 extra field not found",ir="File contains encrypted entry",or="Encryption method not supported",ar="Compression method not supported",sr="Split zip file",lr="utf-8",cr="cp437",dr=[[In,W],[Pn,W],[Fn,W],[Un,N]],ur={[N]:{getValue:_r,bytes:4},[W]:{getValue:Sr,bytes:8}};class fr{constructor(e,t={}){Object.assign(this,{reader:_n(e),options:t,config:se()})}async*getEntriesGenerator(e={}){const t=this;let{reader:n}=t;const{config:r}=t;if(await xn(n),n.size!==ee&&n.readUint8Array||(n=new Jt(await new Response(n.readable).blob()),await xn(n)),n.size<X)throw new Error(Jn);n.chunkSize=le(r);const i=await async function(e,t,n){const r=new Uint8Array(4);var i,o;i=kr(r),o=t,i.setUint32(0,o,!0);return await a(22)||await a(Math.min(1048582,n));async function a(t){const i=n-t,o=await kn(e,i,t);for(let e=o.length-22;e>=0;e--)if(o[e]==r[0]&&o[e+1]==r[1]&&o[e+2]==r[2]&&o[e+3]==r[3])return{offset:i+e,buffer:o.slice(e,e+22).buffer}}}(n,V,n.size);if(!i)throw _r(kr(await kn(n,0,4)))==q?new Error(sr):new Error(Qn);const o=kr(i);let a=_r(o,12),s=_r(o,16);const l=i.offset,c=xr(o,20),d=l+X+c;let u=xr(o,4);const f=n.lastDiskNumber||0;let p=xr(o,6),h=xr(o,8),m=0,g=0;if(s==W||a==W||h==N||p==N){const e=kr(await kn(n,i.offset-20,20));if(_r(e,0)==Z){s=Sr(e,8);let t=await kn(n,s,56,-1),r=kr(t);const o=i.offset-20-56;if(_r(r,0)!=K&&s!=o){const e=s;s=o,m=s-e,t=await kn(n,s,56,-1),r=kr(t)}if(_r(r,0)!=K)throw new Error(er);u==N&&(u=_r(r,16)),p==N&&(p=_r(r,20)),h==N&&(h=Sr(r,32)),a==W&&(a=Sr(r,40)),s-=a}}if(s>=n.size&&(m=n.size-s-a-X,s=n.size-a-X),f!=u)throw new Error(sr);if(s<0)throw new Error(Jn);let y=0,w=await kn(n,s,a,p),v=kr(w);if(a){const e=i.offset-a;if(_r(v,y)!=H&&s!=e){const t=s;s=e,m+=s-t,w=await kn(n,s,a,p),v=kr(w)}}const b=i.offset-s-(n.lastDiskOffset||0);if(a!=b&&b>=0&&(a=b,w=await kn(n,s,a,p),v=kr(w)),s<0||s>=n.size)throw new Error(Jn);const x=yr(t,e,"filenameEncoding"),_=yr(t,e,"commentEncoding");for(let i=0;i<h;i++){const o=new pr(n,r,t.options);if(_r(v,y)!=H)throw new Error(tr);hr(o,v,y+6);const a=Boolean(o.bitFlag.languageEncodingFlag),s=y+46,l=s+o.filenameLength,c=l+o.extraFieldLength,d=xr(v,y+4),u=!0,f=w.subarray(s,l),p=xr(v,y+32),b=c+p,S=w.subarray(c,b),k=a,A=a,E=u&&!(16&~br(v,y+38)),D=_r(v,y+42)+m;Object.assign(o,{versionMadeBy:d,msDosCompatible:u,compressedSize:0,uncompressedSize:0,commentLength:p,directory:E,offset:D,diskNumberStart:xr(v,y+34),internalFileAttribute:xr(v,y+36),externalFileAttribute:_r(v,y+38),rawFilename:f,filenameUTF8:k,commentUTF8:A,rawExtraField:w.subarray(l,c)});const z=yr(t,e,"decodeText")||Cn,C=k?lr:x||cr,O=A?lr:_||cr;let j=z(f,C);j===ee&&(j=Cn(f,C));let R=z(S,O);R===ee&&(R=Cn(S,O)),Object.assign(o,{rawComment:S,filename:j,comment:R,directory:E||j.endsWith($)}),g=Math.max(D,g),mr(o,o,v,y+6),o.zipCrypto=o.encrypted&&!o.extraFieldAES;const T=new $n(o);T.getData=(e,t)=>o.getData(e,T,t),y=b;const{onprogress:I}=e;if(I)try{await I(i+1,h,new $n(o))}catch(e){}yield T}const S=yr(t,e,"extractPrependedData"),k=yr(t,e,"extractAppendedData");return S&&(t.prependedData=g>0?await kn(n,0,g):new Uint8Array),t.comment=c?await kn(n,l+X,c):new Uint8Array,k&&(t.appendedData=d<n.size?await kn(n,d,n.size-d):new Uint8Array),!0}async getEntries(e={}){const t=[];for await(const n of this.getEntriesGenerator(e))t.push(n);return t}async close(){}}let pr=class{constructor(e,t,n){Object.assign(this,{reader:e,config:t,options:n})}async getData(e,t,n={}){const r=this,{reader:i,offset:o,diskNumberStart:a,extraFieldAES:s,compressionMethod:l,config:c,bitFlag:d,signature:u,rawLastModDate:f,uncompressedSize:p,compressedSize:h}=r,m=t.localDirectory={},g=kr(await kn(i,o,30,a));let y=yr(r,n,"password"),w=yr(r,n,"rawPassword");const v=yr(r,n,"passThrough");if(y=y&&y.length&&y,w=w&&w.length&&w,s&&99!=s.originalCompressionMethod)throw new Error(ar);if(0!=l&&8!=l&&!v)throw new Error(ar);if(_r(g,0)!=L)throw new Error(nr);hr(m,g,4),m.rawExtraField=m.extraFieldLength?await kn(i,o+30+m.filenameLength,m.extraFieldLength,a):new Uint8Array,mr(r,m,g,4,!0),Object.assign(t,{lastAccessDate:m.lastAccessDate,creationDate:m.creationDate});const b=r.encrypted&&m.encrypted&&!v,x=b&&!s;if(v||(t.zipCrypto=x),b){if(!x&&s.strength===ee)throw new Error(or);if(!y&&!w)throw new Error(ir)}const _=o+30+m.filenameLength+m.extraFieldLength,S=h,k=i.readable;Object.assign(k,{diskNumberStart:a,offset:_,size:S});const A=yr(r,n,"signal"),E=yr(r,n,"checkPasswordOnly");E&&(e=new WritableStream),e=Sn(e),await xn(e,v?h:p);const{writable:D}=e,{onstart:z,onprogress:C,onend:O}=n,j={options:{codecType:xt,password:y,rawPassword:w,zipCrypto:x,encryptionStrength:s&&s.strength,signed:yr(r,n,"checkSignature")&&!v,passwordVerification:x&&(d.dataDescriptor?f>>>8&255:u>>>24&255),signature:u,compressed:0!=l&&!v,encrypted:r.encrypted&&!v,useWebWorkers:yr(r,n,"useWebWorkers"),useCompressionStream:yr(r,n,"useCompressionStream"),transferStreams:yr(r,n,"transferStreams"),checkPasswordOnly:E},config:c,streamOptions:{signal:A,size:S,onstart:z,onprogress:C,onend:O}};let R=0;try{({outputSize:R}=await Ft({readable:k,writable:D},j))}catch(e){if(!E||e.message!=De)throw e}finally{const e=yr(r,n,"preventClose");D.size+=R,e||D.locked||await D.getWriter().close()}return E?ee:e.getData?e.getData():D}};function hr(e,t,n){const r=e.rawBitFlag=xr(t,n+2),i=!(1&~r),o=_r(t,n+6);Object.assign(e,{encrypted:i,version:xr(t,n),bitFlag:{level:(6&r)>>1,dataDescriptor:!(8&~r),languageEncodingFlag:(r&G)==G},rawLastModDate:o,lastModDate:wr(o),filenameLength:xr(t,n+22),extraFieldLength:xr(t,n+24)})}function mr(e,t,n,r,i){const{rawExtraField:o}=t,a=t.extraField=new Map,s=kr(new Uint8Array(o));let l=0;try{for(;l<o.length;){const e=xr(s,l),t=xr(s,l+2);a.set(e,{type:e,data:o.slice(l+4,l+4+t)}),l+=4+t}}catch(e){}const c=xr(n,r+4);Object.assign(t,{signature:_r(n,r+10),uncompressedSize:_r(n,r+18),compressedSize:_r(n,r+14)});const d=a.get(1);d&&(function(e,t){t.zip64=!0;const n=kr(e.data),r=dr.filter((([e,n])=>t[e]==n));for(let i=0,o=0;i<r.length;i++){const[a,s]=r[i];if(t[a]==s){const r=ur[s];t[a]=e[a]=r.getValue(n,o),o+=r.bytes}else if(e[a])throw new Error(rr)}}(d,t),t.extraFieldZip64=d);const u=a.get(28789);u&&(gr(u,On,jn,t,e),t.extraFieldUnicodePath=u);const f=a.get(25461);f&&(gr(f,Rn,Tn,t,e),t.extraFieldUnicodeComment=f);const p=a.get(39169);p?(function(e,t,n){const r=kr(e.data),i=br(r,4);Object.assign(e,{vendorVersion:br(r,0),vendorId:br(r,2),strength:i,originalCompressionMethod:n,compressionMethod:xr(r,5)}),t.compressionMethod=e.compressionMethod}(p,t,c),t.extraFieldAES=p):t.compressionMethod=c;const h=a.get(10);h&&(function(e,t){const n=kr(e.data);let r,i=4;try{for(;i<e.data.length&&!r;){const t=xr(n,i),o=xr(n,i+2);1==t&&(r=e.data.slice(i+4,i+4+o)),i+=4+o}}catch(e){}try{if(r&&24==r.length){const n=kr(r),i=n.getBigUint64(0,!0),o=n.getBigUint64(8,!0),a=n.getBigUint64(16,!0);Object.assign(e,{rawLastModDate:i,rawLastAccessDate:o,rawCreationDate:a});const s=vr(i),l={lastModDate:s,lastAccessDate:vr(o),creationDate:vr(a)};Object.assign(e,l),Object.assign(t,l)}}catch(e){}}(h,t),t.extraFieldNTFS=h);const m=a.get(Y);m&&(function(e,t,n){const r=kr(e.data),i=br(r,0),o=[],a=[];n?(1&~i||(o.push(Mn),a.push(Wn)),2&~i||(o.push(Nn),a.push("rawLastAccessDate")),4&~i||(o.push(Ln),a.push("rawCreationDate"))):e.data.length>=5&&(o.push(Mn),a.push(Wn));let s=1;o.forEach(((n,i)=>{if(e.data.length>=s+4){const o=_r(r,s);t[n]=e[n]=new Date(1e3*o);const l=a[i];e[l]=o}s+=4}))}(m,t,i),t.extraFieldExtendedTimestamp=m);const g=a.get(6534);g&&(t.extraFieldUSDZ=g)}function gr(e,t,n,r,i){const o=kr(e.data),a=new he;a.append(i[n]);const s=kr(new Uint8Array(4));s.setUint32(0,a.get(),!0);const l=_r(o,1);Object.assign(e,{version:br(o,0),[t]:Cn(e.data.subarray(5)),valid:!i.bitFlag.languageEncodingFlag&&l==_r(s,0)}),e.valid&&(r[t]=e[t],r[t+"UTF8"]=!0)}function yr(e,t,n){return t[n]===ee?e.options[n]:t[n]}function wr(e){const t=(4294901760&e)>>16,n=65535&e;try{return new Date(1980+((65024&t)>>9),((480&t)>>5)-1,31&t,(63488&n)>>11,(2016&n)>>5,2*(31&n),0)}catch(e){}}function vr(e){return new Date(Number(e/BigInt(1e4)-BigInt(116444736e5)))}function br(e,t){return e.getUint8(t)}function xr(e,t){return e.getUint16(t,!0)}function _r(e,t){return e.getUint32(t,!0)}function Sr(e,t){return Number(e.getBigUint64(t,!0))}function kr(e){return new DataView(e.buffer)}const Ar="File already exists",Er="Zip file comment exceeds 64KB",Dr="File entry comment exceeds 64KB",zr="File entry name exceeds 64KB",Cr="Version exceeds 65535",Or="The strength must equal 1, 2, or 3",jr="Extra field type exceeds 65535",Rr="Extra field data exceeds 64KB",Tr="Zip64 is not supported (make sure 'keepOrder' is set to 'true')",Ir="Undefined uncompressed size",Pr=new Uint8Array([7,0,2,0,65,69,3,0,0]);let Fr=0;const Ur=[];class Mr{constructor(e,t={}){const n=(e=Sn(e)).availableSize!==ee&&e.availableSize>0&&e.availableSize!==1/0&&e.maxSize!==ee&&e.maxSize>0&&e.maxSize!==1/0;Object.assign(this,{writer:e,addSplitZipSignature:n,options:t,config:se(),files:new Map,filenames:new Set,offset:t.offset===ee?e.writable.size:t.offset,pendingEntriesSize:0,pendingAddFileCalls:new Set,bufferedWrites:0})}async add(e="",t,n={}){const r=this,{pendingAddFileCalls:i,config:o}=r;let a;Fr<o.maxWorkers?Fr++:await new Promise((e=>Ur.push(e)));try{if(e=e.trim(),r.filenames.has(e))throw new Error(Ar);return r.filenames.add(e),a=async function(e,t,n,r){t=t.trim(),r.directory&&!t.endsWith($)?t+=$:r.directory=t.endsWith($);const i=Lr(e,r,"encodeText",ge);let o=i(t);if(o===ee&&(o=ge(t)),Yr(o)>N)throw new Error(zr);const a=r.comment||"";let s=i(a);if(s===ee&&(s=ge(a)),Yr(s)>N)throw new Error(Dr);const l=Lr(e,r,Zn,20);if(l>N)throw new Error(Cr);const c=Lr(e,r,Xn,20);if(c>N)throw new Error(Cr);const d=Lr(e,r,Mn,new Date),u=Lr(e,r,Nn),f=Lr(e,r,Ln),p=Lr(e,r,Hn,!0),h=Lr(e,r,qn,0),m=Lr(e,r,Bn,0),g=Lr(e,r,"passThrough");let y,w;g||(y=Lr(e,r,"password"),w=Lr(e,r,"rawPassword"));const v=Lr(e,r,"encryptionStrength",3),b=Lr(e,r,Yn),x=Lr(e,r,"extendedTimestamp",!0),_=Lr(e,r,"keepOrder",!0),S=Lr(e,r,"level"),k=Lr(e,r,"useWebWorkers"),A=Lr(e,r,"bufferedWrite"),E=Lr(e,r,"dataDescriptorSignature",!1),D=Lr(e,r,"signal"),z=Lr(e,r,"useUnicodeFileNames",!0),C=Lr(e,r,"useCompressionStream"),O=Lr(e,r,"compressionMethod");let j=Lr(e,r,"dataDescriptor",!0),R=Lr(e,r,Vn);if(!(b||y===ee&&w===ee||v>=1&&v<=3))throw new Error(Or);let T=new Uint8Array;const{extraField:I}=r;if(I){let e=0,t=0;I.forEach((t=>e+=4+Yr(t))),T=new Uint8Array(e),I.forEach(((e,n)=>{if(n>N)throw new Error(jr);if(Yr(e)>N)throw new Error(Rr);Zr(T,new Uint16Array([n]),t),Zr(T,new Uint16Array([Yr(e)]),t+2),Zr(T,e,t+4),t+=4+Yr(e)}))}let P=0,F=0,U=0;if(g&&(({uncompressedSize:U}=r),U===ee))throw new Error(Ir);const M=!0===R;n&&(n=_n(n),await xn(n),g?P=qr(U):n.size===ee?(j=!0,(R||R===ee)&&(R=!0,U=P=4294967296)):(U=n.size,P=qr(U)));const{diskOffset:H,diskNumber:V,maxSize:K}=e.writer,Z=M||U>W,X=M||P>W,te=M||e.offset+e.pendingEntriesSize-H>W,ne=Lr(e,r,"supportZip64SplitFile",!0)&&M||V+Math.ceil(e.pendingEntriesSize/K)>N;if(te||Z||X||ne){if(!1===R||!_)throw new Error(Tr);R=!0}R=R||!1;const re=Lr(e,r,Kn),{signature:ie}=r,oe=function(e){const{rawFilename:t,lastModDate:n,lastAccessDate:r,creationDate:i,level:o,zip64:a,zipCrypto:s,useUnicodeFileNames:l,dataDescriptor:c,directory:d,rawExtraField:u,encryptionStrength:f,extendedTimestamp:p,encrypted:h}=e;let{version:m,compressionMethod:g}=e;const y=!d&&(o>0||o===ee&&0!==g);let w,v,b,x;if(h&&!s){w=new Uint8Array(Yr(Pr)+2);const e=Xr(w);Hr(e,0,39169),Zr(w,Pr,2),Br(e,8,f)}else w=new Uint8Array;if(p){b=new Uint8Array(9+(r?4:0)+(i?4:0));const e=Xr(b);Hr(e,0,Y),Hr(e,2,Yr(b)-4),x=1+(r?2:0)+(i?4:0),Br(e,4,x);let t=5;Vr(e,t,Math.floor(n.getTime()/1e3)),t+=4,r&&(Vr(e,t,Math.floor(r.getTime()/1e3)),t+=4),i&&Vr(e,t,Math.floor(i.getTime()/1e3));try{v=new Uint8Array(36);const e=Xr(v),t=Nr(n);Hr(e,0,10),Hr(e,2,32),Hr(e,8,1),Hr(e,10,24),Kr(e,12,t),Kr(e,20,Nr(r)||t),Kr(e,28,Nr(i)||t)}catch(e){v=new Uint8Array}}else v=b=new Uint8Array;let _=0;l&&(_|=G),c&&(_|=8),g===ee&&(g=y?8:0),8==g&&(o>=1&&o<3&&(_|=6),o>=3&&o<5&&(_|=1),9===o&&(_|=2)),a&&(m=m>45?m:45),h&&(_|=1,s||(m=m>51?m:51,w[9]=g,g=99));const S=new Uint8Array(26),k=Xr(S);Hr(k,0,m),Hr(k,2,_),Hr(k,4,g);const A=new Uint32Array(1),E=Xr(A);let D;D=n<Q?Q:n>J?J:n,Hr(E,0,(D.getHours()<<6|D.getMinutes())<<5|D.getSeconds()/2),Hr(E,2,(D.getFullYear()-1980<<4|D.getMonth()+1)<<5|D.getDate());const z=A[0];Vr(k,6,z),Hr(k,22,Yr(t));const C=Yr(w,b,v,u);Hr(k,24,C);const O=new Uint8Array(30+Yr(t)+C);return Vr(Xr(O),0,L),Zr(O,S,4),Zr(O,t,30),Zr(O,w,30+Yr(t)),Zr(O,b,30+Yr(t,w)),Zr(O,v,30+Yr(t,w,b)),Zr(O,u,30+Yr(t,w,b,v)),{localHeaderArray:O,headerArray:S,headerView:k,lastModDate:n,rawLastModDate:z,encrypted:h,compressed:y,version:m,compressionMethod:g,extraFieldExtendedTimestampFlag:x,rawExtraFieldExtendedTimestamp:b,rawExtraFieldNTFS:v,rawExtraFieldAES:w,extraFieldLength:C}}(r=Object.assign({},r,{rawFilename:o,rawComment:s,version:l,versionMadeBy:c,lastModDate:d,lastAccessDate:u,creationDate:f,rawExtraField:T,zip64:R,zip64UncompressedSize:Z,zip64CompressedSize:X,zip64Offset:te,zip64DiskNumberStart:ne,password:y,rawPassword:w,level:C||e.config.CompressionStream!==ee||e.config.CompressionStreamNative!==ee?S:0,useWebWorkers:k,encryptionStrength:v,extendedTimestamp:x,zipCrypto:b,bufferedWrite:A,keepOrder:_,useUnicodeFileNames:z,dataDescriptor:j,dataDescriptorSignature:E,signal:D,msDosCompatible:p,internalFileAttribute:h,externalFileAttribute:m,useCompressionStream:C,passThrough:g,encrypted:Boolean(y&&Yr(y)||w&&Yr(w))||g&&re,signature:ie,compressionMethod:O})),ae=function(e){const{zip64:t,dataDescriptor:n,dataDescriptorSignature:r}=e;let i,o=new Uint8Array,a=0;return n&&(o=new Uint8Array(t?r?24:20:r?16:12),i=Xr(o),r&&(a=4,Vr(i,0,B))),{dataDescriptorArray:o,dataDescriptorView:i,dataDescriptorOffset:a}}(r),se=Yr(oe.localHeaderArray,ae.dataDescriptorArray);let ce;F=se+P,e.options.usdz&&(F+=F+64),e.pendingEntriesSize+=F;try{ce=await async function(e,t,n,r,i){const{files:o,writer:a}=e,{keepOrder:s,dataDescriptor:l,signal:c}=i,{headerInfo:d}=r,{usdz:u}=e.options,f=Array.from(o.values()).pop();let p,h,m,g,y,w,v,b={};o.set(t,b);try{let d;s&&(d=f&&f.lock,b.lock=new Promise((e=>m=e))),!(i.bufferedWrite||e.writerLocked||e.bufferedWrites&&s)&&l||u?(w=a,await x()):(w=new TransformStream,v=new Response(w.readable).blob(),w.writable.size=0,p=!0,e.bufferedWrites++,await xn(a)),await xn(w);const{writable:h}=a;let{diskOffset:S}=a;if(e.addSplitZipSignature){delete e.addSplitZipSignature;const t=new Uint8Array(4);Vr(Xr(t),0,q),await Wr(h,t),e.offset+=4}u&&function(e,t){const{headerInfo:n}=e;let{localHeaderArray:r,extraFieldLength:i}=n,o=Xr(r),a=64-(t+Yr(r))%64;a<4&&(a+=64);const s=new Uint8Array(a),l=Xr(s);Hr(l,0,6534),Hr(l,2,a-2);const c=r;n.localHeaderArray=r=new Uint8Array(Yr(c)+a),Zr(r,c),Zr(r,s,Yr(c)),o=Xr(r),Hr(o,28,i+a),e.metadataSize+=a}(r,e.offset-S),p||(await d,await _(h));const{diskNumber:k}=a;if(y=!0,b.diskNumberStart=k,b=await async function(e,t,{diskNumberStart:n,lock:r},i,o,a){const{headerInfo:s,dataDescriptorInfo:l,metadataSize:c}=i,{localHeaderArray:d,headerArray:u,lastModDate:f,rawLastModDate:p,encrypted:h,compressed:m,version:g,compressionMethod:y,rawExtraFieldExtendedTimestamp:w,extraFieldExtendedTimestampFlag:v,rawExtraFieldNTFS:b,rawExtraFieldAES:x}=s,{dataDescriptorArray:_}=l,{rawFilename:S,lastAccessDate:k,creationDate:A,password:E,rawPassword:D,level:z,zip64:C,zip64UncompressedSize:O,zip64CompressedSize:j,zip64Offset:R,zip64DiskNumberStart:T,zipCrypto:I,dataDescriptor:P,directory:F,versionMadeBy:U,rawComment:M,rawExtraField:N,useWebWorkers:L,onstart:q,onprogress:B,onend:H,signal:V,encryptionStrength:K,extendedTimestamp:Z,msDosCompatible:X,internalFileAttribute:Y,externalFileAttribute:G,useCompressionStream:$,passThrough:J}=a,Q={lock:r,versionMadeBy:U,zip64:C,directory:Boolean(F),filenameUTF8:!0,rawFilename:S,commentUTF8:!0,rawComment:M,rawExtraFieldExtendedTimestamp:w,rawExtraFieldNTFS:b,rawExtraFieldAES:x,rawExtraField:N,extendedTimestamp:Z,msDosCompatible:X,internalFileAttribute:Y,externalFileAttribute:G,diskNumberStart:n};let{signature:te,uncompressedSize:ne}=a,re=0;J||(ne=0);const{writable:ie}=t;if(e){e.chunkSize=le(o),await Wr(ie,d);const t=e.readable,n=t.size=e.size,r={options:{codecType:bt,level:z,rawPassword:D,password:E,encryptionStrength:K,zipCrypto:h&&I,passwordVerification:h&&I&&p>>8&255,signed:!J,compressed:m&&!J,encrypted:h&&!J,useWebWorkers:L,useCompressionStream:$,transferStreams:!1},config:o,streamOptions:{signal:V,size:n,onstart:q,onprogress:B,onend:H}},i=await Ft({readable:t,writable:ie},r);re=i.outputSize,J||(ne=i.inputSize,te=i.signature),ie.size+=ne}else await Wr(ie,d);let oe;if(C){let e=4;O&&(e+=8),j&&(e+=8),R&&(e+=8),T&&(e+=4),oe=new Uint8Array(e)}else oe=new Uint8Array;return function(e,t){const{signature:n,rawExtraFieldZip64:r,compressedSize:i,uncompressedSize:o,headerInfo:a,dataDescriptorInfo:s}=e,{headerView:l,encrypted:c}=a,{dataDescriptorView:d,dataDescriptorOffset:u}=s,{zip64:f,zip64UncompressedSize:p,zip64CompressedSize:h,zipCrypto:m,dataDescriptor:g}=t;if(c&&!m||n===ee||(Vr(l,10,n),g&&Vr(d,u,n)),f){const e=Xr(r);Hr(e,0,1),Hr(e,2,Yr(r)-4);let t=4;p&&(Vr(l,18,W),Kr(e,t,BigInt(o)),t+=8),h&&(Vr(l,14,W),Kr(e,t,BigInt(i))),g&&(Kr(d,u+4,BigInt(i)),Kr(d,u+12,BigInt(o)))}else Vr(l,14,i),Vr(l,18,o),g&&(Vr(d,u+4,i),Vr(d,u+8,o))}({signature:te,rawExtraFieldZip64:oe,compressedSize:re,uncompressedSize:ne,headerInfo:s,dataDescriptorInfo:l},a),P&&await Wr(ie,_),Object.assign(Q,{uncompressedSize:ne,compressedSize:re,lastModDate:f,rawLastModDate:p,creationDate:A,lastAccessDate:k,encrypted:h,zipCrypto:I,size:c+re,compressionMethod:y,version:g,headerArray:u,signature:te,rawExtraFieldZip64:oe,extraFieldExtendedTimestampFlag:v,zip64UncompressedSize:O,zip64CompressedSize:j,zip64Offset:R,zip64DiskNumberStart:T}),Q}(n,w,b,r,e.config,i),y=!1,o.set(t,b),b.filename=t,p){await w.writable.getWriter().close();let e=await v;await d,await x(),g=!0,l||(e=await async function(e,t,n,{zipCrypto:r}){let i;i=await t.slice(0,26).arrayBuffer(),26!=i.byteLength&&(i=i.slice(0,26));const o=new DataView(i);return e.encrypted&&!r||Vr(o,14,e.signature),e.zip64?(Vr(o,18,W),Vr(o,22,W)):(Vr(o,18,e.compressedSize),Vr(o,22,e.uncompressedSize)),await Wr(n,new Uint8Array(i)),t.slice(i.byteLength)}(b,e,h,i)),await _(h),b.diskNumberStart=a.diskNumber,S=a.diskOffset,await e.stream().pipeTo(h,{preventClose:!0,preventAbort:!0,signal:c}),h.size+=e.size,g=!1}if(b.offset=e.offset-S,b.zip64)!function(e,t){const{rawExtraFieldZip64:n,offset:r,diskNumberStart:i}=e,{zip64UncompressedSize:o,zip64CompressedSize:a,zip64Offset:s,zip64DiskNumberStart:l}=t,c=Xr(n);let d=4;o&&(d+=8),a&&(d+=8),s&&(Kr(c,d,BigInt(r)),d+=8),l&&Vr(c,d,i)}(b,i);else if(b.offset>W)throw new Error(Tr);return e.offset+=b.size,b}catch(n){if(p&&g||!p&&y){if(e.hasCorruptedEntries=!0,n)try{n.corruptedEntry=!0}catch(e){}p?e.offset+=w.writable.size:e.offset=w.writable.size}throw o.delete(t),n}finally{p&&e.bufferedWrites--,m&&m(),h&&h()}async function x(){e.writerLocked=!0;const{lockWriter:t}=e;e.lockWriter=new Promise((t=>h=()=>{e.writerLocked=!1,t()})),await t}async function _(e){Yr(d.localHeaderArray)>a.availableSize&&(a.availableSize=0,await Wr(e,new Uint8Array))}}(e,t,n,{headerInfo:oe,dataDescriptorInfo:ae,metadataSize:se},r)}finally{e.pendingEntriesSize-=F}return Object.assign(ce,{name:t,comment:a,extraField:I}),new $n(ce)}(r,e,t,n),i.add(a),await a}catch(t){throw r.filenames.delete(e),t}finally{i.delete(a);const e=Ur.shift();e?e():Fr--}}async close(e=new Uint8Array,t={}){const{pendingAddFileCalls:n,writer:r}=this,{writable:i}=r;for(;n.size;)await Promise.allSettled(Array.from(n));return await async function(e,t,n){const{files:r,writer:i}=e,{diskOffset:o,writable:a}=i;let{diskNumber:s}=i,l=0,c=0,d=e.offset-o,u=r.size;for(const[,e]of r){const{rawFilename:t,rawExtraFieldZip64:n,rawExtraFieldAES:r,rawComment:i,rawExtraFieldNTFS:o,rawExtraField:a,extendedTimestamp:s,extraFieldExtendedTimestampFlag:l,lastModDate:d}=e;let u;if(s){u=new Uint8Array(9);const e=Xr(u);Hr(e,0,Y),Hr(e,2,5),Br(e,4,l),Vr(e,5,Math.floor(d.getTime()/1e3))}else u=new Uint8Array;e.rawExtraFieldCDExtendedTimestamp=u,c+=46+Yr(t,i,n,r,o,u,a)}const f=new Uint8Array(c),p=Xr(f);await xn(i);let h=0;for(const[e,t]of Array.from(r.values()).entries()){const{offset:o,rawFilename:s,rawExtraFieldZip64:c,rawExtraFieldAES:d,rawExtraFieldCDExtendedTimestamp:u,rawExtraFieldNTFS:m,rawExtraField:g,rawComment:y,versionMadeBy:w,headerArray:v,directory:b,zip64:x,zip64UncompressedSize:_,zip64CompressedSize:S,zip64DiskNumberStart:k,zip64Offset:A,msDosCompatible:E,internalFileAttribute:D,externalFileAttribute:z,diskNumberStart:C,uncompressedSize:O,compressedSize:j}=t,R=Yr(c,d,u,m,g);Vr(p,l,H),Hr(p,l+4,w);const T=Xr(v);_||Vr(T,18,O),S||Vr(T,14,j),Zr(f,v,l+6),Hr(p,l+30,R),Hr(p,l+32,Yr(y)),Hr(p,l+34,x&&k?N:C),Hr(p,l+36,D),z?Vr(p,l+38,z):b&&E&&Br(p,l+38,16),Vr(p,l+42,x&&A?W:o),Zr(f,s,l+46),Zr(f,c,l+46+Yr(s)),Zr(f,d,l+46+Yr(s,c)),Zr(f,u,l+46+Yr(s,c,d)),Zr(f,m,l+46+Yr(s,c,d,u)),Zr(f,g,l+46+Yr(s,c,d,u,m)),Zr(f,y,l+46+Yr(s)+R);const I=46+Yr(s,y)+R;if(l-h>i.availableSize&&(i.availableSize=0,await Wr(a,f.slice(h,l)),h=l),l+=I,n.onprogress)try{await n.onprogress(e+1,r.size,new $n(t))}catch(e){}}await Wr(a,h?f.slice(h):f);let m=i.diskNumber;const{availableSize:g}=i;g<X&&m++;let y=Lr(e,n,Vn);if(d>W||c>W||u>N||m>N){if(!1===y)throw new Error(Tr);y=!0}const w=new Uint8Array(y?98:X),v=Xr(w);l=0,y&&(Vr(v,0,K),Kr(v,4,BigInt(44)),Hr(v,12,45),Hr(v,14,45),Vr(v,16,m),Vr(v,20,s),Kr(v,24,BigInt(u)),Kr(v,32,BigInt(u)),Kr(v,40,BigInt(c)),Kr(v,48,BigInt(d)),Vr(v,56,Z),Kr(v,64,BigInt(d)+BigInt(c)),Vr(v,72,m+1),Lr(e,n,"supportZip64SplitFile",!0)&&(m=N,s=N),u=N,d=W,c=W,l+=76),Vr(v,l,V),Hr(v,l+4,m),Hr(v,l+6,s),Hr(v,l+8,u),Hr(v,l+10,u),Vr(v,l+12,c),Vr(v,l+16,d);const b=Yr(t);if(b){if(!(b<=N))throw new Error(Er);Hr(v,l+20,b)}await Wr(a,w),b&&await Wr(a,t)}(this,e,t),Lr(this,t,"preventClose")||await i.getWriter().close(),r.getData?r.getData():i}}async function Wr(e,t){const n=e.getWriter();try{await n.ready,e.size+=Yr(t),await n.write(t)}finally{n.releaseLock()}}function Nr(e){if(e)return(BigInt(e.getTime())+BigInt(116444736e5))*BigInt(1e4)}function Lr(e,t,n,r){const i=t[n]===ee?e.options[n]:t[n];return i===ee?r:i}function qr(e){return e+5*(Math.floor(e/16383)+1)}function Br(e,t,n){e.setUint8(t,n)}function Hr(e,t,n){e.setUint16(t,n,!0)}function Vr(e,t,n){e.setUint32(t,n,!0)}function Kr(e,t,n){e.setBigUint64(t,n,!0)}function Zr(e,t,n){e.set(t,n)}function Xr(e){return new DataView(e.buffer)}function Yr(...e){let t=0;return e.forEach((e=>e&&(t+=e.length))),t}class Gr{constructor(e,t,n,r){const i=this;if(e.root&&r&&r.getChildByName(t))throw new Error("Entry filename already exists");n||(n={}),Object.assign(i,{fs:e,name:t,data:n.data,options:n.options,id:e.entries.length,parent:r,children:[],uncompressedSize:n.uncompressedSize||0,passThrough:n.passThrough}),e.entries.push(i),r&&i.parent.children.push(i)}moveTo(e){this.fs.move(this,e)}getFullname(){return this.getRelativeName()}getRelativeName(e=this.fs.root){let t=this.name,n=this.parent;for(;n&&n!=e;)t=(n.name?n.name+"/":"")+t,n=n.parent;return t}isDescendantOf(e){let t=this.parent;for(;t&&t.id!=e.id;)t=t.parent;return Boolean(t)}rename(e){const t=this.parent;if(t&&t.getChildByName(e))throw new Error("Entry filename already exists");this.name=e}}class $r extends Gr{constructor(e,t,n,r){super(e,t,n,r);const i=this;i.Reader=n.Reader,i.Writer=n.Writer,n.getData&&(i.getData=n.getData)}clone(){return new $r(this.fs,this.name,this)}async getData(e,t={}){const n=this;if(!e||e.constructor==n.Writer&&n.data)return n.data;{const r=n.reader=new n.Reader(n.data,t),i=n.data?n.data.uncompressedSize:r.size;await Promise.all([xn(r),xn(e,i)]);const o=r.readable;return o.size=n.uncompressedSize=r.size,await o.pipeTo(e.writable),e.getData?e.getData():e.writable}}isPasswordProtected(){return this.data.encrypted}async checkPassword(e,t={}){const n=this;if(!n.isPasswordProtected())return!0;t.password=e,t.checkPasswordOnly=!0;try{return await n.data.getData(null,t),!0}catch(e){if(e.message==Ae)return!1;throw e}}getText(e,t){return this.getData(new tn(e),t)}getBlob(e,t){return this.getData(new Qt(e),t)}getData64URI(e,t){return this.getData(new $t(e),t)}getUint8Array(e){return this.getData(new wn,e)}getWritable(e=new WritableStream,t){return this.getData({writable:e},t)}replaceBlob(e){Object.assign(this,{data:e,Reader:Jt,Writer:Qt,reader:null})}replaceText(e){Object.assign(this,{data:e,Reader:en,Writer:tn,reader:null})}replaceData64URI(e){Object.assign(this,{data:e,Reader:Gt,Writer:$t,reader:null})}replaceUint8Array(e){Object.assign(this,{data:e,Reader:yn,Writer:wn,reader:null})}replaceReadable(e){Object.assign(this,{data:null,Reader:function(){return{readable:e}},Writer:null,reader:null})}}class Jr extends Gr{constructor(e,t,n,r){super(e,t,n,r),this.directory=!0}clone(e){const t=this,n=new Jr(t.fs,t.name);return e&&(n.children=t.children.map((t=>{const r=t.clone(e);return r.parent=n,r}))),n}addDirectory(e,t){return ai(this,e,{options:t},!0)}addText(e,t,n={}){return ai(this,e,{data:t,Reader:en,Writer:tn,options:n,uncompressedSize:t.length})}addBlob(e,t,n={}){return ai(this,e,{data:t,Reader:Jt,Writer:Qt,options:n,uncompressedSize:t.size})}addData64URI(e,t,n={}){let r=t.length;for(;"="==t.charAt(r-1);)r--;const i=t.indexOf(",")+1;return ai(this,e,{data:t,Reader:Gt,Writer:$t,options:n,uncompressedSize:Math.floor(.75*(r-i))})}addUint8Array(e,t,n={}){return ai(this,e,{data:t,Reader:yn,Writer:wn,options:n,uncompressedSize:t.length})}addHttpContent(e,t,n={}){return ai(this,e,{data:t,Reader:class extends gn{constructor(e){super(e,n)}},options:n})}addReadable(e,t,n={}){return ai(this,e,{Reader:function(){return{readable:t}},options:n})}addFileSystemEntry(e,t={}){return ri(this,e,t)}addFileSystemHandle(e,t={}){return ri(this,e,t)}addFile(e,t={}){return t.lastModDate||(t.lastModDate=new Date(e.lastModified)),ai(this,e.name,{data:e,Reader:function(){return{readable:e.stream(),size:e.size}},options:t,uncompressedSize:e.size})}addData(e,t){return ai(this,e,t)}importBlob(e,t){return this.importZip(new Jt(e),t)}importData64URI(e,t){return this.importZip(new Gt(e),t)}importUint8Array(e,t){return this.importZip(new yn(e),t)}importHttpContent(e,t){return this.importZip(new gn(e,t),t)}importReadable(e,t){return this.importZip({readable:e},t)}exportBlob(e={}){return this.exportZip(new Qt(e.mimeType||"application/zip"),e)}exportData64URI(e={}){return this.exportZip(new $t(e.mimeType||"application/zip"),e)}exportUint8Array(e={}){return this.exportZip(new wn,e)}async exportWritable(e=new WritableStream,t={}){return await this.exportZip({writable:e},t),e}async importZip(e,t={}){await xn(e);const n=new fr(e,t),r=[],i=await n.getEntries();for(const e of i){let n=this;try{const i=e.filename.split("/"),o=i.pop();i.forEach(((t,o)=>{const a=n;n=n.getChildByName(t),n||(n=new Jr(this.fs,t,{data:o==i.length-1?e:null},a),r.push(n))})),e.directory||r.push(ai(n,o,{data:e,Reader:ei(Object.assign({},t)),uncompressedSize:e.uncompressedSize,passThrough:t.passThrough}))}catch(t){try{t.cause={entry:e}}catch(e){}throw t}}return r}async exportZip(e,t){const n=this;t.bufferedWrite===ee&&(t.bufferedWrite=!0),await Promise.all([ti(n,t.readerOptions),xn(e)]);const r=new Mr(e,t);return await async function(e,t,n,r){const i=t,o=new Map;await async function e(t,a){async function s(a){const s=r.relativePath?a.getRelativeName(i):a.getFullname(),l=a.options||{};let c={};if(a.data instanceof $n){const{externalFileAttribute:e,versionMadeBy:t,comment:n,lastModDate:r,creationDate:i,lastAccessDate:o,uncompressedSize:s,encrypted:l,zipCrypto:d,signature:u,compressionMethod:f,extraFieldAES:p}=a.data;if(c={externalFileAttribute:e,versionMadeBy:t,comment:n,lastModDate:r,creationDate:i,lastAccessDate:o},a.passThrough){let e,t;0===f&&(e=0),p&&(t=p.strength),c=Object.assign(c,{passThrough:!0,encrypted:l,zipCrypto:d,signature:u,uncompressedSize:s,level:e,encryptionStrength:t,compressionMethod:f})}}await t.add(s,a.reader,Object.assign({directory:a.directory},Object.assign({},r,c,l,{onprogress:async e=>{if(r.onprogress){o.set(s,e);try{await r.onprogress(Array.from(o.values()).reduce(((e,t)=>e+t)),n)}catch(e){}}}}))),await e(t,a)}await async function(){if(r.bufferedWrite)await Promise.allSettled(a.children.map(s));else for(const e of a.children)await s(e)}()}(e,t)}(r,n,function(e){let t=0;return e.forEach((function e(n){t+=n.uncompressedSize,n.children&&n.children.forEach(e)})),t}([n]),t),await r.close(),e.getData?e.getData():e.writable}getChildByName(e){const t=this.children;for(let n=0;n<t.length;n++){const r=t[n];if(r.name==e)return r}}isPasswordProtected(){const e=this.children;for(let t=0;t<e.length;t++)if(e[t].isPasswordProtected())return!0;return!1}async checkPassword(e,t={}){const n=this.children;return!(await Promise.all(n.map((n=>n.checkPassword(e,t))))).includes(!1)}}const Qr={FS:class{constructor(){oi(this)}get children(){return this.root.children}remove(e){ni(e),this.entries[e.id]=null}move(e,t){if(e==this.root)throw new Error("Root directory cannot be moved");if(!t.directory)throw new Error("Target entry is not a directory");if(t.isDescendantOf(e))throw new Error("Entry is a ancestor of target entry");if(e!=t){if(t.getChildByName(e.name))throw new Error("Entry filename already exists");ni(e),e.parent=t,t.children.push(e)}}find(e){const t=e.split("/");let n=this.root;for(let e=0;n&&e<t.length;e++)n=n.getChildByName(t[e]);return n}getById(e){return this.entries[e]}getChildByName(e){return this.root.getChildByName(e)}addDirectory(e,t){return this.root.addDirectory(e,t)}addText(e,t,n){return this.root.addText(e,t,n)}addBlob(e,t,n){return this.root.addBlob(e,t,n)}addData64URI(e,t,n){return this.root.addData64URI(e,t,n)}addUint8Array(e,t,n){return this.root.addUint8Array(e,t,n)}addHttpContent(e,t,n){return this.root.addHttpContent(e,t,n)}addReadable(e,t,n){return this.root.addReadable(e,t,n)}addFileSystemEntry(e,t){return this.root.addFileSystemEntry(e,t)}addFileSystemHandle(e,t){return this.root.addFileSystemHandle(e,t)}addFile(e,t){return this.root.addFile(e,t)}addData(e,t){return this.root.addData(e,t)}importBlob(e,t){return oi(this),this.root.importBlob(e,t)}importData64URI(e,t){return oi(this),this.root.importData64URI(e,t)}importUint8Array(e,t){return oi(this),this.root.importUint8Array(e,t)}importHttpContent(e,t){return oi(this),this.root.importHttpContent(e,t)}importReadable(e,t){return oi(this),this.root.importReadable(e,t)}importZip(e,t){return this.root.importZip(e,t)}exportBlob(e){return this.root.exportBlob(e)}exportData64URI(e){return this.root.exportData64URI(e)}exportUint8Array(e){return this.root.exportUint8Array(e)}exportWritable(e,t){return this.root.exportWritable(e,t)}isPasswordProtected(){return this.root.isPasswordProtected()}checkPassword(e,t){return this.root.checkPassword(e,t)}},ZipDirectoryEntry:Jr,ZipFileEntry:$r};function ei(e){return class extends Xt{constructor(e,t={}){super(),this.entry=e,this.options=t}async init(){const t=this;t.size=t.entry.uncompressedSize;const n=await t.entry.getData(new Qt,Object.assign({},t.options,e));t.data=n,t.blobReader=new Jt(n),super.init()}readUint8Array(e,t){return this.blobReader.readUint8Array(e,t)}}}async function ti(e,t){e.children.length&&await Promise.all(e.children.map((async e=>{if(e.directory)await ti(e,t);else{const n=e.reader=new e.Reader(e.data,t);try{await xn(n)}catch(t){try{t.entryId=e.id,t.cause={entry:e}}catch(e){}throw t}e.uncompressedSize=n.size}})))}function ni(e){if(e.parent){const t=e.parent.children;t.forEach(((n,r)=>{n.id==e.id&&t.splice(r,1)}))}}function ri(e,t,n){return async function e(t,r,i){if(r)try{if((r.isFile||r.isDirectory)&&(r=await ii(r)),"file"==r.kind){const e=await r.getFile();i.push(t.addData(e.name,{Reader:function(){return{readable:e.stream(),size:e.size}},options:Object.assign({},{lastModDate:new Date(e.lastModified)},n),uncompressedSize:e.size}))}else if("directory"==r.kind){const n=t.addDirectory(r.name);i.push(n);for await(const t of r.values())await e(n,t,i)}}catch(e){const t=e.message+(r?" ("+r.name+")":"");throw new Error(t)}return i}(e,t,[])}async function ii(e){const t={name:e.name};if(e.isFile&&(t.kind="file",t.getFile=()=>new Promise(((t,n)=>e.file(t,n)))),e.isDirectory){t.kind="directory";const n=await async function(e){const t=[];function n(e,r,i){e.readEntries((async o=>{if(o.length){for(const e of o)t.push(await ii(e));n(e,r,i)}else r(t)}),i)}return await new Promise(((t,r)=>n(e.createReader(),t,r))),{[Symbol.iterator](){let e=0;return{next(){const n={value:t[e],done:e===t.length};return e++,n}}}}}(e);t.values=()=>n}return t}function oi(e){e.entries=[],e.root=new Jr(e)}function ai(e,t,n,r){if(e.directory)return r?new Jr(e.fs,t,n,e):new $r(e.fs,t,n,e);throw new Error("Parent entry is not a directory")}let si;try{si="undefined"==typeof document?n(835).pathToFileURL("/index.js").href:r&&"SCRIPT"===r.tagName.toUpperCase()&&r.src||new URL("index.cjs",document.baseURI).href}catch(e){}ce({baseURL:si}),function(e,t={}){const n='const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self,k=void 0,v="undefined",S="function";class z{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const C=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;C[e]=t}class x{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^C[255&(t^e[n])];this.t=t}get(){return~this.t}}class A extends p{constructor(){let e;const t=new x;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new i(4);new l(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const _={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=_.i(n);return 32===r?e.concat(t):_.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+_.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=_.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=_.i(s);return r.push(_.h(t+i&31,t+i>32?n:r.pop(),1)),r}},I={bytes:{p(e){const t=_.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)3&s||(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},m(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3&~n||(t.push(r),r=0);return 3&n&&t.push(_.h(8*(3&n),r)),t}}},P=class{constructor(e){const t=this;t.blockSize=512,t.k=[1732584193,4023233417,2562383102,271733878,3285377520],t.v=[1518500249,1859775393,2400959708,3395469782],e?(t.S=e.S.slice(0),t.C=e.C.slice(0),t.A=e.A):t.reset()}reset(){const e=this;return e.S=e.k.slice(0),e.C=[],e.A=0,e}update(e){const t=this;"string"==typeof e&&(e=I._.m(e));const n=t.C=_.concat(t.C,e),r=t.A,i=t.A=r+_.l(e);if(i>9007199254740991)throw new s("Cannot hash more than 2^53 - 1 bits");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.I(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}P(){const e=this;let t=e.C;const n=e.S;t=_.concat(t,[_.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e.A/4294967296)),t.push(0|e.A);t.length;)e.I(t.splice(0,16));return e.reset(),n}D(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}V(e,t){return t<<e|t>>>32-e}I(t){const n=this,s=n.S,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.V(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.V(5,o)+n.D(e,c,f,a)+l+i[e]+n.v[r.floor(e/20)]|0;l=a,a=f,f=n.V(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},D={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},V={importKey:e=>new V.R(I.bytes.m(e)),B(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=_;for(t=I.bytes.m(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},R:class{constructor(e){const t=this,n=t.M=P,r=[[],[]];t.U=[new n,new n];const s=t.U[0].blockSize/32;e.length>s&&(e=(new n).update(e).P());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.U[0].update(r[0]),t.U[1].update(r[1]),t.K=new n(t.U[0])}reset(){const e=this;e.K=new e.M(e.U[0]),e.N=!1}update(e){this.N=!0,this.K.update(e)}digest(){const e=this,t=e.K.P(),n=new e.M(e.U[1]).update(t).P();return e.reset(),n}encrypt(e){if(this.N)throw new s("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},R=typeof h!=v&&typeof h.getRandomValues==S,B="Invalid password",E="Invalid signature",M="zipjs-abort-check-password";function U(e){return R?h.getRandomValues(e):D.getRandomValues(e)}const K=16,N={name:"PBKDF2"},O=t.assign({hash:{name:"HMAC"}},N),T=t.assign({iterations:1e3,hash:{name:"SHA-1"}},N),W=["deriveBits"],j=[8,12,16],H=[16,24,32],L=10,F=[0,0,0,0],q=typeof h!=v,G=q&&h.subtle,J=q&&typeof G!=v,Q=I.bytes,X=class{constructor(e){const t=this;t.O=[[[],[],[],[],[]],[[],[],[],[],[]]],t.O[0][0][0]||t.T();const n=t.O[0][4],r=t.O[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s("invalid aes key size");for(t.v=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.W(e,0)}decrypt(e){return this.W(e,1)}T(){const e=this.O[0],t=this.O[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}W(e,t){if(4!==e.length)throw new s("invalid aes block size");const n=this.v[t],r=n.length/4-2,i=[0,0,0,0],o=this.O[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},Y=class{constructor(e,t){this.j=e,this.H=t,this.L=t}reset(){this.L=this.H}update(e){return this.F(this.j,e,this.L)}q(e){if(255&~(e>>24))e+=1<<24;else{let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}return e}G(e){0===(e[0]=this.q(e[0]))&&(e[1]=this.q(e[1]))}F(e,t,n){let r;if(!(r=t.length))return[];const s=_.l(t);for(let s=0;r>s;s+=4){this.G(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return _.u(t,s)}},Z=V.R;let $=q&&J&&typeof G.importKey==S,ee=q&&J&&typeof G.deriveBits==S;class te extends p{constructor({password:e,rawPassword:n,signed:r,encryptionStrength:o,checkPasswordOnly:c}){super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:ie(e,n),signed:r,X:o-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:o,J:f,ready:a}=n;r?(await(async(e,t,n,r)=>{const i=await se(e,t,n,ce(r,0,j[t])),o=ce(r,j[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(B)})(n,o,r,ce(e,0,j[o]+2)),e=ce(e,j[o]+2),c?t.error(new s(M)):f()):await a;const l=new i(e.length-L-(e.length-L)%K);t.enqueue(re(n,e,l,0,L,!0))},async flush(e){const{signed:t,Y:n,Z:r,pending:o,ready:c}=this;if(r&&n){await c;const f=ce(o,0,o.length-L),a=ce(o,o.length-L);let l=new i;if(f.length){const e=ae(Q,f);r.update(e);const t=n.update(e);l=fe(Q,t)}if(t){const e=ce(fe(Q,r.digest()),0,L);for(let t=0;L>t;t++)if(e[t]!=a[t])throw new s(E)}e.enqueue(l)}}})}}class ne extends p{constructor({password:e,rawPassword:n,encryptionStrength:r}){let s;super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:ie(e,n),X:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:s,J:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=U(new i(j[t]));return oe(r,await se(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%K);a.set(f,0),t.enqueue(re(n,e,a,f.length,0))},async flush(e){const{Y:t,Z:n,pending:r,ready:o}=this;if(n&&t){await o;let c=new i;if(r.length){const e=t.update(ae(Q,r));n.update(e),c=fe(Q,e)}s.signature=fe(Q,n.digest()).slice(0,L),e.enqueue(oe(c,s.signature))}}}),s=this}}function re(e,t,n,r,s,o){const{Y:c,Z:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=oe(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%K)),u=0;l-K>=u;u+=K){const e=ae(Q,ce(t,u,u+K));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(fe(Q,s),u+r)}return e.pending=ce(t,u),n}async function se(n,r,s,o){n.password=null;const c=await(async(e,t,n,r,s)=>{if(!$)return V.importKey(t);try{return await G.importKey("raw",t,n,!1,s)}catch(e){return $=!1,V.importKey(t)}})(0,s,O,0,W),f=await(async(e,t,n)=>{if(!ee)return V.B(t,e.salt,T.iterations,n);try{return await G.deriveBits(e,t,n)}catch(r){return ee=!1,V.B(t,e.salt,T.iterations,n)}})(t.assign({salt:o},T),c,8*(2*H[r]+2)),a=new i(f),l=ae(Q,ce(a,0,H[r])),u=ae(Q,ce(a,H[r],2*H[r])),w=ce(a,2*H[r]);return t.assign(n,{keys:{key:l,$:u,passwordVerification:w},Y:new Y(new X(l),e.from(F)),Z:new Z(u)}),w}function ie(e,t){return t===k?(e=>{if(typeof w==v){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(e):t}function oe(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ce(e,t,n){return e.subarray(t,n)}function fe(e,t){return e.p(t)}function ae(e,t){return e.m(t)}class le extends p{constructor({password:e,passwordVerification:n,checkPasswordOnly:r}){super({start(){t.assign(this,{password:e,passwordVerification:n}),de(this,e)},transform(e,t){const n=this;if(n.password){const t=we(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(B);e=e.subarray(12)}r?t.error(new s(M)):t.enqueue(we(n,e))}})}}class ue extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),de(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=U(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(he(n,t),0),s=12}else r=new i(e.length),s=0;r.set(he(n,e),s),t.enqueue(r)}})}}function we(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=ye(e)^t[r],pe(e,n[r]);return n}function he(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=ye(e)^t[r],pe(e,t[r]);return n}function de(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,ee:new x(r[0]),te:new x(r[2])});for(let t=0;t<n.length;t++)pe(e,n.charCodeAt(t))}function pe(e,t){let[n,s,i]=e.keys;e.ee.append([t]),n=~e.ee.get(),s=be(r.imul(be(s+me(n)),134775813)+1),e.te.append([s>>>24]),i=~e.te.get(),e.keys=[n,s,i]}function ye(e){const t=2|e.keys[2];return me(r.imul(t,1^t)>>>8)}function me(e){return 255&e}function be(e){return 4294967295&e}const ge="deflate-raw";class ke extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=Se(super.readable);i&&!c||!f||(w=new A,d=xe(d,w)),s&&(d=Ce(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=xe(d,new ue(e)):(h=new ne(e),d=xe(d,h))),ze(u,d,(()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=new l(w.value.buffer).getUint32(0)),u.signature=e}))}}class ve extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=Se(super.readable);o&&(i?d=xe(d,new le(e)):(h=new te(e),d=xe(d,h))),a&&(d=Ce(d,u,{chunkSize:t},r,n)),o&&!i||!c||(w=new A,d=xe(d,w)),ze(this,d,(()=>{if((!o||i)&&c){const e=new l(w.value.buffer);if(f!=e.getUint32(0,!1))throw new s(E)}}))}}function Se(e){return xe(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ze(e,n,r){n=xe(n,new p({flush:r})),t.defineProperty(e,"readable",{get:()=>n})}function Ce(e,t,n,r,s){try{e=xe(e,new(t&&r?r:s)(ge,n))}catch(r){if(!t)return e;try{e=xe(e,new s(ge,n))}catch(t){return e}}return e}function xe(e,t){return e.pipeThrough(t)}const Ae="data",_e="close";class Ie extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith("deflate")?i=ke:s.startsWith("inflate")&&(i=ve);let o=0,c=0;const f=new i(e,n),a=super.readable,l=new p({transform(e,t){e&&e.length&&(c+=e.length,t.enqueue(e))},flush(){t.assign(r,{inputSize:c})}}),u=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=f;t.assign(r,{signature:e,outputSize:o,inputSize:c})}});t.defineProperty(r,"readable",{get:()=>a.pipeThrough(l).pipeThrough(f).pipeThrough(u)})}}class Pe extends p{constructor(e){let t;super({transform:function n(r,s){if(t){const e=new i(t.length+r.length);e.set(t),e.set(r,t.length),r=e,t=null}r.length>e?(s.enqueue(r.slice(0,e)),n(r.slice(e),s)):t=r},flush(e){t&&t.length&&e.enqueue(t)}})}}const De=new a,Ve=new a;let Re,Be=0,Ee=!0;async function Me(e){try{const{options:t,scripts:r,config:s}=e;if(r&&r.length)try{Ee?importScripts.apply(k,r):await Ue(r)}catch(e){Ee=!1,await Ue(r)}self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new z(self.Deflate)),self.Inflate&&(s.DecompressionStream=new z(self.Inflate));const i={highWaterMark:1},o=e.readable||new y({async pull(e){const t=new u((e=>De.set(Be,e)));Ke({type:"pull",messageId:Be}),Be=(Be+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));Ve.set(Be,t),Ke({type:Ae,value:e,messageId:Be}),Be=(Be+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new Ie(t,s);Re=new AbortController;const{signal:a}=Re;await o.pipeThrough(f).pipeThrough(new Pe(s.chunkSize)).pipeTo(c,{signal:a,preventClose:!0,preventAbort:!0}),await c.getWriter().close();const{signature:l,inputSize:w,outputSize:h}=f;Ke({type:_e,result:{signature:l,inputSize:w,outputSize:h}})}catch(e){Ne(e)}}async function Ue(e){for(const t of e)await import(t)}function Ke(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Ne(e=new s("Unknown error")){const{message:t,stack:n,code:r,name:i}=e;d({error:{message:t,stack:n,code:r,name:i}})}addEventListener("message",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if("start"==t&&Me(e),t==Ae){const e=De.get(n);De.delete(n),e({value:new i(r),done:s})}if("ack"==t){const e=Ve.get(n);Ve.delete(n),e()}t==_e&&Re.abort()}catch(e){Ne(e)}}));const Oe=-2;function Te(t){return We(t.map((([t,n])=>new e(t).fill(n,0,t))))}function We(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?We(n):n)),[])}const je=[0,1,2,3].concat(...Te([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function He(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.ne=n=>{const s=e.re,i=e.ie.se,o=e.ie.oe;let c,f,a,l=-1;for(n.ce=0,n.fe=573,c=0;o>c;c++)0!==s[2*c]?(n.ae[++n.ce]=l=c,n.le[c]=0):s[2*c+1]=0;for(;2>n.ce;)a=n.ae[++n.ce]=2>l?++l:0,s[2*a]=1,n.le[a]=0,n.ue--,i&&(n.we-=i[2*a+1]);for(e.he=l,c=r.floor(n.ce/2);c>=1;c--)n.de(s,c);a=o;do{c=n.ae[1],n.ae[1]=n.ae[n.ce--],n.de(s,1),f=n.ae[1],n.ae[--n.fe]=c,n.ae[--n.fe]=f,s[2*a]=s[2*c]+s[2*f],n.le[a]=r.max(n.le[c],n.le[f])+1,s[2*c+1]=s[2*f+1]=a,n.ae[1]=a++,n.de(s,1)}while(n.ce>=2);n.ae[--n.fe]=n.ae[1],(t=>{const n=e.re,r=e.ie.se,s=e.ie.pe,i=e.ie.ye,o=e.ie.me;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.be[l]=0;for(n[2*t.ae[t.fe]+1]=0,c=t.fe+1;573>c;c++)f=t.ae[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.he||(t.be[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.ue+=w*(l+u),r&&(t.we+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.be[l];)l--;t.be[l]--,t.be[l+1]+=2,t.be[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.be[l];0!==f;)a=t.ae[--c],a>e.he||(n[2*a+1]!=l&&(t.ue+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.he,n.be)}}function Le(e,t,n,r,s){const i=this;i.se=e,i.pe=t,i.ye=n,i.oe=r,i.me=s}He.ge=[0,1,2,3,4,5,6,7].concat(...Te([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),He.ke=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],He.ve=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],He.Se=e=>256>e?je[e]:je[256+(e>>>7)],He.ze=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],He.Ce=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],He.xe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],He.Ae=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Fe=Te([[144,8],[112,9],[24,7],[8,8]]);Le._e=We([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Fe[t]])));const qe=Te([[30,5]]);function Ge(e,t,n,r,s){const i=this;i.Ie=e,i.Pe=t,i.De=n,i.Ve=r,i.Re=s}Le.Be=We([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,qe[t]]))),Le.Ee=new Le(Le._e,He.ze,257,286,15),Le.Me=new Le(Le.Be,He.Ce,0,30,15),Le.Ue=new Le(null,He.xe,0,19,7);const Je=[new Ge(0,0,0,0,0),new Ge(4,4,8,4,1),new Ge(4,5,16,8,1),new Ge(4,6,32,32,1),new Ge(4,4,16,16,2),new Ge(8,16,32,32,2),new Ge(8,16,128,128,2),new Ge(8,32,128,256,2),new Ge(32,128,258,1024,2),new Ge(32,258,258,4096,2)],Qe=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],Xe=113,Ye=666,Ze=262;function $e(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function et(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,A,_,I,P,D,V,R,B,E,M,U;const K=new He,N=new He,O=new He;let T,W,j,H,L,F;function q(){let t;for(t=0;286>t;t++)E[2*t]=0;for(t=0;30>t;t++)M[2*t]=0;for(t=0;19>t;t++)U[2*t]=0;E[512]=1,e.ue=e.we=0,W=j=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?U[2*n]+=i:0!==n?(n!=r&&U[2*n]++,U[32]++):i>10?U[36]++:U[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ke[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;F>16-r?(n=e,L|=n<<F&65535,Q(L),L=n>>>16-F,F+=r-16):(L|=e<<F&65535,F+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,U)}while(0!=--o);else 0!==r?(r!=s&&(Y(r,U),o--),Y(16,U),X(o-3,2)):o>10?(Y(18,U),X(o-11,7)):(Y(17,U),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==F?(Q(L),L=0,F=0):8>F||(J(255&L),L>>>=8,F-=8)}function ee(t,n){let s,i,o;if(e.Ne[W]=t,e.Oe[W]=255&n,W++,0===t?E[2*n]++:(j++,t--,E[2*(He.ge[n]+256+1)]++,M[2*He.Se(t)]++),!(8191&W)&&D>2){for(s=8*W,i=C-k,o=0;30>o;o++)s+=M[2*o]*(5+He.Ce[o]);if(s>>>=3,j<r.floor(W/2)&&s<r.floor(i/2))return!0}return W==T-1}function te(t,n){let r,s,i,o,c=0;if(0!==W)do{r=e.Ne[c],s=e.Oe[c],c++,0===r?Y(s,t):(i=He.ge[s],Y(i+256+1,t),o=He.ze[i],0!==o&&(s-=He.ke[i],X(s,o)),r--,i=He.Se(r),Y(i,n),o=He.Ce[i],0!==o&&(r-=He.ve[i],X(r,o)))}while(W>c);Y(256,t),H=t[513]}function ne(){F>8?Q(L):F>0&&J(255&L),L=0,F=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),H=8,Q(n),Q(~n),e.Ke.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;D>0?(K.ne(e),N.ne(e),o=(()=>{let t;for(G(E,K.he),G(M,N.he),O.ne(e),t=18;t>=3&&0===U[2*He.Ae[t]+1];t--);return e.ue+=14+3*(t+1),t})(),s=e.ue+3+7>>>3,i=e.we+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Le._e,Le.Be)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(U[2*He.Ae[r]+1],3);Z(E,e-1),Z(M,t-1)})(K.he+1,N.he+1,o+1),te(E,M)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.Te()}function ie(){let e,n,r,s;do{if(s=w-A-C,0===s&&0===C&&0===A)s=f;else if(-1==s)s--;else if(C>=f+f-Ze){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!=--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!=--e);s+=f}if(0===t.We)return;e=t.je(u,C+A,s),A+=e,3>A||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Ze>A&&0!==t.We)}function oe(e){let t,n,r=I,s=C,i=_;const o=C>f-Ze?C-(f-Ze):0;let c=B;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];R>_||(r>>=2),c>A&&(c=A);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!=--r);return i>A?A:i}e.le=[],e.be=[],e.ae=[],E=[],M=[],U=[],e.de=(t,n)=>{const r=e.ae,s=r[n];let i=n<<1;for(;i<=e.ce&&(i<e.ce&&$e(t,r[i+1],r[i],e.le)&&i++,!$e(t,s,r[i],e.le));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.He=(t,S,x,W,j,G)=>(W||(W=8),j||(j=8),G||(G=0),t.Le=null,-1==S&&(S=6),1>j||j>9||8!=W||9>x||x>15||0>S||S>9||0>G||G>2?Oe:(t.Fe=e,a=x,f=1<<a,l=f-1,m=j+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],T=1<<j+6,e.Ke=new i(4*T),s=4*T,e.Ne=new o(T),e.Oe=new i(T),D=S,V=G,(t=>(t.qe=t.Ge=0,t.Le=null,e.pending=0,e.Je=0,n=Xe,c=0,K.re=E,K.ie=Le.Ee,N.re=M,N.ie=Le.Me,O.re=U,O.ie=Le.Ue,L=0,F=0,H=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;P=Je[D].Pe,R=Je[D].Ie,B=Je[D].De,I=Je[D].Ve,C=0,k=0,A=0,v=_=2,z=0,p=0})(),0))(t))),e.Qe=()=>42!=n&&n!=Xe&&n!=Ye?Oe:(e.Oe=null,e.Ne=null,e.Ke=null,d=null,h=null,u=null,e.Fe=null,n==Xe?-3:0),e.Xe=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Oe:(Je[D].Re!=Je[t].Re&&0!==e.qe&&(r=e.Ye(1)),D!=t&&(D=t,P=Je[D].Pe,R=Je[D].Ie,B=Je[D].De,I=Je[D].Ve),V=n,r)},e.Ze=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Oe;if(3>i)return 0;for(i>f-Ze&&(i=f-Ze,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ye=(r,i)=>{let o,w,m,I,R;if(i>4||0>i)return Oe;if(!r.$e||!r.et&&0!==r.We||n==Ye&&4!=i)return r.Le=Qe[4],Oe;if(0===r.tt)return r.Le=Qe[7],-5;var B;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(D-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=Xe,J((B=w)>>8&255),J(255&B)),0!==e.pending){if(t.Te(),0===t.tt)return c=-1,0}else if(0===t.We&&I>=i&&4!=i)return t.Le=Qe[7],-5;if(n==Ye&&0!==t.We)return r.Le=Qe[7],-5;if(0!==t.We||0!==A||0!=i&&n!=Ye){switch(R=-1,Je[D].Re){case 0:R=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=A){if(ie(),0===A&&0==e)return 0;if(0===A)break}if(C+=A,A=0,n=k+r,(0===C||C>=n)&&(A=C-n,C=n,se(!1),0===t.tt))return 0;if(C-k>=f-Ze&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 1:R=(e=>{let n,r=0;for(;;){if(Ze>A){if(ie(),Ze>A&&0==e)return 0;if(0===A)break}if(3>A||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Ze||2!=V&&(v=oe(r)),3>v)n=ee(0,255&u[C]),A--,C++;else if(n=ee(C-x,v-3),A-=v,v>P||3>A)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!=--v);C++}if(n&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 2:R=(e=>{let n,r,s=0;for(;;){if(Ze>A){if(ie(),Ze>A&&0==e)return 0;if(0===A)break}if(3>A||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),_=v,S=x,v=2,0!==s&&P>_&&f-Ze>=(C-s&65535)&&(2!=V&&(v=oe(s)),5>=v&&(1==V||3==v&&C-x>4096)&&(v=2)),3>_||v>_)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,A--,0===t.tt)return 0}else z=1,C++,A--;else{r=C+A-3,n=ee(C-1-S,_-3),A-=_-1,_-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!=--_);if(z=0,v=2,C++,n&&(se(!1),0===t.tt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i)}if(2!=R&&3!=R||(n=Ye),0==R||2==R)return 0===t.tt&&(c=-1),0;if(1==R){if(1==i)X(2,3),Y(256,Le._e),$(),9>1+H+10-F&&(X(2,3),Y(256,Le._e),$()),H=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.Te(),0===t.tt)return c=-1,0}}return 4!=i?0:1}}function tt(){const e=this;e.nt=0,e.rt=0,e.We=0,e.qe=0,e.tt=0,e.Ge=0}function nt(e){const t=new tt,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.He(f),t.$e=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,o=t.Ye(0),0!=o)throw new s("deflating: "+t.Le);t.rt&&(t.rt==n?w.push(new i(c)):w.push(c.subarray(0,t.rt))),u+=t.rt,r&&t.nt>0&&t.nt!=a&&(r(t.nt),a=t.nt)}while(t.We>0||0===t.tt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]?new i(w[0]):new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.rt=0,t.tt=n,e=t.Ye(4),1!=e&&0!=e)throw new s("deflating: "+t.Le);n-t.tt>0&&a.push(c.slice(0,t.rt)),f+=t.rt}while(t.We>0||0===t.tt);return t.Qe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}tt.prototype={He(e,t){const n=this;return n.Fe=new et,t||(t=15),n.Fe.He(n,e,t)},Ye(e){const t=this;return t.Fe?t.Fe.Ye(t,e):Oe},Qe(){const e=this;if(!e.Fe)return Oe;const t=e.Fe.Qe();return e.Fe=null,t},Xe(e,t){const n=this;return n.Fe?n.Fe.Xe(n,e,t):Oe},Ze(e,t){const n=this;return n.Fe?n.Fe.Ze(n,e,t):Oe},je(e,t,n){const r=this;let s=r.We;return s>n&&(s=n),0===s?0:(r.We-=s,e.set(r.et.subarray(r.nt,r.nt+s),t),r.nt+=s,r.qe+=s,s)},Te(){const e=this;let t=e.Fe.pending;t>e.tt&&(t=e.tt),0!==t&&(e.$e.set(e.Fe.Ke.subarray(e.Fe.Je,e.Fe.Je+t),e.rt),e.rt+=t,e.Fe.Je+=t,e.Ge+=t,e.tt-=t,e.Fe.pending-=t,0===e.Fe.pending&&(e.Fe.Je=0))}};const rt=-2,st=-3,it=-5,ot=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],ct=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],ft=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],at=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],lt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],ut=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],wt=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function ht(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,A,_,I,P;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return st;if(0>(I-=n[g]))return st;for(n[g]+=I,i[1]=k=0,C=1,_=2;0!=--g;)i[_]=k+=n[C],_++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,A=-S,s[0]=0,x=0,P=0;m>=v;v++)for(p=n[v];0!=p--;){for(;v>A+S;){if(b++,A+=S,P=m-A,P=P>S?S:P,(y=1<<(k=v-A))>p+1&&(y-=p+1,_=v,P>k))for(;++k<P&&(y<<=1)>n[++_];)y-=n[_];if(P=1<<k,h[0]+P>1440)return st;s[b]=x=h[0],h[0]+=P,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>A-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-A,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-A,k=g>>>A;P>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;g&k;k>>>=1)g^=k;for(g^=k,z=(1<<A)-1;(g&z)!=i[b];)b--,A-=S,z=(1<<A)-1}return 0!==I&&1!=m?it:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.st=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==st?f.Le="oversubscribed dynamic bit lengths tree":a!=it&&0!==r[0]||(f.Le="incomplete dynamic bit lengths tree",a=st),a},this.it=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,at,lt,a,i,u,e,t),0!=h||0===i[0]?(h==st?w.Le="oversubscribed literal/length tree":-4!=h&&(w.Le="incomplete literal/length tree",h=st),h):(c(288),h=o(s,n,r,0,ut,wt,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==st?w.Le="oversubscribed distance tree":h==it?(w.Le="incomplete distance tree",h=st):-4!=h&&(w.Le="empty distance tree with lengths",h=st),h):0)}}function dt(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.nt,p=c.We,w=o.ot,h=o.ct,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=ot[e],g=ot[t];do{for(;20>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],16&u){for(u&=15,k=a[z+2]+(w&ot[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],16&u){for(u&=15;u>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(v=a[z+2]+(w&ot[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--u);else o.lt.set(o.lt.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.lt[y++]=o.lt[S++],o.lt[y++]=o.lt[S++],k-=2):(o.lt.set(o.lt.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--k);else o.lt.set(o.lt.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(64&u)return c.Le="invalid distance code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,st;f+=a[z+2],f+=w&ot[u],z=3*(l+f),u=a[z]}break}if(64&u)return 32&u?(k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,1):(c.Le="invalid literal/length code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,st);if(f+=a[z+2],f+=w&ot[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.ut=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,A=0,_=0;for(_=y.nt,v=y.We,x=e.ot,A=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,m=p(u,w,r,h,s,d,e,y),_=y.nt,v=y.We,x=e.ot,A=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>A;){if(0===v)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(_++))<<A,A+=8}if(g=3*(o+(x&ot[b])),x>>>=n[g+1],A-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(16&k){a=15&k,i=n[g+2],t=2;break}if(!(64&k)){c=k,o=g/3+n[g+2];break}if(32&k){t=7;break}return t=9,y.Le="invalid literal/length code",m=st,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);case 2:for(b=a;b>A;){if(0===v)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(_++))<<A,A+=8}i+=x&ot[b],x>>=b,A-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>A;){if(0===v)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(_++))<<A,A+=8}if(g=3*(o+(x&ot[b])),x>>=n[g+1],A-=n[g+1],k=n[g],16&k){a=15&k,l=n[g+2],t=4;break}if(!(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Le="invalid distance code",m=st,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);case 4:for(b=a;b>A;){if(0===v)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(_++))<<A,A+=8}l+=x&ot[b],x>>=b,A-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);e.lt[S++]=e.lt[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,e.lt[S++]=f,z--,t=0;break;case 7:if(A>7&&(A-=8,v++,_--),e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);t=8;case 8:return m=1,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);case 9:return m=st,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);default:return m=rt,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m)}},e.ht=()=>{}}ht.dt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=ct,r[0]=ft,0);const pt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function yt(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new dt;let h=0,d=new f(4320);const p=new ht;n.ct=0,n.ot=0,n.lt=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.ht(e),s=0,n.ct=0,n.ot=0,n.read=n.write=0},n.reset(e,null),n.wt=(e,t)=>{let r,s,i;return s=e.rt,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.tt&&(r=e.tt),0!==r&&t==it&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.tt&&(r=e.tt),0!==r&&t==it&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r),e.rt=s,n.read=i,t},n.ut=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,A,_,I,P;switch(s){case 0:for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],ht.dt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Le="invalid block type",t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Le="invalid stored block lengths",t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.lt.set(e.je(m,i),g),m+=i,b-=i,g+=i,k-=i,0!=(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Le="too many length or distance symbols",t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}r[pt[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[pt[a++]]=0;if(l[0]=7,i=p.st(r,l,u,d,e),0!=i)return(t=i)==st&&(r=null,s=9),n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&ot[i]))+1],w=d[3*(u[0]+(f&ot[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&ot[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Le="invalid bit length repeat",t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!=--o);a=v}}if(u[0]=-1,A=[],_=[],I=[],P=[],A[0]=9,_[0]=6,i=c,i=p.it(257+(31&i),1+(i>>5&31),r,A,_,I,P,d,e),0!=i)return i==st&&(r=null,s=9),t=i,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w.init(A[0],_[0],d,I[0],d,P[0]),s=6;case 6:if(n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,1!=(t=w.ut(n,e,t)))return n.wt(e,t);if(t=0,w.ht(e),m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);s=8;case 8:return t=1,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);case 9:return t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);default:return t=rt,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}}},n.ht=e=>{n.reset(e,null),n.lt=null,d=null},n.yt=(e,t,r)=>{n.lt.set(e.subarray(t,t+r),0),n.read=n.write=r},n.bt=()=>1==s?1:0}const mt=13,bt=[0,0,255,255];function gt(){const e=this;function t(e){return e&&e.gt?(e.qe=e.Ge=0,e.Le=null,e.gt.mode=7,e.gt.kt.reset(e,null),0):rt}e.mode=0,e.method=0,e.vt=[0],e.St=0,e.marker=0,e.zt=0,e.Ct=t=>(e.kt&&e.kt.ht(t),e.kt=null,0),e.xt=(n,r)=>(n.Le=null,e.kt=null,8>r||r>15?(e.Ct(n),rt):(e.zt=r,n.gt.kt=new yt(n,1<<r),t(n),0)),e.At=(e,t)=>{let n,r;if(!e||!e.gt||!e.et)return rt;const s=e.gt;for(t=4==t?it:0,n=it;;)switch(s.mode){case 0:if(0===e.We)return n;if(n=t,e.We--,e.qe++,8!=(15&(s.method=e.ft(e.nt++)))){s.mode=mt,e.Le="unknown compression method",s.marker=5;break}if(8+(s.method>>4)>s.zt){s.mode=mt,e.Le="invalid win size",s.marker=5;break}s.mode=1;case 1:if(0===e.We)return n;if(n=t,e.We--,e.qe++,r=255&e.ft(e.nt++),((s.method<<8)+r)%31!=0){s.mode=mt,e.Le="incorrect header check",s.marker=5;break}if(!(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St=(255&e.ft(e.nt++))<<24&4278190080,s.mode=3;case 3:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<16&16711680,s.mode=4;case 4:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<8&65280,s.mode=5;case 5:return 0===e.We?n:(n=t,e.We--,e.qe++,s.St+=255&e.ft(e.nt++),s.mode=6,2);case 6:return s.mode=mt,e.Le="need dictionary",s.marker=0,rt;case 7:if(n=s.kt.ut(e,n),n==st){s.mode=mt,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.kt.reset(e,s.vt),s.mode=12;case 12:return e.We=0,1;case mt:return st;default:return rt}},e._t=(e,t,n)=>{let r=0,s=n;if(!e||!e.gt||6!=e.gt.mode)return rt;const i=e.gt;return s<1<<i.zt||(s=(1<<i.zt)-1,r=n-s),i.kt.yt(t,r,s),i.mode=7,0},e.It=e=>{let n,r,s,i,o;if(!e||!e.gt)return rt;const c=e.gt;if(c.mode!=mt&&(c.mode=mt,c.marker=0),0===(n=e.We))return it;for(r=e.nt,s=c.marker;0!==n&&4>s;)e.ft(r)==bt[s]?s++:s=0!==e.ft(r)?0:4-s,r++,n--;return e.qe+=r-e.nt,e.nt=r,e.We=n,c.marker=s,4!=s?st:(i=e.qe,o=e.Ge,t(e),e.qe=i,e.Ge=o,c.mode=7,0)},e.Pt=e=>e&&e.gt&&e.gt.kt?e.gt.kt.bt():rt}function kt(){}function vt(e){const t=new kt,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.xt(),t.$e=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,0!==t.We||c||(t.nt=0,c=!0),a=t.At(0),c&&a===it){if(0!==t.We)throw new s("inflating: bad input")}else if(0!==a&&1!==a)throw new s("inflating: "+t.Le);if((c||1===a)&&t.We===e.length)throw new s("inflating: bad input");t.rt&&(t.rt===n?f.push(new i(o)):f.push(o.subarray(0,t.rt))),h+=t.rt,r&&t.nt>0&&t.nt!=u&&(r(t.nt),u=t.nt)}while(t.We>0||0===t.tt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]?new i(f[0]):new i,l}},this.flush=()=>{t.Ct()}}kt.prototype={xt(e){const t=this;return t.gt=new gt,e||(e=15),t.gt.xt(t,e)},At(e){const t=this;return t.gt?t.gt.At(t,e):rt},Ct(){const e=this;if(!e.gt)return rt;const t=e.gt.Ct(e);return e.gt=null,t},It(){const e=this;return e.gt?e.gt.It(e):rt},_t(e,t){const n=this;return n.gt?n.gt._t(n,e,t):rt},ft(e){return this.et[e]},je(e,t){return this.et.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=nt,self.Inflate=vt};\n',r=()=>t.useDataURI?"data:text/javascript,"+encodeURIComponent(n):URL.createObjectURL(new Blob([n],{type:"text/javascript"}));e({workerScripts:{inflate:[r],deflate:[r]}})}(ce),ce({Deflate:function(e){const t=new b,n=(r=e&&e.chunkSize?e.chunkSize:65536)+5*(Math.floor(r/16383)+1);var r;const i=new Uint8Array(n);let o=e?e.level:-1;void 0===o&&(o=-1),t.deflateInit(o),t.next_out=i,this.append=function(e,r){let o,a,s=0,l=0,c=0;const d=[];if(e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,o=t.deflate(0),0!=o)throw new Error("deflating: "+t.msg);t.next_out_index&&(t.next_out_index==n?d.push(new Uint8Array(i)):d.push(i.subarray(0,t.next_out_index))),c+=t.next_out_index,r&&t.next_in_index>0&&t.next_in_index!=s&&(r(t.next_in_index),s=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return d.length>1?(a=new Uint8Array(c),d.forEach((function(e){a.set(e,l),l+=e.length}))):a=d[0]?new Uint8Array(d[0]):new Uint8Array,a}},this.flush=function(){let e,r,o=0,a=0;const s=[];do{if(t.next_out_index=0,t.avail_out=n,e=t.deflate(4),1!=e&&0!=e)throw new Error("deflating: "+t.msg);n-t.avail_out>0&&s.push(i.slice(0,t.next_out_index)),a+=t.next_out_index}while(t.avail_in>0||0===t.avail_out);return t.deflateEnd(),r=new Uint8Array(a),s.forEach((function(e){r.set(e,o),o+=e.length})),r}},Inflate:function(e){const t=new M,n=e&&e.chunkSize?Math.floor(2*e.chunkSize):131072,r=new Uint8Array(n);let i=!1;t.inflateInit(),t.next_out=r,this.append=function(e,o){const a=[];let s,l,c=0,d=0,u=0;if(0!==e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,0!==t.avail_in||i||(t.next_in_index=0,i=!0),s=t.inflate(0),i&&s===S){if(0!==t.avail_in)throw new Error("inflating: bad input")}else if(0!==s&&1!==s)throw new Error("inflating: "+t.msg);if((i||1===s)&&t.avail_in===e.length)throw new Error("inflating: bad input");t.next_out_index&&(t.next_out_index===n?a.push(new Uint8Array(r)):a.push(r.subarray(0,t.next_out_index))),u+=t.next_out_index,o&&t.next_in_index>0&&t.next_in_index!=c&&(o(t.next_in_index),c=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return a.length>1?(l=new Uint8Array(u),a.forEach((function(e){l.set(e,d),d+=e.length}))):l=a[0]?new Uint8Array(a[0]):new Uint8Array,l}},this.flush=function(){t.inflateEnd()}}}),t.BlobReader=Jt,t.BlobWriter=Qt,t.Data64URIReader=Gt,t.Data64URIWriter=$t,t.ERR_BAD_FORMAT=Jn,t.ERR_CENTRAL_DIRECTORY_NOT_FOUND=tr,t.ERR_DUPLICATED_NAME=Ar,t.ERR_ENCRYPTED=ir,t.ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND=er,t.ERR_EOCDR_NOT_FOUND=Qn,t.ERR_EXTRAFIELD_ZIP64_NOT_FOUND=rr,t.ERR_HTTP_RANGE=Nt,t.ERR_INVALID_COMMENT=Er,t.ERR_INVALID_ENCRYPTION_STRENGTH=Or,t.ERR_INVALID_ENTRY_COMMENT=Dr,t.ERR_INVALID_ENTRY_NAME=zr,t.ERR_INVALID_EXTRAFIELD_DATA=Rr,t.ERR_INVALID_EXTRAFIELD_TYPE=jr,t.ERR_INVALID_PASSWORD=Ae,t.ERR_INVALID_SIGNATURE=Ee,t.ERR_INVALID_VERSION=Cr,t.ERR_ITERATOR_COMPLETED_TOO_SOON=Lt,t.ERR_LOCAL_FILE_HEADER_NOT_FOUND=nr,t.ERR_SPLIT_ZIP_FILE=sr,t.ERR_UNDEFINED_UNCOMPRESSED_SIZE=Ir,t.ERR_UNSUPPORTED_COMPRESSION=ar,t.ERR_UNSUPPORTED_ENCRYPTION=or,t.ERR_UNSUPPORTED_FORMAT=Tr,t.HttpRangeReader=class extends gn{constructor(e,t={}){t.useRangeHeader=!0,super(e,t)}},t.HttpReader=gn,t.Reader=Xt,t.SplitDataReader=vn,t.SplitDataWriter=bn,t.SplitZipReader=An,t.SplitZipWriter=En,t.TextReader=en,t.TextWriter=tn,t.Uint8ArrayReader=yn,t.Uint8ArrayWriter=wn,t.Writer=Yt,t.ZipReader=fr,t.ZipReaderStream=class{constructor(e={}){const{readable:t,writable:n}=new TransformStream,r=new fr(t,e).getEntriesGenerator();this.readable=new ReadableStream({async pull(e){const{done:t,value:n}=await r.next();if(t)return e.close();const i={...n,readable:function(){const{readable:e,writable:t}=new TransformStream;if(n.getData)return n.getData(t),e}()};delete i.getData,e.enqueue(i)}}),this.writable=n}},t.ZipWriter=Mr,t.ZipWriterStream=class{constructor(e={}){const{readable:t,writable:n}=new TransformStream;this.readable=t,this.zipWriter=new Mr(n,e)}transform(e){const{readable:t,writable:n}=new TransformStream({flush:()=>{this.zipWriter.close()}});return this.zipWriter.add(e,t),{readable:this.readable,writable:n}}writable(e){const{readable:t,writable:n}=new TransformStream;return this.zipWriter.add(e,t),n}close(e=void 0,t={}){return this.zipWriter.close(e,t)}},t.configure=ce,t.fs=Qr,t.getMimeType=function(e){return e&&fe[e.split(".").pop().toLowerCase()]||"application/octet-stream"},t.initShimAsyncCodec=function(e,t={},n){return{Deflate:Mt(e.Deflate,t.deflate,n),Inflate:Mt(e.Inflate,t.inflate,n)}},t.terminateWorkers=async function(){await Promise.allSettled(Tt.map((e=>(Ut(e),e.terminate()))))}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,